/**
 * Evaluations API
 * API to create and evaluate custom challenges
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.12.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * OrganisationsApi.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_API_OrganisationsApi_H_
#define IO_SWAGGER_CLIENT_API_OrganisationsApi_H_


#include "../ApiClient.h"

#include "Organisation.h"
#include "OrganisationQuota.h"
#include <cpprest/details/basic_types.h>

#include <boost/optional.hpp>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  OrganisationsApi
{
public:
    OrganisationsApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~OrganisationsApi();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete an Organisation
    /// </remarks>
    /// <param name="organisationId">Organisation identifier</param>
    pplx::task<void> deleteOrganisationDao(
        int32_t organisationId
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get information of an organisation
    /// </remarks>
    /// <param name="organisationId">Organisation identifier</param>
    /// <param name="xFields">An optional fields mask (optional)</param>
    pplx::task<std::shared_ptr<Organisation>> getOrganisationDao(
        int32_t organisationId,
        boost::optional<utility::string_t> xFields
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get all organisations
    /// </remarks>
    /// <param name="xFields">An optional fields mask (optional)</param>
    pplx::task<std::vector<std::shared_ptr<Organisation>>> getOrganisationListDao(
        boost::optional<utility::string_t> xFields
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a new organisation
    /// </remarks>
    /// <param name="payload"></param>
    /// <param name="xFields">An optional fields mask (optional)</param>
    pplx::task<std::shared_ptr<Organisation>> postOrganisationListDao(
        std::shared_ptr<Organisation> payload,
        boost::optional<utility::string_t> xFields
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update an Organisation
    /// </remarks>
    /// <param name="organisationId">Organisation identifier</param>
    /// <param name="payload"></param>
    /// <param name="xFields">An optional fields mask (optional)</param>
    pplx::task<std::shared_ptr<Organisation>> putOrganisationDao(
        int32_t organisationId,
        std::shared_ptr<Organisation> payload,
        boost::optional<utility::string_t> xFields
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Add or subtract quota for an organisation
    /// </remarks>
    /// <param name="organisationId">Organisation identifier</param>
    /// <param name="payload"></param>
    pplx::task<void> putQuotaDao(
        int32_t organisationId,
        std::shared_ptr<OrganisationQuota> payload
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_API_OrganisationsApi_H_ */

