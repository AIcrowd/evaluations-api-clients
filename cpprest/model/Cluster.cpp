/**
 * AIcrowd Evaluations API
 * API to create and evaluate custom challenges on AIcrowd!
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.20.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Cluster.h"

namespace com {
namespace aicrowd {
namespace evaluations {
namespace models {

Cluster::Cluster()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Created = utility::datetime();
    m_CreatedIsSet = false;
    m_Updated = utility::datetime();
    m_UpdatedIsSet = false;
    m_Remote_address = utility::conversions::to_string_t("");
    m_Auth_token = utility::conversions::to_string_t("");
    m_Docker_username = utility::conversions::to_string_t("");
    m_Docker_registry = utility::conversions::to_string_t("");
    m_Docker_registryIsSet = false;
    m__namespace = utility::conversions::to_string_t("");
    m__namespaceIsSet = false;
    m_Storage_class = utility::conversions::to_string_t("");
    m_Storage_classIsSet = false;
    m_Status = false;
    m_StatusIsSet = false;
    m_Wf_name = utility::conversions::to_string_t("");
    m_Wf_nameIsSet = false;
    m_Argo_host = utility::conversions::to_string_t("");
    m_Argo_hostIsSet = false;
    m_Argo_token = utility::conversions::to_string_t("");
    m_Argo_tokenIsSet = false;
    m_User_id = 0;
    m_User_idIsSet = false;
    m_Organisation_id = 0;
    m_Organisation_idIsSet = false;
}

Cluster::~Cluster()
{
}

void Cluster::validate()
{
    // TODO: implement validation
}

web::json::value Cluster::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_CreatedIsSet)
    {
        val[utility::conversions::to_string_t("created")] = ModelBase::toJson(m_Created);
    }
    if(m_UpdatedIsSet)
    {
        val[utility::conversions::to_string_t("updated")] = ModelBase::toJson(m_Updated);
    }
    val[utility::conversions::to_string_t("remote_address")] = ModelBase::toJson(m_Remote_address);
    val[utility::conversions::to_string_t("auth_token")] = ModelBase::toJson(m_Auth_token);
    val[utility::conversions::to_string_t("docker_username")] = ModelBase::toJson(m_Docker_username);
    if(m_Docker_registryIsSet)
    {
        val[utility::conversions::to_string_t("docker_registry")] = ModelBase::toJson(m_Docker_registry);
    }
    if(m__namespaceIsSet)
    {
        val[utility::conversions::to_string_t("namespace")] = ModelBase::toJson(m__namespace);
    }
    if(m_Storage_classIsSet)
    {
        val[utility::conversions::to_string_t("storage_class")] = ModelBase::toJson(m_Storage_class);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    }
    if(m_Wf_nameIsSet)
    {
        val[utility::conversions::to_string_t("wf_name")] = ModelBase::toJson(m_Wf_name);
    }
    if(m_Argo_hostIsSet)
    {
        val[utility::conversions::to_string_t("argo_host")] = ModelBase::toJson(m_Argo_host);
    }
    if(m_Argo_tokenIsSet)
    {
        val[utility::conversions::to_string_t("argo_token")] = ModelBase::toJson(m_Argo_token);
    }
    if(m_User_idIsSet)
    {
        val[utility::conversions::to_string_t("user_id")] = ModelBase::toJson(m_User_id);
    }
    if(m_Organisation_idIsSet)
    {
        val[utility::conversions::to_string_t("organisation_id")] = ModelBase::toJson(m_Organisation_id);
    }

    return val;
}

void Cluster::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("created")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("created")];
        if(!fieldValue.is_null())
        {
            setCreated(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updated")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("updated")];
        if(!fieldValue.is_null())
        {
            setUpdated(ModelBase::dateFromJson(fieldValue));
        }
    }
    setRemoteAddress(ModelBase::stringFromJson(val[utility::conversions::to_string_t("remote_address")]));
    setAuthToken(ModelBase::stringFromJson(val[utility::conversions::to_string_t("auth_token")]));
    setDockerUsername(ModelBase::stringFromJson(val[utility::conversions::to_string_t("docker_username")]));
    if(val.has_field(utility::conversions::to_string_t("docker_registry")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("docker_registry")];
        if(!fieldValue.is_null())
        {
            setDockerRegistry(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("namespace")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("namespace")];
        if(!fieldValue.is_null())
        {
            setNamespace(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("storage_class")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("storage_class")];
        if(!fieldValue.is_null())
        {
            setStorageClass(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("status")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("status")];
        if(!fieldValue.is_null())
        {
            setStatus(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wf_name")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("wf_name")];
        if(!fieldValue.is_null())
        {
            setWfName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("argo_host")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("argo_host")];
        if(!fieldValue.is_null())
        {
            setArgoHost(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("argo_token")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("argo_token")];
        if(!fieldValue.is_null())
        {
            setArgoToken(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("user_id")];
        if(!fieldValue.is_null())
        {
            setUserId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("organisation_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("organisation_id")];
        if(!fieldValue.is_null())
        {
            setOrganisationId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void Cluster::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_CreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created"), m_Created));
        
    }
    if(m_UpdatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updated"), m_Updated));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("remote_address"), m_Remote_address));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("auth_token"), m_Auth_token));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("docker_username"), m_Docker_username));
    if(m_Docker_registryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("docker_registry"), m_Docker_registry));
        
    }
    if(m__namespaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("namespace"), m__namespace));
        
    }
    if(m_Storage_classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("storage_class"), m_Storage_class));
        
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_Status));
    }
    if(m_Wf_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wf_name"), m_Wf_name));
        
    }
    if(m_Argo_hostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("argo_host"), m_Argo_host));
        
    }
    if(m_Argo_tokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("argo_token"), m_Argo_token));
        
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("user_id"), m_User_id));
    }
    if(m_Organisation_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("organisation_id"), m_Organisation_id));
    }
}

void Cluster::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("created")))
    {
        setCreated(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("created"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("updated")))
    {
        setUpdated(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("updated"))));
    }
    setRemoteAddress(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("remote_address"))));
    setAuthToken(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("auth_token"))));
    setDockerUsername(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("docker_username"))));
    if(multipart->hasContent(utility::conversions::to_string_t("docker_registry")))
    {
        setDockerRegistry(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("docker_registry"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("namespace")))
    {
        setNamespace(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("namespace"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("storage_class")))
    {
        setStorageClass(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("storage_class"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("status")))
    {
        setStatus(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("status"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wf_name")))
    {
        setWfName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("wf_name"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("argo_host")))
    {
        setArgoHost(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("argo_host"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("argo_token")))
    {
        setArgoToken(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("argo_token"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user_id")))
    {
        setUserId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("user_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("organisation_id")))
    {
        setOrganisationId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("organisation_id"))));
    }
}

int32_t Cluster::getId() const
{
    return m_Id;
}


void Cluster::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Cluster::idIsSet() const
{
    return m_IdIsSet;
}

void Cluster::unsetId()
{
    m_IdIsSet = false;
}

utility::datetime Cluster::getCreated() const
{
    return m_Created;
}


void Cluster::setCreated(utility::datetime value)
{
    m_Created = value;
    m_CreatedIsSet = true;
}
bool Cluster::createdIsSet() const
{
    return m_CreatedIsSet;
}

void Cluster::unsetCreated()
{
    m_CreatedIsSet = false;
}

utility::datetime Cluster::getUpdated() const
{
    return m_Updated;
}


void Cluster::setUpdated(utility::datetime value)
{
    m_Updated = value;
    m_UpdatedIsSet = true;
}
bool Cluster::updatedIsSet() const
{
    return m_UpdatedIsSet;
}

void Cluster::unsetUpdated()
{
    m_UpdatedIsSet = false;
}

utility::string_t Cluster::getRemoteAddress() const
{
    return m_Remote_address;
}


void Cluster::setRemoteAddress(utility::string_t value)
{
    m_Remote_address = value;
    
}
utility::string_t Cluster::getAuthToken() const
{
    return m_Auth_token;
}


void Cluster::setAuthToken(utility::string_t value)
{
    m_Auth_token = value;
    
}
utility::string_t Cluster::getDockerUsername() const
{
    return m_Docker_username;
}


void Cluster::setDockerUsername(utility::string_t value)
{
    m_Docker_username = value;
    
}
utility::string_t Cluster::getDockerRegistry() const
{
    return m_Docker_registry;
}


void Cluster::setDockerRegistry(utility::string_t value)
{
    m_Docker_registry = value;
    m_Docker_registryIsSet = true;
}
bool Cluster::dockerRegistryIsSet() const
{
    return m_Docker_registryIsSet;
}

void Cluster::unsetDocker_registry()
{
    m_Docker_registryIsSet = false;
}

utility::string_t Cluster::getNamespace() const
{
    return m__namespace;
}


void Cluster::setNamespace(utility::string_t value)
{
    m__namespace = value;
    m__namespaceIsSet = true;
}
bool Cluster::namespaceIsSet() const
{
    return m__namespaceIsSet;
}

void Cluster::unset_namespace()
{
    m__namespaceIsSet = false;
}

utility::string_t Cluster::getStorageClass() const
{
    return m_Storage_class;
}


void Cluster::setStorageClass(utility::string_t value)
{
    m_Storage_class = value;
    m_Storage_classIsSet = true;
}
bool Cluster::storageClassIsSet() const
{
    return m_Storage_classIsSet;
}

void Cluster::unsetStorage_class()
{
    m_Storage_classIsSet = false;
}

bool Cluster::isStatus() const
{
    return m_Status;
}


void Cluster::setStatus(bool value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool Cluster::statusIsSet() const
{
    return m_StatusIsSet;
}

void Cluster::unsetStatus()
{
    m_StatusIsSet = false;
}

utility::string_t Cluster::getWfName() const
{
    return m_Wf_name;
}


void Cluster::setWfName(utility::string_t value)
{
    m_Wf_name = value;
    m_Wf_nameIsSet = true;
}
bool Cluster::wfNameIsSet() const
{
    return m_Wf_nameIsSet;
}

void Cluster::unsetWf_name()
{
    m_Wf_nameIsSet = false;
}

utility::string_t Cluster::getArgoHost() const
{
    return m_Argo_host;
}


void Cluster::setArgoHost(utility::string_t value)
{
    m_Argo_host = value;
    m_Argo_hostIsSet = true;
}
bool Cluster::argoHostIsSet() const
{
    return m_Argo_hostIsSet;
}

void Cluster::unsetArgo_host()
{
    m_Argo_hostIsSet = false;
}

utility::string_t Cluster::getArgoToken() const
{
    return m_Argo_token;
}


void Cluster::setArgoToken(utility::string_t value)
{
    m_Argo_token = value;
    m_Argo_tokenIsSet = true;
}
bool Cluster::argoTokenIsSet() const
{
    return m_Argo_tokenIsSet;
}

void Cluster::unsetArgo_token()
{
    m_Argo_tokenIsSet = false;
}

int32_t Cluster::getUserId() const
{
    return m_User_id;
}


void Cluster::setUserId(int32_t value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}
bool Cluster::userIdIsSet() const
{
    return m_User_idIsSet;
}

void Cluster::unsetUser_id()
{
    m_User_idIsSet = false;
}

int32_t Cluster::getOrganisationId() const
{
    return m_Organisation_id;
}


void Cluster::setOrganisationId(int32_t value)
{
    m_Organisation_id = value;
    m_Organisation_idIsSet = true;
}
bool Cluster::organisationIdIsSet() const
{
    return m_Organisation_idIsSet;
}

void Cluster::unsetOrganisation_id()
{
    m_Organisation_idIsSet = false;
}

}
}
}
}

