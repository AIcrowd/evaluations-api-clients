/**
 * AIcrowd Evaluations API
 * API to create and evaluate custom challenges on AIcrowd!
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.13.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "GenericFeedback.h"

namespace com {
namespace aicrowd {
namespace evaluations {
namespace models {

GenericFeedback::GenericFeedback()
{
    m_Status = false;
    m_MetaIsSet = false;
}

GenericFeedback::~GenericFeedback()
{
}

void GenericFeedback::validate()
{
    // TODO: implement validation
}

web::json::value GenericFeedback::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    if(m_MetaIsSet)
    {
        val[utility::conversions::to_string_t("meta")] = ModelBase::toJson(m_Meta);
    }

    return val;
}

void GenericFeedback::fromJson(web::json::value& val)
{
    setStatus(ModelBase::boolFromJson(val[utility::conversions::to_string_t("status")]));
    if(val.has_field(utility::conversions::to_string_t("meta")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("meta")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(fieldValue);
            setMeta( newItem );
        }
    }
}

void GenericFeedback::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_Status));
    if(m_MetaIsSet)
    {
        if (m_Meta.get())
        {
            m_Meta->toMultipart(multipart, utility::conversions::to_string_t("meta."));
        }
        
    }
}

void GenericFeedback::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setStatus(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("status"))));
    if(multipart->hasContent(utility::conversions::to_string_t("meta")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("meta")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("meta."));
            setMeta( newItem );
        }
    }
}

bool GenericFeedback::isStatus() const
{
    return m_Status;
}


void GenericFeedback::setStatus(bool value)
{
    m_Status = value;
    
}
std::shared_ptr<Object> GenericFeedback::getMeta() const
{
    return m_Meta;
}


void GenericFeedback::setMeta(std::shared_ptr<Object> value)
{
    m_Meta = value;
    m_MetaIsSet = true;
}
bool GenericFeedback::metaIsSet() const
{
    return m_MetaIsSet;
}

void GenericFeedback::unsetMeta()
{
    m_MetaIsSet = false;
}

}
}
}
}

