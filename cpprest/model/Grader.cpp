/**
 * Evaluations API
 * API to create and evaluate custom challenges
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.12.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Grader.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Grader::Grader()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Created = utility::datetime();
    m_CreatedIsSet = false;
    m_Updated = utility::datetime();
    m_UpdatedIsSet = false;
    m_Dataset_url = utility::conversions::to_string_t("");
    m_Dataset_urlIsSet = false;
    m_Code_access_mode = utility::conversions::to_string_t("");
    m_Cluster_id = 0;
    m_Cluster_idIsSet = false;
    m_Docker_username = utility::conversions::to_string_t("");
    m_Docker_password = utility::conversions::to_string_t("");
    m_Docker_registry = utility::conversions::to_string_t("");
    m_Docker_registryIsSet = false;
    m_Workflow_specIsSet = false;
    m_Evaluation_code = utility::conversions::to_string_t("");
    m_Storage_capacity = utility::conversions::to_string_t("");
    m_Storage_capacityIsSet = false;
    m_LogsIsSet = false;
    m_MetaIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_User_id = 0;
    m_User_idIsSet = false;
    m_Organisation_id = 0;
    m_Organisation_idIsSet = false;
}

Grader::~Grader()
{
}

void Grader::validate()
{
    // TODO: implement validation
}

web::json::value Grader::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_CreatedIsSet)
    {
        val[utility::conversions::to_string_t("created")] = ModelBase::toJson(m_Created);
    }
    if(m_UpdatedIsSet)
    {
        val[utility::conversions::to_string_t("updated")] = ModelBase::toJson(m_Updated);
    }
    if(m_Dataset_urlIsSet)
    {
        val[utility::conversions::to_string_t("dataset_url")] = ModelBase::toJson(m_Dataset_url);
    }
    val[utility::conversions::to_string_t("code_access_mode")] = ModelBase::toJson(m_Code_access_mode);
    if(m_Cluster_idIsSet)
    {
        val[utility::conversions::to_string_t("cluster_id")] = ModelBase::toJson(m_Cluster_id);
    }
    val[utility::conversions::to_string_t("docker_username")] = ModelBase::toJson(m_Docker_username);
    val[utility::conversions::to_string_t("docker_password")] = ModelBase::toJson(m_Docker_password);
    if(m_Docker_registryIsSet)
    {
        val[utility::conversions::to_string_t("docker_registry")] = ModelBase::toJson(m_Docker_registry);
    }
    if(m_Workflow_specIsSet)
    {
        val[utility::conversions::to_string_t("workflow_spec")] = ModelBase::toJson(m_Workflow_spec);
    }
    val[utility::conversions::to_string_t("evaluation_code")] = ModelBase::toJson(m_Evaluation_code);
    if(m_Storage_capacityIsSet)
    {
        val[utility::conversions::to_string_t("storage_capacity")] = ModelBase::toJson(m_Storage_capacity);
    }
    if(m_LogsIsSet)
    {
        val[utility::conversions::to_string_t("logs")] = ModelBase::toJson(m_Logs);
    }
    if(m_MetaIsSet)
    {
        val[utility::conversions::to_string_t("meta")] = ModelBase::toJson(m_Meta);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    }
    if(m_User_idIsSet)
    {
        val[utility::conversions::to_string_t("user_id")] = ModelBase::toJson(m_User_id);
    }
    if(m_Organisation_idIsSet)
    {
        val[utility::conversions::to_string_t("organisation_id")] = ModelBase::toJson(m_Organisation_id);
    }

    return val;
}

void Grader::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("created")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("created")];
        if(!fieldValue.is_null())
        {
            setCreated(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updated")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("updated")];
        if(!fieldValue.is_null())
        {
            setUpdated(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dataset_url")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("dataset_url")];
        if(!fieldValue.is_null())
        {
            setDatasetUrl(ModelBase::stringFromJson(fieldValue));
        }
    }
    setCodeAccessMode(ModelBase::stringFromJson(val[utility::conversions::to_string_t("code_access_mode")]));
    if(val.has_field(utility::conversions::to_string_t("cluster_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("cluster_id")];
        if(!fieldValue.is_null())
        {
            setClusterId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    setDockerUsername(ModelBase::stringFromJson(val[utility::conversions::to_string_t("docker_username")]));
    setDockerPassword(ModelBase::stringFromJson(val[utility::conversions::to_string_t("docker_password")]));
    if(val.has_field(utility::conversions::to_string_t("docker_registry")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("docker_registry")];
        if(!fieldValue.is_null())
        {
            setDockerRegistry(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("workflow_spec")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("workflow_spec")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(fieldValue);
            setWorkflowSpec( newItem );
        }
    }
    setEvaluationCode(ModelBase::stringFromJson(val[utility::conversions::to_string_t("evaluation_code")]));
    if(val.has_field(utility::conversions::to_string_t("storage_capacity")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("storage_capacity")];
        if(!fieldValue.is_null())
        {
            setStorageCapacity(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("logs")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("logs")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(fieldValue);
            setLogs( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("meta")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("meta")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(fieldValue);
            setMeta( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("status")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("status")];
        if(!fieldValue.is_null())
        {
            setStatus(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("user_id")];
        if(!fieldValue.is_null())
        {
            setUserId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("organisation_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("organisation_id")];
        if(!fieldValue.is_null())
        {
            setOrganisationId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void Grader::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_CreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created"), m_Created));
        
    }
    if(m_UpdatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updated"), m_Updated));
        
    }
    if(m_Dataset_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dataset_url"), m_Dataset_url));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("code_access_mode"), m_Code_access_mode));
    if(m_Cluster_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cluster_id"), m_Cluster_id));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("docker_username"), m_Docker_username));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("docker_password"), m_Docker_password));
    if(m_Docker_registryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("docker_registry"), m_Docker_registry));
        
    }
    if(m_Workflow_specIsSet)
    {
        if (m_Workflow_spec.get())
        {
            m_Workflow_spec->toMultipart(multipart, utility::conversions::to_string_t("workflow_spec."));
        }
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("evaluation_code"), m_Evaluation_code));
    if(m_Storage_capacityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("storage_capacity"), m_Storage_capacity));
        
    }
    if(m_LogsIsSet)
    {
        if (m_Logs.get())
        {
            m_Logs->toMultipart(multipart, utility::conversions::to_string_t("logs."));
        }
        
    }
    if(m_MetaIsSet)
    {
        if (m_Meta.get())
        {
            m_Meta->toMultipart(multipart, utility::conversions::to_string_t("meta."));
        }
        
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_Status));
        
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("user_id"), m_User_id));
    }
    if(m_Organisation_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("organisation_id"), m_Organisation_id));
    }
}

void Grader::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("created")))
    {
        setCreated(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("created"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("updated")))
    {
        setUpdated(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("updated"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dataset_url")))
    {
        setDatasetUrl(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("dataset_url"))));
    }
    setCodeAccessMode(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("code_access_mode"))));
    if(multipart->hasContent(utility::conversions::to_string_t("cluster_id")))
    {
        setClusterId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("cluster_id"))));
    }
    setDockerUsername(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("docker_username"))));
    setDockerPassword(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("docker_password"))));
    if(multipart->hasContent(utility::conversions::to_string_t("docker_registry")))
    {
        setDockerRegistry(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("docker_registry"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("workflow_spec")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("workflow_spec")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("workflow_spec."));
            setWorkflowSpec( newItem );
        }
    }
    setEvaluationCode(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("evaluation_code"))));
    if(multipart->hasContent(utility::conversions::to_string_t("storage_capacity")))
    {
        setStorageCapacity(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("storage_capacity"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("logs")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("logs")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("logs."));
            setLogs( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("meta")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("meta")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("meta."));
            setMeta( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("status")))
    {
        setStatus(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("status"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user_id")))
    {
        setUserId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("user_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("organisation_id")))
    {
        setOrganisationId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("organisation_id"))));
    }
}

int32_t Grader::getId() const
{
    return m_Id;
}


void Grader::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Grader::idIsSet() const
{
    return m_IdIsSet;
}

void Grader::unsetId()
{
    m_IdIsSet = false;
}

utility::datetime Grader::getCreated() const
{
    return m_Created;
}


void Grader::setCreated(utility::datetime value)
{
    m_Created = value;
    m_CreatedIsSet = true;
}
bool Grader::createdIsSet() const
{
    return m_CreatedIsSet;
}

void Grader::unsetCreated()
{
    m_CreatedIsSet = false;
}

utility::datetime Grader::getUpdated() const
{
    return m_Updated;
}


void Grader::setUpdated(utility::datetime value)
{
    m_Updated = value;
    m_UpdatedIsSet = true;
}
bool Grader::updatedIsSet() const
{
    return m_UpdatedIsSet;
}

void Grader::unsetUpdated()
{
    m_UpdatedIsSet = false;
}

utility::string_t Grader::getDatasetUrl() const
{
    return m_Dataset_url;
}


void Grader::setDatasetUrl(utility::string_t value)
{
    m_Dataset_url = value;
    m_Dataset_urlIsSet = true;
}
bool Grader::datasetUrlIsSet() const
{
    return m_Dataset_urlIsSet;
}

void Grader::unsetDataset_url()
{
    m_Dataset_urlIsSet = false;
}

utility::string_t Grader::getCodeAccessMode() const
{
    return m_Code_access_mode;
}


void Grader::setCodeAccessMode(utility::string_t value)
{
    m_Code_access_mode = value;
    
}
int32_t Grader::getClusterId() const
{
    return m_Cluster_id;
}


void Grader::setClusterId(int32_t value)
{
    m_Cluster_id = value;
    m_Cluster_idIsSet = true;
}
bool Grader::clusterIdIsSet() const
{
    return m_Cluster_idIsSet;
}

void Grader::unsetCluster_id()
{
    m_Cluster_idIsSet = false;
}

utility::string_t Grader::getDockerUsername() const
{
    return m_Docker_username;
}


void Grader::setDockerUsername(utility::string_t value)
{
    m_Docker_username = value;
    
}
utility::string_t Grader::getDockerPassword() const
{
    return m_Docker_password;
}


void Grader::setDockerPassword(utility::string_t value)
{
    m_Docker_password = value;
    
}
utility::string_t Grader::getDockerRegistry() const
{
    return m_Docker_registry;
}


void Grader::setDockerRegistry(utility::string_t value)
{
    m_Docker_registry = value;
    m_Docker_registryIsSet = true;
}
bool Grader::dockerRegistryIsSet() const
{
    return m_Docker_registryIsSet;
}

void Grader::unsetDocker_registry()
{
    m_Docker_registryIsSet = false;
}

std::shared_ptr<Object> Grader::getWorkflowSpec() const
{
    return m_Workflow_spec;
}


void Grader::setWorkflowSpec(std::shared_ptr<Object> value)
{
    m_Workflow_spec = value;
    m_Workflow_specIsSet = true;
}
bool Grader::workflowSpecIsSet() const
{
    return m_Workflow_specIsSet;
}

void Grader::unsetWorkflow_spec()
{
    m_Workflow_specIsSet = false;
}

utility::string_t Grader::getEvaluationCode() const
{
    return m_Evaluation_code;
}


void Grader::setEvaluationCode(utility::string_t value)
{
    m_Evaluation_code = value;
    
}
utility::string_t Grader::getStorageCapacity() const
{
    return m_Storage_capacity;
}


void Grader::setStorageCapacity(utility::string_t value)
{
    m_Storage_capacity = value;
    m_Storage_capacityIsSet = true;
}
bool Grader::storageCapacityIsSet() const
{
    return m_Storage_capacityIsSet;
}

void Grader::unsetStorage_capacity()
{
    m_Storage_capacityIsSet = false;
}

std::shared_ptr<Object> Grader::getLogs() const
{
    return m_Logs;
}


void Grader::setLogs(std::shared_ptr<Object> value)
{
    m_Logs = value;
    m_LogsIsSet = true;
}
bool Grader::logsIsSet() const
{
    return m_LogsIsSet;
}

void Grader::unsetLogs()
{
    m_LogsIsSet = false;
}

std::shared_ptr<Object> Grader::getMeta() const
{
    return m_Meta;
}


void Grader::setMeta(std::shared_ptr<Object> value)
{
    m_Meta = value;
    m_MetaIsSet = true;
}
bool Grader::metaIsSet() const
{
    return m_MetaIsSet;
}

void Grader::unsetMeta()
{
    m_MetaIsSet = false;
}

utility::string_t Grader::getStatus() const
{
    return m_Status;
}


void Grader::setStatus(utility::string_t value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool Grader::statusIsSet() const
{
    return m_StatusIsSet;
}

void Grader::unsetStatus()
{
    m_StatusIsSet = false;
}

int32_t Grader::getUserId() const
{
    return m_User_id;
}


void Grader::setUserId(int32_t value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}
bool Grader::userIdIsSet() const
{
    return m_User_idIsSet;
}

void Grader::unsetUser_id()
{
    m_User_idIsSet = false;
}

int32_t Grader::getOrganisationId() const
{
    return m_Organisation_id;
}


void Grader::setOrganisationId(int32_t value)
{
    m_Organisation_id = value;
    m_Organisation_idIsSet = true;
}
bool Grader::organisationIdIsSet() const
{
    return m_Organisation_idIsSet;
}

void Grader::unsetOrganisation_id()
{
    m_Organisation_idIsSet = false;
}

}
}
}
}

