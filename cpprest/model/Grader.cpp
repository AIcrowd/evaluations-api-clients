/**
 * AIcrowd Evaluations API
 * API to create and evaluate custom challenges on AIcrowd!
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.21.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Grader.h"

namespace com {
namespace aicrowd {
namespace evaluations {
namespace models {

Grader::Grader()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Created = utility::datetime();
    m_CreatedIsSet = false;
    m_Updated = utility::datetime();
    m_UpdatedIsSet = false;
    m_Archived = false;
    m_ArchivedIsSet = false;
    m_DatasetIsSet = false;
    m_Cluster_id = 0;
    m_Cluster_idIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Workflow_specIsSet = false;
    m_Evaluator_repo = utility::conversions::to_string_t("");
    m_Evaluator_repo_tag = utility::conversions::to_string_t("");
    m_Evaluator_repo_tagIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Notifications = utility::conversions::to_string_t("");
    m_NotificationsIsSet = false;
    m_Logs = utility::conversions::to_string_t("");
    m_LogsIsSet = false;
    m_Meta = utility::conversions::to_string_t("");
    m_MetaIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_SecretsIsSet = false;
    m_Wf_name = utility::conversions::to_string_t("");
    m_Wf_nameIsSet = false;
    m_Allowed_extensionsIsSet = false;
    m_Workflow_priority = 0;
    m_Workflow_priorityIsSet = false;
    m_Config_path = utility::conversions::to_string_t("");
    m_Config_pathIsSet = false;
    m_User_id = 0;
    m_User_idIsSet = false;
    m_Organisation_id = 0;
    m_Organisation_idIsSet = false;
}

Grader::~Grader()
{
}

void Grader::validate()
{
    // TODO: implement validation
}

web::json::value Grader::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_CreatedIsSet)
    {
        val[utility::conversions::to_string_t("created")] = ModelBase::toJson(m_Created);
    }
    if(m_UpdatedIsSet)
    {
        val[utility::conversions::to_string_t("updated")] = ModelBase::toJson(m_Updated);
    }
    if(m_ArchivedIsSet)
    {
        val[utility::conversions::to_string_t("archived")] = ModelBase::toJson(m_Archived);
    }
    if(m_DatasetIsSet)
    {
        val[utility::conversions::to_string_t("dataset")] = ModelBase::toJson(m_Dataset);
    }
    if(m_Cluster_idIsSet)
    {
        val[utility::conversions::to_string_t("cluster_id")] = ModelBase::toJson(m_Cluster_id);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_Workflow_specIsSet)
    {
        val[utility::conversions::to_string_t("workflow_spec")] = ModelBase::toJson(m_Workflow_spec);
    }
    val[utility::conversions::to_string_t("evaluator_repo")] = ModelBase::toJson(m_Evaluator_repo);
    if(m_Evaluator_repo_tagIsSet)
    {
        val[utility::conversions::to_string_t("evaluator_repo_tag")] = ModelBase::toJson(m_Evaluator_repo_tag);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_NotificationsIsSet)
    {
        val[utility::conversions::to_string_t("notifications")] = ModelBase::toJson(m_Notifications);
    }
    if(m_LogsIsSet)
    {
        val[utility::conversions::to_string_t("logs")] = ModelBase::toJson(m_Logs);
    }
    if(m_MetaIsSet)
    {
        val[utility::conversions::to_string_t("meta")] = ModelBase::toJson(m_Meta);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    }
    if(m_SecretsIsSet)
    {
        val[utility::conversions::to_string_t("secrets")] = ModelBase::toJson(m_Secrets);
    }
    if(m_Wf_nameIsSet)
    {
        val[utility::conversions::to_string_t("wf_name")] = ModelBase::toJson(m_Wf_name);
    }
    if(m_Allowed_extensionsIsSet)
    {
        val[utility::conversions::to_string_t("allowed_extensions")] = ModelBase::toJson(m_Allowed_extensions);
    }
    if(m_Workflow_priorityIsSet)
    {
        val[utility::conversions::to_string_t("workflow_priority")] = ModelBase::toJson(m_Workflow_priority);
    }
    if(m_Config_pathIsSet)
    {
        val[utility::conversions::to_string_t("config_path")] = ModelBase::toJson(m_Config_path);
    }
    if(m_User_idIsSet)
    {
        val[utility::conversions::to_string_t("user_id")] = ModelBase::toJson(m_User_id);
    }
    if(m_Organisation_idIsSet)
    {
        val[utility::conversions::to_string_t("organisation_id")] = ModelBase::toJson(m_Organisation_id);
    }

    return val;
}

void Grader::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("created")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("created")];
        if(!fieldValue.is_null())
        {
            setCreated(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updated")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("updated")];
        if(!fieldValue.is_null())
        {
            setUpdated(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("archived")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("archived")];
        if(!fieldValue.is_null())
        {
            setArchived(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dataset")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("dataset")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(fieldValue);
            setDataset( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cluster_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("cluster_id")];
        if(!fieldValue.is_null())
        {
            setClusterId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("description")];
        if(!fieldValue.is_null())
        {
            setDescription(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("workflow_spec")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("workflow_spec")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(fieldValue);
            setWorkflowSpec( newItem );
        }
    }
    setEvaluatorRepo(ModelBase::stringFromJson(val[utility::conversions::to_string_t("evaluator_repo")]));
    if(val.has_field(utility::conversions::to_string_t("evaluator_repo_tag")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("evaluator_repo_tag")];
        if(!fieldValue.is_null())
        {
            setEvaluatorRepoTag(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("name")];
        if(!fieldValue.is_null())
        {
            setName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("notifications")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("notifications")];
        if(!fieldValue.is_null())
        {
            setNotifications(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("logs")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("logs")];
        if(!fieldValue.is_null())
        {
            setLogs(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("meta")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("meta")];
        if(!fieldValue.is_null())
        {
            setMeta(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("status")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("status")];
        if(!fieldValue.is_null())
        {
            setStatus(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("secrets")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("secrets")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(fieldValue);
            setSecrets( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wf_name")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("wf_name")];
        if(!fieldValue.is_null())
        {
            setWfName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("allowed_extensions")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("allowed_extensions")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(fieldValue);
            setAllowedExtensions( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("workflow_priority")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("workflow_priority")];
        if(!fieldValue.is_null())
        {
            setWorkflowPriority(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("config_path")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("config_path")];
        if(!fieldValue.is_null())
        {
            setConfigPath(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("user_id")];
        if(!fieldValue.is_null())
        {
            setUserId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("organisation_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("organisation_id")];
        if(!fieldValue.is_null())
        {
            setOrganisationId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void Grader::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_CreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created"), m_Created));
        
    }
    if(m_UpdatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updated"), m_Updated));
        
    }
    if(m_ArchivedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("archived"), m_Archived));
    }
    if(m_DatasetIsSet)
    {
        if (m_Dataset.get())
        {
            m_Dataset->toMultipart(multipart, utility::conversions::to_string_t("dataset."));
        }
        
    }
    if(m_Cluster_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cluster_id"), m_Cluster_id));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
        
    }
    if(m_Workflow_specIsSet)
    {
        if (m_Workflow_spec.get())
        {
            m_Workflow_spec->toMultipart(multipart, utility::conversions::to_string_t("workflow_spec."));
        }
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("evaluator_repo"), m_Evaluator_repo));
    if(m_Evaluator_repo_tagIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("evaluator_repo_tag"), m_Evaluator_repo_tag));
        
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
        
    }
    if(m_NotificationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("notifications"), m_Notifications));
        
    }
    if(m_LogsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("logs"), m_Logs));
        
    }
    if(m_MetaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("meta"), m_Meta));
        
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_Status));
        
    }
    if(m_SecretsIsSet)
    {
        if (m_Secrets.get())
        {
            m_Secrets->toMultipart(multipart, utility::conversions::to_string_t("secrets."));
        }
        
    }
    if(m_Wf_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wf_name"), m_Wf_name));
        
    }
    if(m_Allowed_extensionsIsSet)
    {
        if (m_Allowed_extensions.get())
        {
            m_Allowed_extensions->toMultipart(multipart, utility::conversions::to_string_t("allowed_extensions."));
        }
        
    }
    if(m_Workflow_priorityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("workflow_priority"), m_Workflow_priority));
    }
    if(m_Config_pathIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("config_path"), m_Config_path));
        
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("user_id"), m_User_id));
    }
    if(m_Organisation_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("organisation_id"), m_Organisation_id));
    }
}

void Grader::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("created")))
    {
        setCreated(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("created"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("updated")))
    {
        setUpdated(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("updated"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("archived")))
    {
        setArchived(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("archived"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dataset")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("dataset")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("dataset."));
            setDataset( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cluster_id")))
    {
        setClusterId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("cluster_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("description"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("workflow_spec")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("workflow_spec")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("workflow_spec."));
            setWorkflowSpec( newItem );
        }
    }
    setEvaluatorRepo(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("evaluator_repo"))));
    if(multipart->hasContent(utility::conversions::to_string_t("evaluator_repo_tag")))
    {
        setEvaluatorRepoTag(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("evaluator_repo_tag"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("notifications")))
    {
        setNotifications(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("notifications"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("logs")))
    {
        setLogs(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("logs"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("meta")))
    {
        setMeta(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("meta"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("status")))
    {
        setStatus(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("status"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("secrets")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("secrets")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("secrets."));
            setSecrets( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wf_name")))
    {
        setWfName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("wf_name"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("allowed_extensions")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("allowed_extensions")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("allowed_extensions."));
            setAllowedExtensions( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("workflow_priority")))
    {
        setWorkflowPriority(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("workflow_priority"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("config_path")))
    {
        setConfigPath(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("config_path"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user_id")))
    {
        setUserId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("user_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("organisation_id")))
    {
        setOrganisationId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("organisation_id"))));
    }
}

int32_t Grader::getId() const
{
    return m_Id;
}


void Grader::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Grader::idIsSet() const
{
    return m_IdIsSet;
}

void Grader::unsetId()
{
    m_IdIsSet = false;
}

utility::datetime Grader::getCreated() const
{
    return m_Created;
}


void Grader::setCreated(utility::datetime value)
{
    m_Created = value;
    m_CreatedIsSet = true;
}
bool Grader::createdIsSet() const
{
    return m_CreatedIsSet;
}

void Grader::unsetCreated()
{
    m_CreatedIsSet = false;
}

utility::datetime Grader::getUpdated() const
{
    return m_Updated;
}


void Grader::setUpdated(utility::datetime value)
{
    m_Updated = value;
    m_UpdatedIsSet = true;
}
bool Grader::updatedIsSet() const
{
    return m_UpdatedIsSet;
}

void Grader::unsetUpdated()
{
    m_UpdatedIsSet = false;
}

bool Grader::isArchived() const
{
    return m_Archived;
}


void Grader::setArchived(bool value)
{
    m_Archived = value;
    m_ArchivedIsSet = true;
}
bool Grader::archivedIsSet() const
{
    return m_ArchivedIsSet;
}

void Grader::unsetArchived()
{
    m_ArchivedIsSet = false;
}

std::shared_ptr<Object> Grader::getDataset() const
{
    return m_Dataset;
}


void Grader::setDataset(std::shared_ptr<Object> value)
{
    m_Dataset = value;
    m_DatasetIsSet = true;
}
bool Grader::datasetIsSet() const
{
    return m_DatasetIsSet;
}

void Grader::unsetDataset()
{
    m_DatasetIsSet = false;
}

int32_t Grader::getClusterId() const
{
    return m_Cluster_id;
}


void Grader::setClusterId(int32_t value)
{
    m_Cluster_id = value;
    m_Cluster_idIsSet = true;
}
bool Grader::clusterIdIsSet() const
{
    return m_Cluster_idIsSet;
}

void Grader::unsetCluster_id()
{
    m_Cluster_idIsSet = false;
}

utility::string_t Grader::getDescription() const
{
    return m_Description;
}


void Grader::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool Grader::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void Grader::unsetDescription()
{
    m_DescriptionIsSet = false;
}

std::shared_ptr<Object> Grader::getWorkflowSpec() const
{
    return m_Workflow_spec;
}


void Grader::setWorkflowSpec(std::shared_ptr<Object> value)
{
    m_Workflow_spec = value;
    m_Workflow_specIsSet = true;
}
bool Grader::workflowSpecIsSet() const
{
    return m_Workflow_specIsSet;
}

void Grader::unsetWorkflow_spec()
{
    m_Workflow_specIsSet = false;
}

utility::string_t Grader::getEvaluatorRepo() const
{
    return m_Evaluator_repo;
}


void Grader::setEvaluatorRepo(utility::string_t value)
{
    m_Evaluator_repo = value;
    
}
utility::string_t Grader::getEvaluatorRepoTag() const
{
    return m_Evaluator_repo_tag;
}


void Grader::setEvaluatorRepoTag(utility::string_t value)
{
    m_Evaluator_repo_tag = value;
    m_Evaluator_repo_tagIsSet = true;
}
bool Grader::evaluatorRepoTagIsSet() const
{
    return m_Evaluator_repo_tagIsSet;
}

void Grader::unsetEvaluator_repo_tag()
{
    m_Evaluator_repo_tagIsSet = false;
}

utility::string_t Grader::getName() const
{
    return m_Name;
}


void Grader::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool Grader::nameIsSet() const
{
    return m_NameIsSet;
}

void Grader::unsetName()
{
    m_NameIsSet = false;
}

utility::string_t Grader::getNotifications() const
{
    return m_Notifications;
}


void Grader::setNotifications(utility::string_t value)
{
    m_Notifications = value;
    m_NotificationsIsSet = true;
}
bool Grader::notificationsIsSet() const
{
    return m_NotificationsIsSet;
}

void Grader::unsetNotifications()
{
    m_NotificationsIsSet = false;
}

utility::string_t Grader::getLogs() const
{
    return m_Logs;
}


void Grader::setLogs(utility::string_t value)
{
    m_Logs = value;
    m_LogsIsSet = true;
}
bool Grader::logsIsSet() const
{
    return m_LogsIsSet;
}

void Grader::unsetLogs()
{
    m_LogsIsSet = false;
}

utility::string_t Grader::getMeta() const
{
    return m_Meta;
}


void Grader::setMeta(utility::string_t value)
{
    m_Meta = value;
    m_MetaIsSet = true;
}
bool Grader::metaIsSet() const
{
    return m_MetaIsSet;
}

void Grader::unsetMeta()
{
    m_MetaIsSet = false;
}

utility::string_t Grader::getStatus() const
{
    return m_Status;
}


void Grader::setStatus(utility::string_t value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool Grader::statusIsSet() const
{
    return m_StatusIsSet;
}

void Grader::unsetStatus()
{
    m_StatusIsSet = false;
}

std::shared_ptr<Object> Grader::getSecrets() const
{
    return m_Secrets;
}


void Grader::setSecrets(std::shared_ptr<Object> value)
{
    m_Secrets = value;
    m_SecretsIsSet = true;
}
bool Grader::secretsIsSet() const
{
    return m_SecretsIsSet;
}

void Grader::unsetSecrets()
{
    m_SecretsIsSet = false;
}

utility::string_t Grader::getWfName() const
{
    return m_Wf_name;
}


void Grader::setWfName(utility::string_t value)
{
    m_Wf_name = value;
    m_Wf_nameIsSet = true;
}
bool Grader::wfNameIsSet() const
{
    return m_Wf_nameIsSet;
}

void Grader::unsetWf_name()
{
    m_Wf_nameIsSet = false;
}

std::shared_ptr<Object> Grader::getAllowedExtensions() const
{
    return m_Allowed_extensions;
}


void Grader::setAllowedExtensions(std::shared_ptr<Object> value)
{
    m_Allowed_extensions = value;
    m_Allowed_extensionsIsSet = true;
}
bool Grader::allowedExtensionsIsSet() const
{
    return m_Allowed_extensionsIsSet;
}

void Grader::unsetAllowed_extensions()
{
    m_Allowed_extensionsIsSet = false;
}

int32_t Grader::getWorkflowPriority() const
{
    return m_Workflow_priority;
}


void Grader::setWorkflowPriority(int32_t value)
{
    m_Workflow_priority = value;
    m_Workflow_priorityIsSet = true;
}
bool Grader::workflowPriorityIsSet() const
{
    return m_Workflow_priorityIsSet;
}

void Grader::unsetWorkflow_priority()
{
    m_Workflow_priorityIsSet = false;
}

utility::string_t Grader::getConfigPath() const
{
    return m_Config_path;
}


void Grader::setConfigPath(utility::string_t value)
{
    m_Config_path = value;
    m_Config_pathIsSet = true;
}
bool Grader::configPathIsSet() const
{
    return m_Config_pathIsSet;
}

void Grader::unsetConfig_path()
{
    m_Config_pathIsSet = false;
}

int32_t Grader::getUserId() const
{
    return m_User_id;
}


void Grader::setUserId(int32_t value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}
bool Grader::userIdIsSet() const
{
    return m_User_idIsSet;
}

void Grader::unsetUser_id()
{
    m_User_idIsSet = false;
}

int32_t Grader::getOrganisationId() const
{
    return m_Organisation_id;
}


void Grader::setOrganisationId(int32_t value)
{
    m_Organisation_id = value;
    m_Organisation_idIsSet = true;
}
bool Grader::organisationIdIsSet() const
{
    return m_Organisation_idIsSet;
}

void Grader::unsetOrganisation_id()
{
    m_Organisation_idIsSet = false;
}

}
}
}
}

