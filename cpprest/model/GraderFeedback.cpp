/**
 * Evaluations API
 * API to create and evaluate custom challenges
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.13.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "GraderFeedback.h"

namespace com {
namespace aicrowd {
namespace evaluations {
namespace models {

GraderFeedback::GraderFeedback()
{
    m_Status = false;
    m_Workflow_spec = utility::conversions::to_string_t("");
    m_Submission_types = utility::conversions::to_string_t("");
}

GraderFeedback::~GraderFeedback()
{
}

void GraderFeedback::validate()
{
    // TODO: implement validation
}

web::json::value GraderFeedback::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    val[utility::conversions::to_string_t("workflow_spec")] = ModelBase::toJson(m_Workflow_spec);
    val[utility::conversions::to_string_t("submission_types")] = ModelBase::toJson(m_Submission_types);

    return val;
}

void GraderFeedback::fromJson(web::json::value& val)
{
    setStatus(ModelBase::boolFromJson(val[utility::conversions::to_string_t("status")]));
    setWorkflowSpec(ModelBase::stringFromJson(val[utility::conversions::to_string_t("workflow_spec")]));
    setSubmissionTypes(ModelBase::stringFromJson(val[utility::conversions::to_string_t("submission_types")]));
}

void GraderFeedback::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_Status));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("workflow_spec"), m_Workflow_spec));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("submission_types"), m_Submission_types));
}

void GraderFeedback::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setStatus(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("status"))));
    setWorkflowSpec(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("workflow_spec"))));
    setSubmissionTypes(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("submission_types"))));
}

bool GraderFeedback::isStatus() const
{
    return m_Status;
}


void GraderFeedback::setStatus(bool value)
{
    m_Status = value;
    
}
utility::string_t GraderFeedback::getWorkflowSpec() const
{
    return m_Workflow_spec;
}


void GraderFeedback::setWorkflowSpec(utility::string_t value)
{
    m_Workflow_spec = value;
    
}
utility::string_t GraderFeedback::getSubmissionTypes() const
{
    return m_Submission_types;
}


void GraderFeedback::setSubmissionTypes(utility::string_t value)
{
    m_Submission_types = value;
    
}
}
}
}
}

