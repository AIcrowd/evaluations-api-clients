/**
 * AIcrowd Evaluations API
 * API to create and evaluate custom challenges on AIcrowd!
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Organisation.h"

namespace com {
namespace aicrowd {
namespace evaluations {
namespace models {

Organisation::Organisation()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_Poc_email = utility::conversions::to_string_t("");
    m_Created_on = utility::datetime();
    m_Created_onIsSet = false;
    m_Total_quota = 0;
    m_Total_quotaIsSet = false;
    m_Quota = 0;
    m_QuotaIsSet = false;
}

Organisation::~Organisation()
{
}

void Organisation::validate()
{
    // TODO: implement validation
}

web::json::value Organisation::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    val[utility::conversions::to_string_t("poc_email")] = ModelBase::toJson(m_Poc_email);
    if(m_Created_onIsSet)
    {
        val[utility::conversions::to_string_t("created_on")] = ModelBase::toJson(m_Created_on);
    }
    if(m_Total_quotaIsSet)
    {
        val[utility::conversions::to_string_t("total_quota")] = ModelBase::toJson(m_Total_quota);
    }
    if(m_QuotaIsSet)
    {
        val[utility::conversions::to_string_t("quota")] = ModelBase::toJson(m_Quota);
    }

    return val;
}

void Organisation::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    setName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("name")]));
    setPocEmail(ModelBase::stringFromJson(val[utility::conversions::to_string_t("poc_email")]));
    if(val.has_field(utility::conversions::to_string_t("created_on")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("created_on")];
        if(!fieldValue.is_null())
        {
            setCreatedOn(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("total_quota")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("total_quota")];
        if(!fieldValue.is_null())
        {
            setTotalQuota(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("quota")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("quota")];
        if(!fieldValue.is_null())
        {
            setQuota(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void Organisation::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("poc_email"), m_Poc_email));
    if(m_Created_onIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created_on"), m_Created_on));
        
    }
    if(m_Total_quotaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("total_quota"), m_Total_quota));
    }
    if(m_QuotaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("quota"), m_Quota));
    }
}

void Organisation::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    setPocEmail(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("poc_email"))));
    if(multipart->hasContent(utility::conversions::to_string_t("created_on")))
    {
        setCreatedOn(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("created_on"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("total_quota")))
    {
        setTotalQuota(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("total_quota"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("quota")))
    {
        setQuota(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("quota"))));
    }
}

int32_t Organisation::getId() const
{
    return m_Id;
}


void Organisation::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Organisation::idIsSet() const
{
    return m_IdIsSet;
}

void Organisation::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t Organisation::getName() const
{
    return m_Name;
}


void Organisation::setName(utility::string_t value)
{
    m_Name = value;
    
}
utility::string_t Organisation::getPocEmail() const
{
    return m_Poc_email;
}


void Organisation::setPocEmail(utility::string_t value)
{
    m_Poc_email = value;
    
}
utility::datetime Organisation::getCreatedOn() const
{
    return m_Created_on;
}


void Organisation::setCreatedOn(utility::datetime value)
{
    m_Created_on = value;
    m_Created_onIsSet = true;
}
bool Organisation::createdOnIsSet() const
{
    return m_Created_onIsSet;
}

void Organisation::unsetCreated_on()
{
    m_Created_onIsSet = false;
}

int32_t Organisation::getTotalQuota() const
{
    return m_Total_quota;
}


void Organisation::setTotalQuota(int32_t value)
{
    m_Total_quota = value;
    m_Total_quotaIsSet = true;
}
bool Organisation::totalQuotaIsSet() const
{
    return m_Total_quotaIsSet;
}

void Organisation::unsetTotal_quota()
{
    m_Total_quotaIsSet = false;
}

int32_t Organisation::getQuota() const
{
    return m_Quota;
}


void Organisation::setQuota(int32_t value)
{
    m_Quota = value;
    m_QuotaIsSet = true;
}
bool Organisation::quotaIsSet() const
{
    return m_QuotaIsSet;
}

void Organisation::unsetQuota()
{
    m_QuotaIsSet = false;
}

}
}
}
}

