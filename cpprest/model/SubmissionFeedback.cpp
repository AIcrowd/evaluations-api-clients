/**
 * Evaluations API
 * API to create and evaluate custom challenges
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.13.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SubmissionFeedback.h"

namespace com {
namespace aicrowd {
namespace evaluations {
namespace models {

SubmissionFeedback::SubmissionFeedback()
{
    m_Status = utility::conversions::to_string_t("");
    m_Outputs = utility::conversions::to_string_t("");
    m_Score = 0.0;
    m_Logs = utility::conversions::to_string_t("");
}

SubmissionFeedback::~SubmissionFeedback()
{
}

void SubmissionFeedback::validate()
{
    // TODO: implement validation
}

web::json::value SubmissionFeedback::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    val[utility::conversions::to_string_t("outputs")] = ModelBase::toJson(m_Outputs);
    val[utility::conversions::to_string_t("score")] = ModelBase::toJson(m_Score);
    val[utility::conversions::to_string_t("logs")] = ModelBase::toJson(m_Logs);

    return val;
}

void SubmissionFeedback::fromJson(web::json::value& val)
{
    setStatus(ModelBase::stringFromJson(val[utility::conversions::to_string_t("status")]));
    setOutputs(ModelBase::stringFromJson(val[utility::conversions::to_string_t("outputs")]));
    setScore(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("score")]));
    setLogs(ModelBase::stringFromJson(val[utility::conversions::to_string_t("logs")]));
}

void SubmissionFeedback::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_Status));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("outputs"), m_Outputs));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("score"), m_Score));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("logs"), m_Logs));
}

void SubmissionFeedback::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setStatus(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("status"))));
    setOutputs(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("outputs"))));
    setScore(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("score"))));
    setLogs(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("logs"))));
}

utility::string_t SubmissionFeedback::getStatus() const
{
    return m_Status;
}


void SubmissionFeedback::setStatus(utility::string_t value)
{
    m_Status = value;
    
}
utility::string_t SubmissionFeedback::getOutputs() const
{
    return m_Outputs;
}


void SubmissionFeedback::setOutputs(utility::string_t value)
{
    m_Outputs = value;
    
}
double SubmissionFeedback::getScore() const
{
    return m_Score;
}


void SubmissionFeedback::setScore(double value)
{
    m_Score = value;
    
}
utility::string_t SubmissionFeedback::getLogs() const
{
    return m_Logs;
}


void SubmissionFeedback::setLogs(utility::string_t value)
{
    m_Logs = value;
    
}
}
}
}
}

