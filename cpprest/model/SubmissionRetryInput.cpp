/**
 * AIcrowd Evaluations API
 * API to create and evaluate custom challenges on AIcrowd!
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.25.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SubmissionRetryInput.h"

namespace com {
namespace aicrowd {
namespace evaluations {
namespace models {

SubmissionRetryInput::SubmissionRetryInput()
{
    m_SubmissionsIsSet = false;
}

SubmissionRetryInput::~SubmissionRetryInput()
{
}

void SubmissionRetryInput::validate()
{
    // TODO: implement validation
}

web::json::value SubmissionRetryInput::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Submissions )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("submissions")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void SubmissionRetryInput::fromJson(web::json::value& val)
{
    {
        m_Submissions.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("submissions")))
        {
        for( auto& item : val[utility::conversions::to_string_t("submissions")].as_array() )
        {
            m_Submissions.push_back(ModelBase::int32_tFromJson(item));
        }
        }
    }
}

void SubmissionRetryInput::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Submissions )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("submissions"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
}

void SubmissionRetryInput::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        m_Submissions.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("submissions")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("submissions"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Submissions.push_back(ModelBase::int32_tFromJson(item));
        }
        }
    }
}

std::vector<int32_t>& SubmissionRetryInput::getSubmissions()
{
    return m_Submissions;
}

void SubmissionRetryInput::setSubmissions(std::vector<int32_t> value)
{
    m_Submissions = value;
    m_SubmissionsIsSet = true;
}
bool SubmissionRetryInput::submissionsIsSet() const
{
    return m_SubmissionsIsSet;
}

void SubmissionRetryInput::unsetSubmissions()
{
    m_SubmissionsIsSet = false;
}

}
}
}
}

