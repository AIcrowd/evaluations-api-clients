/**
 * AIcrowd Evaluations API
 * API to create and evaluate custom challenges on AIcrowd!
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.21.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Submissions.h"

namespace com {
namespace aicrowd {
namespace evaluations {
namespace models {

Submissions::Submissions()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Created = utility::datetime();
    m_CreatedIsSet = false;
    m_Updated = utility::datetime();
    m_UpdatedIsSet = false;
    m_Grader_id = 0;
    m_Submission_dataIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_Output = utility::conversions::to_string_t("");
    m_OutputIsSet = false;
    m_Additional_outputsIsSet = false;
    m_Logs = utility::conversions::to_string_t("");
    m_LogsIsSet = false;
    m_Started = utility::datetime();
    m_StartedIsSet = false;
    m_Ended = utility::datetime();
    m_EndedIsSet = false;
    m_Meta = utility::conversions::to_string_t("");
    m_MetaIsSet = false;
    m_Wf_name = utility::conversions::to_string_t("");
    m_Wf_nameIsSet = false;
    m_Workflow_priority = 0;
    m_Workflow_priorityIsSet = false;
    m_User_id = 0;
    m_User_idIsSet = false;
    m_Organisation_id = 0;
    m_Organisation_idIsSet = false;
}

Submissions::~Submissions()
{
}

void Submissions::validate()
{
    // TODO: implement validation
}

web::json::value Submissions::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_CreatedIsSet)
    {
        val[utility::conversions::to_string_t("created")] = ModelBase::toJson(m_Created);
    }
    if(m_UpdatedIsSet)
    {
        val[utility::conversions::to_string_t("updated")] = ModelBase::toJson(m_Updated);
    }
    val[utility::conversions::to_string_t("grader_id")] = ModelBase::toJson(m_Grader_id);
    if(m_Submission_dataIsSet)
    {
        val[utility::conversions::to_string_t("submission_data")] = ModelBase::toJson(m_Submission_data);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    }
    if(m_OutputIsSet)
    {
        val[utility::conversions::to_string_t("output")] = ModelBase::toJson(m_Output);
    }
    if(m_Additional_outputsIsSet)
    {
        val[utility::conversions::to_string_t("additional_outputs")] = ModelBase::toJson(m_Additional_outputs);
    }
    if(m_LogsIsSet)
    {
        val[utility::conversions::to_string_t("logs")] = ModelBase::toJson(m_Logs);
    }
    if(m_StartedIsSet)
    {
        val[utility::conversions::to_string_t("started")] = ModelBase::toJson(m_Started);
    }
    if(m_EndedIsSet)
    {
        val[utility::conversions::to_string_t("ended")] = ModelBase::toJson(m_Ended);
    }
    if(m_MetaIsSet)
    {
        val[utility::conversions::to_string_t("meta")] = ModelBase::toJson(m_Meta);
    }
    if(m_Wf_nameIsSet)
    {
        val[utility::conversions::to_string_t("wf_name")] = ModelBase::toJson(m_Wf_name);
    }
    if(m_Workflow_priorityIsSet)
    {
        val[utility::conversions::to_string_t("workflow_priority")] = ModelBase::toJson(m_Workflow_priority);
    }
    if(m_User_idIsSet)
    {
        val[utility::conversions::to_string_t("user_id")] = ModelBase::toJson(m_User_id);
    }
    if(m_Organisation_idIsSet)
    {
        val[utility::conversions::to_string_t("organisation_id")] = ModelBase::toJson(m_Organisation_id);
    }

    return val;
}

void Submissions::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("created")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("created")];
        if(!fieldValue.is_null())
        {
            setCreated(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updated")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("updated")];
        if(!fieldValue.is_null())
        {
            setUpdated(ModelBase::dateFromJson(fieldValue));
        }
    }
    setGraderId(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("grader_id")]));
    if(val.has_field(utility::conversions::to_string_t("submission_data")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("submission_data")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(fieldValue);
            setSubmissionData( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("status")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("status")];
        if(!fieldValue.is_null())
        {
            setStatus(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("output")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("output")];
        if(!fieldValue.is_null())
        {
            setOutput(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("additional_outputs")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("additional_outputs")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(fieldValue);
            setAdditionalOutputs( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("logs")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("logs")];
        if(!fieldValue.is_null())
        {
            setLogs(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("started")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("started")];
        if(!fieldValue.is_null())
        {
            setStarted(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ended")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("ended")];
        if(!fieldValue.is_null())
        {
            setEnded(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("meta")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("meta")];
        if(!fieldValue.is_null())
        {
            setMeta(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wf_name")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("wf_name")];
        if(!fieldValue.is_null())
        {
            setWfName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("workflow_priority")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("workflow_priority")];
        if(!fieldValue.is_null())
        {
            setWorkflowPriority(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("user_id")];
        if(!fieldValue.is_null())
        {
            setUserId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("organisation_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("organisation_id")];
        if(!fieldValue.is_null())
        {
            setOrganisationId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void Submissions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_CreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created"), m_Created));
        
    }
    if(m_UpdatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updated"), m_Updated));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("grader_id"), m_Grader_id));
    if(m_Submission_dataIsSet)
    {
        if (m_Submission_data.get())
        {
            m_Submission_data->toMultipart(multipart, utility::conversions::to_string_t("submission_data."));
        }
        
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_Status));
        
    }
    if(m_OutputIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("output"), m_Output));
        
    }
    if(m_Additional_outputsIsSet)
    {
        if (m_Additional_outputs.get())
        {
            m_Additional_outputs->toMultipart(multipart, utility::conversions::to_string_t("additional_outputs."));
        }
        
    }
    if(m_LogsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("logs"), m_Logs));
        
    }
    if(m_StartedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("started"), m_Started));
        
    }
    if(m_EndedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ended"), m_Ended));
        
    }
    if(m_MetaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("meta"), m_Meta));
        
    }
    if(m_Wf_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wf_name"), m_Wf_name));
        
    }
    if(m_Workflow_priorityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("workflow_priority"), m_Workflow_priority));
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("user_id"), m_User_id));
    }
    if(m_Organisation_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("organisation_id"), m_Organisation_id));
    }
}

void Submissions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("created")))
    {
        setCreated(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("created"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("updated")))
    {
        setUpdated(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("updated"))));
    }
    setGraderId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("grader_id"))));
    if(multipart->hasContent(utility::conversions::to_string_t("submission_data")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("submission_data")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("submission_data."));
            setSubmissionData( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("status")))
    {
        setStatus(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("status"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("output")))
    {
        setOutput(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("output"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("additional_outputs")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("additional_outputs")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("additional_outputs."));
            setAdditionalOutputs( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("logs")))
    {
        setLogs(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("logs"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("started")))
    {
        setStarted(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("started"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ended")))
    {
        setEnded(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ended"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("meta")))
    {
        setMeta(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("meta"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wf_name")))
    {
        setWfName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("wf_name"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("workflow_priority")))
    {
        setWorkflowPriority(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("workflow_priority"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user_id")))
    {
        setUserId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("user_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("organisation_id")))
    {
        setOrganisationId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("organisation_id"))));
    }
}

int32_t Submissions::getId() const
{
    return m_Id;
}


void Submissions::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Submissions::idIsSet() const
{
    return m_IdIsSet;
}

void Submissions::unsetId()
{
    m_IdIsSet = false;
}

utility::datetime Submissions::getCreated() const
{
    return m_Created;
}


void Submissions::setCreated(utility::datetime value)
{
    m_Created = value;
    m_CreatedIsSet = true;
}
bool Submissions::createdIsSet() const
{
    return m_CreatedIsSet;
}

void Submissions::unsetCreated()
{
    m_CreatedIsSet = false;
}

utility::datetime Submissions::getUpdated() const
{
    return m_Updated;
}


void Submissions::setUpdated(utility::datetime value)
{
    m_Updated = value;
    m_UpdatedIsSet = true;
}
bool Submissions::updatedIsSet() const
{
    return m_UpdatedIsSet;
}

void Submissions::unsetUpdated()
{
    m_UpdatedIsSet = false;
}

int32_t Submissions::getGraderId() const
{
    return m_Grader_id;
}


void Submissions::setGraderId(int32_t value)
{
    m_Grader_id = value;
    
}
std::shared_ptr<Object> Submissions::getSubmissionData() const
{
    return m_Submission_data;
}


void Submissions::setSubmissionData(std::shared_ptr<Object> value)
{
    m_Submission_data = value;
    m_Submission_dataIsSet = true;
}
bool Submissions::submissionDataIsSet() const
{
    return m_Submission_dataIsSet;
}

void Submissions::unsetSubmission_data()
{
    m_Submission_dataIsSet = false;
}

utility::string_t Submissions::getStatus() const
{
    return m_Status;
}


void Submissions::setStatus(utility::string_t value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool Submissions::statusIsSet() const
{
    return m_StatusIsSet;
}

void Submissions::unsetStatus()
{
    m_StatusIsSet = false;
}

utility::string_t Submissions::getOutput() const
{
    return m_Output;
}


void Submissions::setOutput(utility::string_t value)
{
    m_Output = value;
    m_OutputIsSet = true;
}
bool Submissions::outputIsSet() const
{
    return m_OutputIsSet;
}

void Submissions::unsetOutput()
{
    m_OutputIsSet = false;
}

std::shared_ptr<Object> Submissions::getAdditionalOutputs() const
{
    return m_Additional_outputs;
}


void Submissions::setAdditionalOutputs(std::shared_ptr<Object> value)
{
    m_Additional_outputs = value;
    m_Additional_outputsIsSet = true;
}
bool Submissions::additionalOutputsIsSet() const
{
    return m_Additional_outputsIsSet;
}

void Submissions::unsetAdditional_outputs()
{
    m_Additional_outputsIsSet = false;
}

utility::string_t Submissions::getLogs() const
{
    return m_Logs;
}


void Submissions::setLogs(utility::string_t value)
{
    m_Logs = value;
    m_LogsIsSet = true;
}
bool Submissions::logsIsSet() const
{
    return m_LogsIsSet;
}

void Submissions::unsetLogs()
{
    m_LogsIsSet = false;
}

utility::datetime Submissions::getStarted() const
{
    return m_Started;
}


void Submissions::setStarted(utility::datetime value)
{
    m_Started = value;
    m_StartedIsSet = true;
}
bool Submissions::startedIsSet() const
{
    return m_StartedIsSet;
}

void Submissions::unsetStarted()
{
    m_StartedIsSet = false;
}

utility::datetime Submissions::getEnded() const
{
    return m_Ended;
}


void Submissions::setEnded(utility::datetime value)
{
    m_Ended = value;
    m_EndedIsSet = true;
}
bool Submissions::endedIsSet() const
{
    return m_EndedIsSet;
}

void Submissions::unsetEnded()
{
    m_EndedIsSet = false;
}

utility::string_t Submissions::getMeta() const
{
    return m_Meta;
}


void Submissions::setMeta(utility::string_t value)
{
    m_Meta = value;
    m_MetaIsSet = true;
}
bool Submissions::metaIsSet() const
{
    return m_MetaIsSet;
}

void Submissions::unsetMeta()
{
    m_MetaIsSet = false;
}

utility::string_t Submissions::getWfName() const
{
    return m_Wf_name;
}


void Submissions::setWfName(utility::string_t value)
{
    m_Wf_name = value;
    m_Wf_nameIsSet = true;
}
bool Submissions::wfNameIsSet() const
{
    return m_Wf_nameIsSet;
}

void Submissions::unsetWf_name()
{
    m_Wf_nameIsSet = false;
}

int32_t Submissions::getWorkflowPriority() const
{
    return m_Workflow_priority;
}


void Submissions::setWorkflowPriority(int32_t value)
{
    m_Workflow_priority = value;
    m_Workflow_priorityIsSet = true;
}
bool Submissions::workflowPriorityIsSet() const
{
    return m_Workflow_priorityIsSet;
}

void Submissions::unsetWorkflow_priority()
{
    m_Workflow_priorityIsSet = false;
}

int32_t Submissions::getUserId() const
{
    return m_User_id;
}


void Submissions::setUserId(int32_t value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}
bool Submissions::userIdIsSet() const
{
    return m_User_idIsSet;
}

void Submissions::unsetUser_id()
{
    m_User_idIsSet = false;
}

int32_t Submissions::getOrganisationId() const
{
    return m_Organisation_id;
}


void Submissions::setOrganisationId(int32_t value)
{
    m_Organisation_id = value;
    m_Organisation_idIsSet = true;
}
bool Submissions::organisationIdIsSet() const
{
    return m_Organisation_idIsSet;
}

void Submissions::unsetOrganisation_id()
{
    m_Organisation_idIsSet = false;
}

}
}
}
}

