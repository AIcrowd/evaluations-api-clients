/**
 * Evaluations API
 * API to create and evaluate custom challenges
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.12.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Submissions.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_Submissions_H_
#define IO_SWAGGER_CLIENT_MODEL_Submissions_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "Object.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Submissions
    : public ModelBase
{
public:
    Submissions();
    virtual ~Submissions();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Submissions members

    /// <summary>
    /// ID
    /// </summary>
    int32_t getId() const;
    bool idIsSet() const;
    void unsetId();
    void setId(int32_t value);
    /// <summary>
    /// Creation time
    /// </summary>
    utility::datetime getCreated() const;
    bool createdIsSet() const;
    void unsetCreated();
    void setCreated(utility::datetime value);
    /// <summary>
    /// Last updation time
    /// </summary>
    utility::datetime getUpdated() const;
    bool updatedIsSet() const;
    void unsetUpdated();
    void setUpdated(utility::datetime value);
    /// <summary>
    /// Participant identifier
    /// </summary>
    int32_t getParticipantId() const;
    bool participantIdIsSet() const;
    void unsetParticipant_id();
    void setParticipantId(int32_t value);
    /// <summary>
    /// Round identifier
    /// </summary>
    int32_t getRoundId() const;
    bool roundIdIsSet() const;
    void unsetRound_id();
    void setRoundId(int32_t value);
    /// <summary>
    /// Grader identifier
    /// </summary>
    int32_t getGraderId() const;
        void setGraderId(int32_t value);
    /// <summary>
    /// URL to the submission code
    /// </summary>
    utility::string_t getSubmissionCode() const;
        void setSubmissionCode(utility::string_t value);
    /// <summary>
    /// Current status of the submission
    /// </summary>
    utility::string_t getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();
    void setStatus(utility::string_t value);
    /// <summary>
    /// S3 link of the output (available after the evaluation)
    /// </summary>
    utility::string_t getOutput() const;
    bool outputIsSet() const;
    void unsetOutput();
    void setOutput(utility::string_t value);
    /// <summary>
    /// Array of any additional outputs
    /// </summary>
    std::shared_ptr<Object> getAdditionalOutputs() const;
    bool additionalOutputsIsSet() const;
    void unsetAdditional_outputs();
    void setAdditionalOutputs(std::shared_ptr<Object> value);
    /// <summary>
    /// S3 link of the STDOUT of the evaluation
    /// </summary>
    std::shared_ptr<Object> getLogs() const;
    bool logsIsSet() const;
    void unsetLogs();
    void setLogs(std::shared_ptr<Object> value);
    /// <summary>
    /// Evaluation start time
    /// </summary>
    utility::datetime getStarted() const;
    bool startedIsSet() const;
    void unsetStarted();
    void setStarted(utility::datetime value);
    /// <summary>
    /// Evaluation end time
    /// </summary>
    utility::datetime getEnded() const;
    bool endedIsSet() const;
    void unsetEnded();
    void setEnded(utility::datetime value);
    /// <summary>
    /// Additional meta-data
    /// </summary>
    std::shared_ptr<Object> getMeta() const;
    bool metaIsSet() const;
    void unsetMeta();
    void setMeta(std::shared_ptr<Object> value);
    /// <summary>
    /// User ID
    /// </summary>
    int32_t getUserId() const;
    bool userIdIsSet() const;
    void unsetUser_id();
    void setUserId(int32_t value);
    /// <summary>
    /// Organisation ID
    /// </summary>
    int32_t getOrganisationId() const;
    bool organisationIdIsSet() const;
    void unsetOrganisation_id();
    void setOrganisationId(int32_t value);

protected:
    int32_t m_Id;
    bool m_IdIsSet;
    utility::datetime m_Created;
    bool m_CreatedIsSet;
    utility::datetime m_Updated;
    bool m_UpdatedIsSet;
    int32_t m_Participant_id;
    bool m_Participant_idIsSet;
    int32_t m_Round_id;
    bool m_Round_idIsSet;
    int32_t m_Grader_id;
        utility::string_t m_Submission_code;
        utility::string_t m_Status;
    bool m_StatusIsSet;
    utility::string_t m_Output;
    bool m_OutputIsSet;
    std::shared_ptr<Object> m_Additional_outputs;
    bool m_Additional_outputsIsSet;
    std::shared_ptr<Object> m_Logs;
    bool m_LogsIsSet;
    utility::datetime m_Started;
    bool m_StartedIsSet;
    utility::datetime m_Ended;
    bool m_EndedIsSet;
    std::shared_ptr<Object> m_Meta;
    bool m_MetaIsSet;
    int32_t m_User_id;
    bool m_User_idIsSet;
    int32_t m_Organisation_id;
    bool m_Organisation_idIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_Submissions_H_ */
