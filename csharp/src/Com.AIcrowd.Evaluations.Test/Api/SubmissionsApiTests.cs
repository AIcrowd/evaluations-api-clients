/* 
 * AIcrowd Evaluations API
 *
 * API to create and evaluate custom challenges on AIcrowd!
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Com.AIcrowd.Evaluations.Client;
using Com.AIcrowd.Evaluations.Api;
using Com.AIcrowd.Evaluations.Model;

namespace Com.AIcrowd.Evaluations.Test
{
    /// <summary>
    ///  Class for testing SubmissionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SubmissionsApiTests
    {
        private SubmissionsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SubmissionsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SubmissionsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SubmissionsApi
            //Assert.IsInstanceOfType(typeof(SubmissionsApi), instance, "instance is a SubmissionsApi");
        }

        
        /// <summary>
        /// Test CreateSubmission
        /// </summary>
        [Test]
        public void CreateSubmissionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Submissions payload = null;
            //string xFields = null;
            //var response = instance.CreateSubmission(payload, xFields);
            //Assert.IsInstanceOf<Submissions> (response, "response is Submissions");
        }
        
        /// <summary>
        /// Test DeleteSubmission
        /// </summary>
        [Test]
        public void DeleteSubmissionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? submissionId = null;
            //instance.DeleteSubmission(submissionId);
            
        }
        
        /// <summary>
        /// Test GetSubmission
        /// </summary>
        [Test]
        public void GetSubmissionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? submissionId = null;
            //string xFields = null;
            //var response = instance.GetSubmission(submissionId, xFields);
            //Assert.IsInstanceOf<Submissions> (response, "response is Submissions");
        }
        
        /// <summary>
        /// Test GetSubmissionData
        /// </summary>
        [Test]
        public void GetSubmissionDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? submissionId = null;
            //instance.GetSubmissionData(submissionId);
            
        }
        
        /// <summary>
        /// Test GetSubmissionLogs
        /// </summary>
        [Test]
        public void GetSubmissionLogsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? submissionId = null;
            //instance.GetSubmissionLogs(submissionId);
            
        }
        
        /// <summary>
        /// Test ListSubmissions
        /// </summary>
        [Test]
        public void ListSubmissionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string perPage = null;
            //string page = null;
            //string meta = null;
            //string status = null;
            //int? graderId = null;
            //int? userId = null;
            //string xFields = null;
            //var response = instance.ListSubmissions(perPage, page, meta, status, graderId, userId, xFields);
            //Assert.IsInstanceOf<List<Submissions>> (response, "response is List<Submissions>");
        }
        
        /// <summary>
        /// Test RetrySubmissions
        /// </summary>
        [Test]
        public void RetrySubmissionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SubmissionRetryInput payload = null;
            //string xFields = null;
            //var response = instance.RetrySubmissions(payload, xFields);
            //Assert.IsInstanceOf<SubmissionRetry> (response, "response is SubmissionRetry");
        }
        
    }

}
