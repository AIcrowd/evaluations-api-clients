/* 
 * AIcrowd Evaluations API
 *
 * API to create and evaluate custom challenges on AIcrowd!
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Com.AIcrowd.Evaluations.Client;
using Com.AIcrowd.Evaluations.Model;

namespace Com.AIcrowd.Evaluations.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGradersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new grader
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Grader</returns>
        Grader CreateGrader (Grader payload, string xFields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new grader
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>ApiResponse of Grader</returns>
        ApiResponse<Grader> CreateGraderWithHttpInfo (Grader payload, string xFields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a grader by its ID
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="graderId"></param>
        /// <returns></returns>
        void DeleteGrader (int? graderId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a grader by its ID
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="graderId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGraderWithHttpInfo (int? graderId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details of a grader by its ID
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="graderId"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Grader</returns>
        Grader GetGrader (int? graderId, string xFields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details of a grader by its ID
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="graderId"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>ApiResponse of Grader</returns>
        ApiResponse<Grader> GetGraderWithHttpInfo (int? graderId, string xFields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all graders available
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>List&lt;Grader&gt;</returns>
        List<Grader> ListGraders (string xFields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all graders available
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>ApiResponse of List&lt;Grader&gt;</returns>
        ApiResponse<List<Grader>> ListGradersWithHttpInfo (string xFields = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new grader
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Task of Grader</returns>
        System.Threading.Tasks.Task<Grader> CreateGraderAsync (Grader payload, string xFields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new grader
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Task of ApiResponse (Grader)</returns>
        System.Threading.Tasks.Task<ApiResponse<Grader>> CreateGraderAsyncWithHttpInfo (Grader payload, string xFields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a grader by its ID
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="graderId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGraderAsync (int? graderId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a grader by its ID
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="graderId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGraderAsyncWithHttpInfo (int? graderId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details of a grader by its ID
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="graderId"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Task of Grader</returns>
        System.Threading.Tasks.Task<Grader> GetGraderAsync (int? graderId, string xFields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details of a grader by its ID
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="graderId"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Task of ApiResponse (Grader)</returns>
        System.Threading.Tasks.Task<ApiResponse<Grader>> GetGraderAsyncWithHttpInfo (int? graderId, string xFields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all graders available
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Task of List&lt;Grader&gt;</returns>
        System.Threading.Tasks.Task<List<Grader>> ListGradersAsync (string xFields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all graders available
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Grader&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Grader>>> ListGradersAsyncWithHttpInfo (string xFields = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GradersApi : IGradersApi
    {
        private Com.AIcrowd.Evaluations.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GradersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GradersApi(String basePath)
        {
            this.Configuration = new Com.AIcrowd.Evaluations.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Com.AIcrowd.Evaluations.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GradersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GradersApi(Com.AIcrowd.Evaluations.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Com.AIcrowd.Evaluations.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Com.AIcrowd.Evaluations.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.AIcrowd.Evaluations.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.AIcrowd.Evaluations.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Create a new grader
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Grader</returns>
        public Grader CreateGrader (Grader payload, string xFields = null)
        {
             ApiResponse<Grader> localVarResponse = CreateGraderWithHttpInfo(payload, xFields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new grader
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>ApiResponse of Grader</returns>
        public ApiResponse< Grader > CreateGraderWithHttpInfo (Grader payload, string xFields = null)
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling GradersApi->CreateGrader");

            var localVarPath = "/graders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xFields != null) localVarHeaderParams.Add("X-Fields", this.Configuration.ApiClient.ParameterToString(xFields)); // header parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGrader", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Grader>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Grader) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Grader)));
        }

        /// <summary>
        ///  Create a new grader
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Task of Grader</returns>
        public async System.Threading.Tasks.Task<Grader> CreateGraderAsync (Grader payload, string xFields = null)
        {
             ApiResponse<Grader> localVarResponse = await CreateGraderAsyncWithHttpInfo(payload, xFields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Create a new grader
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Task of ApiResponse (Grader)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Grader>> CreateGraderAsyncWithHttpInfo (Grader payload, string xFields = null)
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling GradersApi->CreateGrader");

            var localVarPath = "/graders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xFields != null) localVarHeaderParams.Add("X-Fields", this.Configuration.ApiClient.ParameterToString(xFields)); // header parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGrader", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Grader>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Grader) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Grader)));
        }

        /// <summary>
        ///  Delete a grader by its ID
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="graderId"></param>
        /// <returns></returns>
        public void DeleteGrader (int? graderId)
        {
             DeleteGraderWithHttpInfo(graderId);
        }

        /// <summary>
        ///  Delete a grader by its ID
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="graderId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteGraderWithHttpInfo (int? graderId)
        {
            // verify the required parameter 'graderId' is set
            if (graderId == null)
                throw new ApiException(400, "Missing required parameter 'graderId' when calling GradersApi->DeleteGrader");

            var localVarPath = "/graders/{grader_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (graderId != null) localVarPathParams.Add("grader_id", this.Configuration.ApiClient.ParameterToString(graderId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGrader", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Delete a grader by its ID
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="graderId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGraderAsync (int? graderId)
        {
             await DeleteGraderAsyncWithHttpInfo(graderId);

        }

        /// <summary>
        ///  Delete a grader by its ID
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="graderId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGraderAsyncWithHttpInfo (int? graderId)
        {
            // verify the required parameter 'graderId' is set
            if (graderId == null)
                throw new ApiException(400, "Missing required parameter 'graderId' when calling GradersApi->DeleteGrader");

            var localVarPath = "/graders/{grader_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (graderId != null) localVarPathParams.Add("grader_id", this.Configuration.ApiClient.ParameterToString(graderId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGrader", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Get details of a grader by its ID
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="graderId"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Grader</returns>
        public Grader GetGrader (int? graderId, string xFields = null)
        {
             ApiResponse<Grader> localVarResponse = GetGraderWithHttpInfo(graderId, xFields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get details of a grader by its ID
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="graderId"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>ApiResponse of Grader</returns>
        public ApiResponse< Grader > GetGraderWithHttpInfo (int? graderId, string xFields = null)
        {
            // verify the required parameter 'graderId' is set
            if (graderId == null)
                throw new ApiException(400, "Missing required parameter 'graderId' when calling GradersApi->GetGrader");

            var localVarPath = "/graders/{grader_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (graderId != null) localVarPathParams.Add("grader_id", this.Configuration.ApiClient.ParameterToString(graderId)); // path parameter
            if (xFields != null) localVarHeaderParams.Add("X-Fields", this.Configuration.ApiClient.ParameterToString(xFields)); // header parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGrader", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Grader>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Grader) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Grader)));
        }

        /// <summary>
        ///  Get details of a grader by its ID
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="graderId"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Task of Grader</returns>
        public async System.Threading.Tasks.Task<Grader> GetGraderAsync (int? graderId, string xFields = null)
        {
             ApiResponse<Grader> localVarResponse = await GetGraderAsyncWithHttpInfo(graderId, xFields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get details of a grader by its ID
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="graderId"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Task of ApiResponse (Grader)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Grader>> GetGraderAsyncWithHttpInfo (int? graderId, string xFields = null)
        {
            // verify the required parameter 'graderId' is set
            if (graderId == null)
                throw new ApiException(400, "Missing required parameter 'graderId' when calling GradersApi->GetGrader");

            var localVarPath = "/graders/{grader_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (graderId != null) localVarPathParams.Add("grader_id", this.Configuration.ApiClient.ParameterToString(graderId)); // path parameter
            if (xFields != null) localVarHeaderParams.Add("X-Fields", this.Configuration.ApiClient.ParameterToString(xFields)); // header parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGrader", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Grader>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Grader) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Grader)));
        }

        /// <summary>
        ///  List all graders available
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>List&lt;Grader&gt;</returns>
        public List<Grader> ListGraders (string xFields = null)
        {
             ApiResponse<List<Grader>> localVarResponse = ListGradersWithHttpInfo(xFields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  List all graders available
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>ApiResponse of List&lt;Grader&gt;</returns>
        public ApiResponse< List<Grader> > ListGradersWithHttpInfo (string xFields = null)
        {

            var localVarPath = "/graders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xFields != null) localVarHeaderParams.Add("X-Fields", this.Configuration.ApiClient.ParameterToString(xFields)); // header parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGraders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Grader>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Grader>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Grader>)));
        }

        /// <summary>
        ///  List all graders available
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Task of List&lt;Grader&gt;</returns>
        public async System.Threading.Tasks.Task<List<Grader>> ListGradersAsync (string xFields = null)
        {
             ApiResponse<List<Grader>> localVarResponse = await ListGradersAsyncWithHttpInfo(xFields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  List all graders available
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Grader&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Grader>>> ListGradersAsyncWithHttpInfo (string xFields = null)
        {

            var localVarPath = "/graders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xFields != null) localVarHeaderParams.Add("X-Fields", this.Configuration.ApiClient.ParameterToString(xFields)); // header parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGraders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Grader>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Grader>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Grader>)));
        }

    }
}
