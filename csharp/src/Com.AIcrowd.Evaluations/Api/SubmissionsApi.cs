/* 
 * AIcrowd Evaluations API
 *
 * API to create and evaluate custom challenges on AIcrowd!
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Com.AIcrowd.Evaluations.Client;
using Com.AIcrowd.Evaluations.Model;

namespace Com.AIcrowd.Evaluations.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubmissionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Make a new submission
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Submissions</returns>
        Submissions CreateSubmission (Submissions payload, string xFields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Make a new submission
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>ApiResponse of Submissions</returns>
        ApiResponse<Submissions> CreateSubmissionWithHttpInfo (Submissions payload, string xFields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Stop evaluation of a submission and delete it
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns></returns>
        void DeleteSubmission (int? submissionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Stop evaluation of a submission and delete it
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSubmissionWithHttpInfo (int? submissionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details of a submission by its ID
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Submissions</returns>
        Submissions GetSubmission (int? submissionId, string xFields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details of a submission by its ID
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>ApiResponse of Submissions</returns>
        ApiResponse<Submissions> GetSubmissionWithHttpInfo (int? submissionId, string xFields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the submission data by submission ID
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns></returns>
        void GetSubmissionData (int? submissionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the submission data by submission ID
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetSubmissionDataWithHttpInfo (int? submissionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all submissions available
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>List&lt;Submissions&gt;</returns>
        List<Submissions> ListSubmissions (string xFields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all submissions available
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>ApiResponse of List&lt;Submissions&gt;</returns>
        ApiResponse<List<Submissions>> ListSubmissionsWithHttpInfo (string xFields = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Make a new submission
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Task of Submissions</returns>
        System.Threading.Tasks.Task<Submissions> CreateSubmissionAsync (Submissions payload, string xFields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Make a new submission
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Task of ApiResponse (Submissions)</returns>
        System.Threading.Tasks.Task<ApiResponse<Submissions>> CreateSubmissionAsyncWithHttpInfo (Submissions payload, string xFields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Stop evaluation of a submission and delete it
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSubmissionAsync (int? submissionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Stop evaluation of a submission and delete it
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSubmissionAsyncWithHttpInfo (int? submissionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details of a submission by its ID
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Task of Submissions</returns>
        System.Threading.Tasks.Task<Submissions> GetSubmissionAsync (int? submissionId, string xFields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details of a submission by its ID
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Task of ApiResponse (Submissions)</returns>
        System.Threading.Tasks.Task<ApiResponse<Submissions>> GetSubmissionAsyncWithHttpInfo (int? submissionId, string xFields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the submission data by submission ID
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetSubmissionDataAsync (int? submissionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the submission data by submission ID
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetSubmissionDataAsyncWithHttpInfo (int? submissionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all submissions available
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Task of List&lt;Submissions&gt;</returns>
        System.Threading.Tasks.Task<List<Submissions>> ListSubmissionsAsync (string xFields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all submissions available
        /// </remarks>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Submissions&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Submissions>>> ListSubmissionsAsyncWithHttpInfo (string xFields = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubmissionsApi : ISubmissionsApi
    {
        private Com.AIcrowd.Evaluations.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubmissionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubmissionsApi(String basePath)
        {
            this.Configuration = new Com.AIcrowd.Evaluations.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Com.AIcrowd.Evaluations.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubmissionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SubmissionsApi(Com.AIcrowd.Evaluations.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Com.AIcrowd.Evaluations.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Com.AIcrowd.Evaluations.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.AIcrowd.Evaluations.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.AIcrowd.Evaluations.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Make a new submission
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Submissions</returns>
        public Submissions CreateSubmission (Submissions payload, string xFields = null)
        {
             ApiResponse<Submissions> localVarResponse = CreateSubmissionWithHttpInfo(payload, xFields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Make a new submission
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>ApiResponse of Submissions</returns>
        public ApiResponse< Submissions > CreateSubmissionWithHttpInfo (Submissions payload, string xFields = null)
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling SubmissionsApi->CreateSubmission");

            var localVarPath = "/submissions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xFields != null) localVarHeaderParams.Add("X-Fields", this.Configuration.ApiClient.ParameterToString(xFields)); // header parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSubmission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Submissions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Submissions) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Submissions)));
        }

        /// <summary>
        ///  Make a new submission
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Task of Submissions</returns>
        public async System.Threading.Tasks.Task<Submissions> CreateSubmissionAsync (Submissions payload, string xFields = null)
        {
             ApiResponse<Submissions> localVarResponse = await CreateSubmissionAsyncWithHttpInfo(payload, xFields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Make a new submission
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Task of ApiResponse (Submissions)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Submissions>> CreateSubmissionAsyncWithHttpInfo (Submissions payload, string xFields = null)
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling SubmissionsApi->CreateSubmission");

            var localVarPath = "/submissions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xFields != null) localVarHeaderParams.Add("X-Fields", this.Configuration.ApiClient.ParameterToString(xFields)); // header parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSubmission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Submissions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Submissions) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Submissions)));
        }

        /// <summary>
        ///  Stop evaluation of a submission and delete it
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns></returns>
        public void DeleteSubmission (int? submissionId)
        {
             DeleteSubmissionWithHttpInfo(submissionId);
        }

        /// <summary>
        ///  Stop evaluation of a submission and delete it
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSubmissionWithHttpInfo (int? submissionId)
        {
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
                throw new ApiException(400, "Missing required parameter 'submissionId' when calling SubmissionsApi->DeleteSubmission");

            var localVarPath = "/submissions/{submission_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submissionId != null) localVarPathParams.Add("submission_id", this.Configuration.ApiClient.ParameterToString(submissionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubmission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Stop evaluation of a submission and delete it
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSubmissionAsync (int? submissionId)
        {
             await DeleteSubmissionAsyncWithHttpInfo(submissionId);

        }

        /// <summary>
        ///  Stop evaluation of a submission and delete it
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSubmissionAsyncWithHttpInfo (int? submissionId)
        {
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
                throw new ApiException(400, "Missing required parameter 'submissionId' when calling SubmissionsApi->DeleteSubmission");

            var localVarPath = "/submissions/{submission_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submissionId != null) localVarPathParams.Add("submission_id", this.Configuration.ApiClient.ParameterToString(submissionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubmission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Get details of a submission by its ID
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Submissions</returns>
        public Submissions GetSubmission (int? submissionId, string xFields = null)
        {
             ApiResponse<Submissions> localVarResponse = GetSubmissionWithHttpInfo(submissionId, xFields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get details of a submission by its ID
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>ApiResponse of Submissions</returns>
        public ApiResponse< Submissions > GetSubmissionWithHttpInfo (int? submissionId, string xFields = null)
        {
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
                throw new ApiException(400, "Missing required parameter 'submissionId' when calling SubmissionsApi->GetSubmission");

            var localVarPath = "/submissions/{submission_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submissionId != null) localVarPathParams.Add("submission_id", this.Configuration.ApiClient.ParameterToString(submissionId)); // path parameter
            if (xFields != null) localVarHeaderParams.Add("X-Fields", this.Configuration.ApiClient.ParameterToString(xFields)); // header parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Submissions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Submissions) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Submissions)));
        }

        /// <summary>
        ///  Get details of a submission by its ID
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Task of Submissions</returns>
        public async System.Threading.Tasks.Task<Submissions> GetSubmissionAsync (int? submissionId, string xFields = null)
        {
             ApiResponse<Submissions> localVarResponse = await GetSubmissionAsyncWithHttpInfo(submissionId, xFields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get details of a submission by its ID
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Task of ApiResponse (Submissions)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Submissions>> GetSubmissionAsyncWithHttpInfo (int? submissionId, string xFields = null)
        {
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
                throw new ApiException(400, "Missing required parameter 'submissionId' when calling SubmissionsApi->GetSubmission");

            var localVarPath = "/submissions/{submission_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submissionId != null) localVarPathParams.Add("submission_id", this.Configuration.ApiClient.ParameterToString(submissionId)); // path parameter
            if (xFields != null) localVarHeaderParams.Add("X-Fields", this.Configuration.ApiClient.ParameterToString(xFields)); // header parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Submissions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Submissions) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Submissions)));
        }

        /// <summary>
        ///  Get the submission data by submission ID
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns></returns>
        public void GetSubmissionData (int? submissionId)
        {
             GetSubmissionDataWithHttpInfo(submissionId);
        }

        /// <summary>
        ///  Get the submission data by submission ID
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetSubmissionDataWithHttpInfo (int? submissionId)
        {
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
                throw new ApiException(400, "Missing required parameter 'submissionId' when calling SubmissionsApi->GetSubmissionData");

            var localVarPath = "/submissions/{submission_id}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submissionId != null) localVarPathParams.Add("submission_id", this.Configuration.ApiClient.ParameterToString(submissionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmissionData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Get the submission data by submission ID
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetSubmissionDataAsync (int? submissionId)
        {
             await GetSubmissionDataAsyncWithHttpInfo(submissionId);

        }

        /// <summary>
        ///  Get the submission data by submission ID
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetSubmissionDataAsyncWithHttpInfo (int? submissionId)
        {
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
                throw new ApiException(400, "Missing required parameter 'submissionId' when calling SubmissionsApi->GetSubmissionData");

            var localVarPath = "/submissions/{submission_id}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submissionId != null) localVarPathParams.Add("submission_id", this.Configuration.ApiClient.ParameterToString(submissionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmissionData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  List all submissions available
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>List&lt;Submissions&gt;</returns>
        public List<Submissions> ListSubmissions (string xFields = null)
        {
             ApiResponse<List<Submissions>> localVarResponse = ListSubmissionsWithHttpInfo(xFields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  List all submissions available
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>ApiResponse of List&lt;Submissions&gt;</returns>
        public ApiResponse< List<Submissions> > ListSubmissionsWithHttpInfo (string xFields = null)
        {

            var localVarPath = "/submissions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xFields != null) localVarHeaderParams.Add("X-Fields", this.Configuration.ApiClient.ParameterToString(xFields)); // header parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSubmissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Submissions>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Submissions>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Submissions>)));
        }

        /// <summary>
        ///  List all submissions available
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Task of List&lt;Submissions&gt;</returns>
        public async System.Threading.Tasks.Task<List<Submissions>> ListSubmissionsAsync (string xFields = null)
        {
             ApiResponse<List<Submissions>> localVarResponse = await ListSubmissionsAsyncWithHttpInfo(xFields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  List all submissions available
        /// </summary>
        /// <exception cref="Com.AIcrowd.Evaluations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Submissions&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Submissions>>> ListSubmissionsAsyncWithHttpInfo (string xFields = null)
        {

            var localVarPath = "/submissions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xFields != null) localVarHeaderParams.Add("X-Fields", this.Configuration.ApiClient.ParameterToString(xFields)); // header parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSubmissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Submissions>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Submissions>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Submissions>)));
        }

    }
}
