/* 
 * AIcrowd Evaluations API
 *
 * API to create and evaluate custom challenges on AIcrowd!
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.AIcrowd.Evaluations.Client.SwaggerDateConverter;

namespace Com.AIcrowd.Evaluations.Model
{
    /// <summary>
    /// Cluster
    /// </summary>
    [DataContract]
    public partial class Cluster :  IEquatable<Cluster>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Cluster" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Cluster() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Cluster" /> class.
        /// </summary>
        /// <param name="remoteAddress">Remote address used to connect to the cluster (required).</param>
        /// <param name="authToken">Authentication needed for the cluster (required).</param>
        /// <param name="dockerUsername">Docker registry username (required).</param>
        /// <param name="dockerRegistry">Docker registry URL. Dockerhub is used by default..</param>
        /// <param name="_namespace">Kubernetes namespace to run the workflows in.</param>
        /// <param name="storageClass">Storage class to use for datasets.</param>
        /// <param name="argoToken">Argo server token required for authentication.</param>
        /// <param name="minioUser">Minio user to give file access to.</param>
        /// <param name="s3Policy">Minio s3 policy.</param>
        public Cluster(string remoteAddress = default(string), string authToken = default(string), string dockerUsername = default(string), string dockerRegistry = default(string), string _namespace = default(string), string storageClass = default(string), string argoToken = default(string), string minioUser = default(string), string s3Policy = default(string))
        {
            // to ensure "remoteAddress" is required (not null)
            if (remoteAddress == null)
            {
                throw new InvalidDataException("remoteAddress is a required property for Cluster and cannot be null");
            }
            else
            {
                this.RemoteAddress = remoteAddress;
            }
            // to ensure "authToken" is required (not null)
            if (authToken == null)
            {
                throw new InvalidDataException("authToken is a required property for Cluster and cannot be null");
            }
            else
            {
                this.AuthToken = authToken;
            }
            // to ensure "dockerUsername" is required (not null)
            if (dockerUsername == null)
            {
                throw new InvalidDataException("dockerUsername is a required property for Cluster and cannot be null");
            }
            else
            {
                this.DockerUsername = dockerUsername;
            }
            this.DockerRegistry = dockerRegistry;
            this.Namespace = _namespace;
            this.StorageClass = storageClass;
            this.ArgoToken = argoToken;
            this.MinioUser = minioUser;
            this.S3Policy = s3Policy;
        }
        
        /// <summary>
        /// ID
        /// </summary>
        /// <value>ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Creation time
        /// </summary>
        /// <value>Creation time</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; private set; }

        /// <summary>
        /// Last updation time
        /// </summary>
        /// <value>Last updation time</value>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public DateTime? Updated { get; private set; }

        /// <summary>
        /// Remote address used to connect to the cluster
        /// </summary>
        /// <value>Remote address used to connect to the cluster</value>
        [DataMember(Name="remote_address", EmitDefaultValue=false)]
        public string RemoteAddress { get; set; }

        /// <summary>
        /// Authentication needed for the cluster
        /// </summary>
        /// <value>Authentication needed for the cluster</value>
        [DataMember(Name="auth_token", EmitDefaultValue=false)]
        public string AuthToken { get; set; }

        /// <summary>
        /// Docker registry username
        /// </summary>
        /// <value>Docker registry username</value>
        [DataMember(Name="docker_username", EmitDefaultValue=false)]
        public string DockerUsername { get; set; }

        /// <summary>
        /// Docker registry URL. Dockerhub is used by default.
        /// </summary>
        /// <value>Docker registry URL. Dockerhub is used by default.</value>
        [DataMember(Name="docker_registry", EmitDefaultValue=false)]
        public string DockerRegistry { get; set; }

        /// <summary>
        /// Kubernetes namespace to run the workflows in
        /// </summary>
        /// <value>Kubernetes namespace to run the workflows in</value>
        [DataMember(Name="namespace", EmitDefaultValue=false)]
        public string Namespace { get; set; }

        /// <summary>
        /// Storage class to use for datasets
        /// </summary>
        /// <value>Storage class to use for datasets</value>
        [DataMember(Name="storage_class", EmitDefaultValue=false)]
        public string StorageClass { get; set; }

        /// <summary>
        /// Readiness of the cluster
        /// </summary>
        /// <value>Readiness of the cluster</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public bool? Status { get; private set; }

        /// <summary>
        /// Name of the workflow used to setup grader
        /// </summary>
        /// <value>Name of the workflow used to setup grader</value>
        [DataMember(Name="wf_name", EmitDefaultValue=false)]
        public string WfName { get; private set; }

        /// <summary>
        /// External IP exposed by LoadBalancer Service of argo-server deployment
        /// </summary>
        /// <value>External IP exposed by LoadBalancer Service of argo-server deployment</value>
        [DataMember(Name="argo_host", EmitDefaultValue=false)]
        public string ArgoHost { get; private set; }

        /// <summary>
        /// Argo server token required for authentication
        /// </summary>
        /// <value>Argo server token required for authentication</value>
        [DataMember(Name="argo_token", EmitDefaultValue=false)]
        public string ArgoToken { get; set; }

        /// <summary>
        /// Minio user to give file access to
        /// </summary>
        /// <value>Minio user to give file access to</value>
        [DataMember(Name="minio_user", EmitDefaultValue=false)]
        public string MinioUser { get; set; }

        /// <summary>
        /// Minio s3 policy
        /// </summary>
        /// <value>Minio s3 policy</value>
        [DataMember(Name="s3_policy", EmitDefaultValue=false)]
        public string S3Policy { get; set; }

        /// <summary>
        /// User ID
        /// </summary>
        /// <value>User ID</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public int? UserId { get; private set; }

        /// <summary>
        /// Organisation ID
        /// </summary>
        /// <value>Organisation ID</value>
        [DataMember(Name="organisation_id", EmitDefaultValue=false)]
        public int? OrganisationId { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Cluster {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  RemoteAddress: ").Append(RemoteAddress).Append("\n");
            sb.Append("  AuthToken: ").Append(AuthToken).Append("\n");
            sb.Append("  DockerUsername: ").Append(DockerUsername).Append("\n");
            sb.Append("  DockerRegistry: ").Append(DockerRegistry).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  StorageClass: ").Append(StorageClass).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  WfName: ").Append(WfName).Append("\n");
            sb.Append("  ArgoHost: ").Append(ArgoHost).Append("\n");
            sb.Append("  ArgoToken: ").Append(ArgoToken).Append("\n");
            sb.Append("  MinioUser: ").Append(MinioUser).Append("\n");
            sb.Append("  S3Policy: ").Append(S3Policy).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  OrganisationId: ").Append(OrganisationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Cluster);
        }

        /// <summary>
        /// Returns true if Cluster instances are equal
        /// </summary>
        /// <param name="input">Instance of Cluster to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Cluster input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                ) && 
                (
                    this.RemoteAddress == input.RemoteAddress ||
                    (this.RemoteAddress != null &&
                    this.RemoteAddress.Equals(input.RemoteAddress))
                ) && 
                (
                    this.AuthToken == input.AuthToken ||
                    (this.AuthToken != null &&
                    this.AuthToken.Equals(input.AuthToken))
                ) && 
                (
                    this.DockerUsername == input.DockerUsername ||
                    (this.DockerUsername != null &&
                    this.DockerUsername.Equals(input.DockerUsername))
                ) && 
                (
                    this.DockerRegistry == input.DockerRegistry ||
                    (this.DockerRegistry != null &&
                    this.DockerRegistry.Equals(input.DockerRegistry))
                ) && 
                (
                    this.Namespace == input.Namespace ||
                    (this.Namespace != null &&
                    this.Namespace.Equals(input.Namespace))
                ) && 
                (
                    this.StorageClass == input.StorageClass ||
                    (this.StorageClass != null &&
                    this.StorageClass.Equals(input.StorageClass))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.WfName == input.WfName ||
                    (this.WfName != null &&
                    this.WfName.Equals(input.WfName))
                ) && 
                (
                    this.ArgoHost == input.ArgoHost ||
                    (this.ArgoHost != null &&
                    this.ArgoHost.Equals(input.ArgoHost))
                ) && 
                (
                    this.ArgoToken == input.ArgoToken ||
                    (this.ArgoToken != null &&
                    this.ArgoToken.Equals(input.ArgoToken))
                ) && 
                (
                    this.MinioUser == input.MinioUser ||
                    (this.MinioUser != null &&
                    this.MinioUser.Equals(input.MinioUser))
                ) && 
                (
                    this.S3Policy == input.S3Policy ||
                    (this.S3Policy != null &&
                    this.S3Policy.Equals(input.S3Policy))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.OrganisationId == input.OrganisationId ||
                    (this.OrganisationId != null &&
                    this.OrganisationId.Equals(input.OrganisationId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Updated != null)
                    hashCode = hashCode * 59 + this.Updated.GetHashCode();
                if (this.RemoteAddress != null)
                    hashCode = hashCode * 59 + this.RemoteAddress.GetHashCode();
                if (this.AuthToken != null)
                    hashCode = hashCode * 59 + this.AuthToken.GetHashCode();
                if (this.DockerUsername != null)
                    hashCode = hashCode * 59 + this.DockerUsername.GetHashCode();
                if (this.DockerRegistry != null)
                    hashCode = hashCode * 59 + this.DockerRegistry.GetHashCode();
                if (this.Namespace != null)
                    hashCode = hashCode * 59 + this.Namespace.GetHashCode();
                if (this.StorageClass != null)
                    hashCode = hashCode * 59 + this.StorageClass.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.WfName != null)
                    hashCode = hashCode * 59 + this.WfName.GetHashCode();
                if (this.ArgoHost != null)
                    hashCode = hashCode * 59 + this.ArgoHost.GetHashCode();
                if (this.ArgoToken != null)
                    hashCode = hashCode * 59 + this.ArgoToken.GetHashCode();
                if (this.MinioUser != null)
                    hashCode = hashCode * 59 + this.MinioUser.GetHashCode();
                if (this.S3Policy != null)
                    hashCode = hashCode * 59 + this.S3Policy.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.OrganisationId != null)
                    hashCode = hashCode * 59 + this.OrganisationId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
