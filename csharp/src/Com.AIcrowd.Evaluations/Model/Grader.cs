/* 
 * Evaluations API
 *
 * API to create and evaluate custom challenges
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.AIcrowd.Evaluations.Client.SwaggerDateConverter;

namespace Com.AIcrowd.Evaluations.Model
{
    /// <summary>
    /// Grader
    /// </summary>
    [DataContract]
    public partial class Grader :  IEquatable<Grader>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Grader" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Grader() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Grader" /> class.
        /// </summary>
        /// <param name="datasetUrl">S3 link of the Dataset.</param>
        /// <param name="clusterId">Cluster to run the grader on.</param>
        /// <param name="evaluatorRepo">Git URL of the repository containing the code that will be used for the evaluation (required).</param>
        /// <param name="evaluatorRepoTag">Git branch/tag that should be used with the evaluator repository..</param>
        /// <param name="storageCapacity">Size of the dataset partition to request. Please provide at least 2x of the size of the dataset..</param>
        public Grader(string datasetUrl = default(string), int? clusterId = default(int?), string evaluatorRepo = default(string), string evaluatorRepoTag = default(string), string storageCapacity = default(string))
        {
            // to ensure "evaluatorRepo" is required (not null)
            if (evaluatorRepo == null)
            {
                throw new InvalidDataException("evaluatorRepo is a required property for Grader and cannot be null");
            }
            else
            {
                this.EvaluatorRepo = evaluatorRepo;
            }
            this.DatasetUrl = datasetUrl;
            this.ClusterId = clusterId;
            this.EvaluatorRepoTag = evaluatorRepoTag;
            this.StorageCapacity = storageCapacity;
        }
        
        /// <summary>
        /// ID
        /// </summary>
        /// <value>ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Creation time
        /// </summary>
        /// <value>Creation time</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; private set; }

        /// <summary>
        /// Last updation time
        /// </summary>
        /// <value>Last updation time</value>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public DateTime? Updated { get; private set; }

        /// <summary>
        /// S3 link of the Dataset
        /// </summary>
        /// <value>S3 link of the Dataset</value>
        [DataMember(Name="dataset_url", EmitDefaultValue=false)]
        public string DatasetUrl { get; set; }

        /// <summary>
        /// Cluster to run the grader on
        /// </summary>
        /// <value>Cluster to run the grader on</value>
        [DataMember(Name="cluster_id", EmitDefaultValue=false)]
        public int? ClusterId { get; set; }

        /// <summary>
        /// Argo workflow template spec
        /// </summary>
        /// <value>Argo workflow template spec</value>
        [DataMember(Name="workflow_spec", EmitDefaultValue=false)]
        public Object WorkflowSpec { get; private set; }

        /// <summary>
        /// Git URL of the repository containing the code that will be used for the evaluation
        /// </summary>
        /// <value>Git URL of the repository containing the code that will be used for the evaluation</value>
        [DataMember(Name="evaluator_repo", EmitDefaultValue=false)]
        public string EvaluatorRepo { get; set; }

        /// <summary>
        /// Git branch/tag that should be used with the evaluator repository.
        /// </summary>
        /// <value>Git branch/tag that should be used with the evaluator repository.</value>
        [DataMember(Name="evaluator_repo_tag", EmitDefaultValue=false)]
        public string EvaluatorRepoTag { get; set; }

        /// <summary>
        /// Size of the dataset partition to request. Please provide at least 2x of the size of the dataset.
        /// </summary>
        /// <value>Size of the dataset partition to request. Please provide at least 2x of the size of the dataset.</value>
        [DataMember(Name="storage_capacity", EmitDefaultValue=false)]
        public string StorageCapacity { get; set; }

        /// <summary>
        /// Logs from argo workflow
        /// </summary>
        /// <value>Logs from argo workflow</value>
        [DataMember(Name="logs", EmitDefaultValue=false)]
        public Object Logs { get; private set; }

        /// <summary>
        /// Additional meta data of the grader
        /// </summary>
        /// <value>Additional meta data of the grader</value>
        [DataMember(Name="meta", EmitDefaultValue=false)]
        public Object Meta { get; private set; }

        /// <summary>
        /// Status of the grader - True if it ready, False otherwise
        /// </summary>
        /// <value>Status of the grader - True if it ready, False otherwise</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; private set; }

        /// <summary>
        /// Type of submissions allowed on the grader
        /// </summary>
        /// <value>Type of submissions allowed on the grader</value>
        [DataMember(Name="submission_types", EmitDefaultValue=false)]
        public Object SubmissionTypes { get; private set; }

        /// <summary>
        /// User ID
        /// </summary>
        /// <value>User ID</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public int? UserId { get; private set; }

        /// <summary>
        /// Organisation ID
        /// </summary>
        /// <value>Organisation ID</value>
        [DataMember(Name="organisation_id", EmitDefaultValue=false)]
        public int? OrganisationId { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Grader {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  DatasetUrl: ").Append(DatasetUrl).Append("\n");
            sb.Append("  ClusterId: ").Append(ClusterId).Append("\n");
            sb.Append("  WorkflowSpec: ").Append(WorkflowSpec).Append("\n");
            sb.Append("  EvaluatorRepo: ").Append(EvaluatorRepo).Append("\n");
            sb.Append("  EvaluatorRepoTag: ").Append(EvaluatorRepoTag).Append("\n");
            sb.Append("  StorageCapacity: ").Append(StorageCapacity).Append("\n");
            sb.Append("  Logs: ").Append(Logs).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SubmissionTypes: ").Append(SubmissionTypes).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  OrganisationId: ").Append(OrganisationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Grader);
        }

        /// <summary>
        /// Returns true if Grader instances are equal
        /// </summary>
        /// <param name="input">Instance of Grader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Grader input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                ) && 
                (
                    this.DatasetUrl == input.DatasetUrl ||
                    (this.DatasetUrl != null &&
                    this.DatasetUrl.Equals(input.DatasetUrl))
                ) && 
                (
                    this.ClusterId == input.ClusterId ||
                    (this.ClusterId != null &&
                    this.ClusterId.Equals(input.ClusterId))
                ) && 
                (
                    this.WorkflowSpec == input.WorkflowSpec ||
                    (this.WorkflowSpec != null &&
                    this.WorkflowSpec.Equals(input.WorkflowSpec))
                ) && 
                (
                    this.EvaluatorRepo == input.EvaluatorRepo ||
                    (this.EvaluatorRepo != null &&
                    this.EvaluatorRepo.Equals(input.EvaluatorRepo))
                ) && 
                (
                    this.EvaluatorRepoTag == input.EvaluatorRepoTag ||
                    (this.EvaluatorRepoTag != null &&
                    this.EvaluatorRepoTag.Equals(input.EvaluatorRepoTag))
                ) && 
                (
                    this.StorageCapacity == input.StorageCapacity ||
                    (this.StorageCapacity != null &&
                    this.StorageCapacity.Equals(input.StorageCapacity))
                ) && 
                (
                    this.Logs == input.Logs ||
                    (this.Logs != null &&
                    this.Logs.Equals(input.Logs))
                ) && 
                (
                    this.Meta == input.Meta ||
                    (this.Meta != null &&
                    this.Meta.Equals(input.Meta))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.SubmissionTypes == input.SubmissionTypes ||
                    (this.SubmissionTypes != null &&
                    this.SubmissionTypes.Equals(input.SubmissionTypes))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.OrganisationId == input.OrganisationId ||
                    (this.OrganisationId != null &&
                    this.OrganisationId.Equals(input.OrganisationId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Updated != null)
                    hashCode = hashCode * 59 + this.Updated.GetHashCode();
                if (this.DatasetUrl != null)
                    hashCode = hashCode * 59 + this.DatasetUrl.GetHashCode();
                if (this.ClusterId != null)
                    hashCode = hashCode * 59 + this.ClusterId.GetHashCode();
                if (this.WorkflowSpec != null)
                    hashCode = hashCode * 59 + this.WorkflowSpec.GetHashCode();
                if (this.EvaluatorRepo != null)
                    hashCode = hashCode * 59 + this.EvaluatorRepo.GetHashCode();
                if (this.EvaluatorRepoTag != null)
                    hashCode = hashCode * 59 + this.EvaluatorRepoTag.GetHashCode();
                if (this.StorageCapacity != null)
                    hashCode = hashCode * 59 + this.StorageCapacity.GetHashCode();
                if (this.Logs != null)
                    hashCode = hashCode * 59 + this.Logs.GetHashCode();
                if (this.Meta != null)
                    hashCode = hashCode * 59 + this.Meta.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.SubmissionTypes != null)
                    hashCode = hashCode * 59 + this.SubmissionTypes.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.OrganisationId != null)
                    hashCode = hashCode * 59 + this.OrganisationId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
