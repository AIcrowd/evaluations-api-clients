/* 
 * AIcrowd Evaluations API
 *
 * API to create and evaluate custom challenges on AIcrowd!
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.AIcrowd.Evaluations.Client.SwaggerDateConverter;

namespace Com.AIcrowd.Evaluations.Model
{
    /// <summary>
    /// Grader
    /// </summary>
    [DataContract]
    public partial class Grader :  IEquatable<Grader>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Grader" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Grader() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Grader" /> class.
        /// </summary>
        /// <param name="clusterId">Cluster to run the grader on.</param>
        /// <param name="evaluatorRepo">Git URL of the repository containing the code that will be used for the evaluation (required).</param>
        /// <param name="evaluatorRepoTag">Git branch/tag that should be used with the evaluator repository..</param>
        /// <param name="meta">Additional meta data of the grader.</param>
        /// <param name="secrets">List of key:value pair of secrets that will be replace &#x60;{key}&#x60; in aicrowd.yaml.</param>
        /// <param name="workflowPriority">Workflow priority to assign.</param>
        /// <param name="configPath">Path to grader configuration (default: aicrowd.yaml).</param>
        /// <param name="dockerRepo">Docker repo to use for grader images.</param>
        /// <param name="contextDir">Context for grader files inside the repository.</param>
        public Grader(int? clusterId = default(int?), string evaluatorRepo = default(string), string evaluatorRepoTag = default(string), string meta = default(string), Object secrets = default(Object), int? workflowPriority = default(int?), string configPath = default(string), string dockerRepo = default(string), string contextDir = default(string))
        {
            // to ensure "evaluatorRepo" is required (not null)
            if (evaluatorRepo == null)
            {
                throw new InvalidDataException("evaluatorRepo is a required property for Grader and cannot be null");
            }
            else
            {
                this.EvaluatorRepo = evaluatorRepo;
            }
            this.ClusterId = clusterId;
            this.EvaluatorRepoTag = evaluatorRepoTag;
            this.Meta = meta;
            this.Secrets = secrets;
            this.WorkflowPriority = workflowPriority;
            this.ConfigPath = configPath;
            this.DockerRepo = dockerRepo;
            this.ContextDir = contextDir;
        }
        
        /// <summary>
        /// ID
        /// </summary>
        /// <value>ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Creation time
        /// </summary>
        /// <value>Creation time</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; private set; }

        /// <summary>
        /// Last updation time
        /// </summary>
        /// <value>Last updation time</value>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public DateTime? Updated { get; private set; }

        /// <summary>
        /// Grader archival status
        /// </summary>
        /// <value>Grader archival status</value>
        [DataMember(Name="archived", EmitDefaultValue=false)]
        public bool? Archived { get; private set; }

        /// <summary>
        /// Dataset metadata
        /// </summary>
        /// <value>Dataset metadata</value>
        [DataMember(Name="dataset", EmitDefaultValue=false)]
        public Object Dataset { get; private set; }

        /// <summary>
        /// Cluster to run the grader on
        /// </summary>
        /// <value>Cluster to run the grader on</value>
        [DataMember(Name="cluster_id", EmitDefaultValue=false)]
        public int? ClusterId { get; set; }

        /// <summary>
        /// Description of the grader
        /// </summary>
        /// <value>Description of the grader</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; private set; }

        /// <summary>
        /// Argo workflow template spec
        /// </summary>
        /// <value>Argo workflow template spec</value>
        [DataMember(Name="workflow_spec", EmitDefaultValue=false)]
        public Object WorkflowSpec { get; private set; }

        /// <summary>
        /// Git URL of the repository containing the code that will be used for the evaluation
        /// </summary>
        /// <value>Git URL of the repository containing the code that will be used for the evaluation</value>
        [DataMember(Name="evaluator_repo", EmitDefaultValue=false)]
        public string EvaluatorRepo { get; set; }

        /// <summary>
        /// Git branch/tag that should be used with the evaluator repository.
        /// </summary>
        /// <value>Git branch/tag that should be used with the evaluator repository.</value>
        [DataMember(Name="evaluator_repo_tag", EmitDefaultValue=false)]
        public string EvaluatorRepoTag { get; set; }

        /// <summary>
        /// Name of the grader
        /// </summary>
        /// <value>Name of the grader</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; private set; }

        /// <summary>
        /// Notifications available for the grader.
        /// </summary>
        /// <value>Notifications available for the grader.</value>
        [DataMember(Name="notifications", EmitDefaultValue=false)]
        public string Notifications { get; private set; }

        /// <summary>
        /// Logs from argo workflow
        /// </summary>
        /// <value>Logs from argo workflow</value>
        [DataMember(Name="logs", EmitDefaultValue=false)]
        public string Logs { get; private set; }

        /// <summary>
        /// Additional meta data of the grader
        /// </summary>
        /// <value>Additional meta data of the grader</value>
        [DataMember(Name="meta", EmitDefaultValue=false)]
        public string Meta { get; set; }

        /// <summary>
        /// Status of the grader - True if it ready, False otherwise
        /// </summary>
        /// <value>Status of the grader - True if it ready, False otherwise</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; private set; }

        /// <summary>
        /// List of key:value pair of secrets that will be replace &#x60;{key}&#x60; in aicrowd.yaml
        /// </summary>
        /// <value>List of key:value pair of secrets that will be replace &#x60;{key}&#x60; in aicrowd.yaml</value>
        [DataMember(Name="secrets", EmitDefaultValue=false)]
        public Object Secrets { get; set; }

        /// <summary>
        /// Name of the workflow used to setup grader
        /// </summary>
        /// <value>Name of the workflow used to setup grader</value>
        [DataMember(Name="wf_name", EmitDefaultValue=false)]
        public string WfName { get; private set; }

        /// <summary>
        /// Allowed extensions for the grader
        /// </summary>
        /// <value>Allowed extensions for the grader</value>
        [DataMember(Name="allowed_extensions", EmitDefaultValue=false)]
        public Object AllowedExtensions { get; private set; }

        /// <summary>
        /// Workflow priority to assign
        /// </summary>
        /// <value>Workflow priority to assign</value>
        [DataMember(Name="workflow_priority", EmitDefaultValue=false)]
        public int? WorkflowPriority { get; set; }

        /// <summary>
        /// Path to grader configuration (default: aicrowd.yaml)
        /// </summary>
        /// <value>Path to grader configuration (default: aicrowd.yaml)</value>
        [DataMember(Name="config_path", EmitDefaultValue=false)]
        public string ConfigPath { get; set; }

        /// <summary>
        /// Docker repo to use for grader images
        /// </summary>
        /// <value>Docker repo to use for grader images</value>
        [DataMember(Name="docker_repo", EmitDefaultValue=false)]
        public string DockerRepo { get; set; }

        /// <summary>
        /// Context for grader files inside the repository
        /// </summary>
        /// <value>Context for grader files inside the repository</value>
        [DataMember(Name="context_dir", EmitDefaultValue=false)]
        public string ContextDir { get; set; }

        /// <summary>
        /// User ID
        /// </summary>
        /// <value>User ID</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public int? UserId { get; private set; }

        /// <summary>
        /// Organisation ID
        /// </summary>
        /// <value>Organisation ID</value>
        [DataMember(Name="organisation_id", EmitDefaultValue=false)]
        public int? OrganisationId { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Grader {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  Dataset: ").Append(Dataset).Append("\n");
            sb.Append("  ClusterId: ").Append(ClusterId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  WorkflowSpec: ").Append(WorkflowSpec).Append("\n");
            sb.Append("  EvaluatorRepo: ").Append(EvaluatorRepo).Append("\n");
            sb.Append("  EvaluatorRepoTag: ").Append(EvaluatorRepoTag).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  Logs: ").Append(Logs).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Secrets: ").Append(Secrets).Append("\n");
            sb.Append("  WfName: ").Append(WfName).Append("\n");
            sb.Append("  AllowedExtensions: ").Append(AllowedExtensions).Append("\n");
            sb.Append("  WorkflowPriority: ").Append(WorkflowPriority).Append("\n");
            sb.Append("  ConfigPath: ").Append(ConfigPath).Append("\n");
            sb.Append("  DockerRepo: ").Append(DockerRepo).Append("\n");
            sb.Append("  ContextDir: ").Append(ContextDir).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  OrganisationId: ").Append(OrganisationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Grader);
        }

        /// <summary>
        /// Returns true if Grader instances are equal
        /// </summary>
        /// <param name="input">Instance of Grader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Grader input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                ) && 
                (
                    this.Archived == input.Archived ||
                    (this.Archived != null &&
                    this.Archived.Equals(input.Archived))
                ) && 
                (
                    this.Dataset == input.Dataset ||
                    (this.Dataset != null &&
                    this.Dataset.Equals(input.Dataset))
                ) && 
                (
                    this.ClusterId == input.ClusterId ||
                    (this.ClusterId != null &&
                    this.ClusterId.Equals(input.ClusterId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.WorkflowSpec == input.WorkflowSpec ||
                    (this.WorkflowSpec != null &&
                    this.WorkflowSpec.Equals(input.WorkflowSpec))
                ) && 
                (
                    this.EvaluatorRepo == input.EvaluatorRepo ||
                    (this.EvaluatorRepo != null &&
                    this.EvaluatorRepo.Equals(input.EvaluatorRepo))
                ) && 
                (
                    this.EvaluatorRepoTag == input.EvaluatorRepoTag ||
                    (this.EvaluatorRepoTag != null &&
                    this.EvaluatorRepoTag.Equals(input.EvaluatorRepoTag))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Notifications == input.Notifications ||
                    (this.Notifications != null &&
                    this.Notifications.Equals(input.Notifications))
                ) && 
                (
                    this.Logs == input.Logs ||
                    (this.Logs != null &&
                    this.Logs.Equals(input.Logs))
                ) && 
                (
                    this.Meta == input.Meta ||
                    (this.Meta != null &&
                    this.Meta.Equals(input.Meta))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Secrets == input.Secrets ||
                    (this.Secrets != null &&
                    this.Secrets.Equals(input.Secrets))
                ) && 
                (
                    this.WfName == input.WfName ||
                    (this.WfName != null &&
                    this.WfName.Equals(input.WfName))
                ) && 
                (
                    this.AllowedExtensions == input.AllowedExtensions ||
                    (this.AllowedExtensions != null &&
                    this.AllowedExtensions.Equals(input.AllowedExtensions))
                ) && 
                (
                    this.WorkflowPriority == input.WorkflowPriority ||
                    (this.WorkflowPriority != null &&
                    this.WorkflowPriority.Equals(input.WorkflowPriority))
                ) && 
                (
                    this.ConfigPath == input.ConfigPath ||
                    (this.ConfigPath != null &&
                    this.ConfigPath.Equals(input.ConfigPath))
                ) && 
                (
                    this.DockerRepo == input.DockerRepo ||
                    (this.DockerRepo != null &&
                    this.DockerRepo.Equals(input.DockerRepo))
                ) && 
                (
                    this.ContextDir == input.ContextDir ||
                    (this.ContextDir != null &&
                    this.ContextDir.Equals(input.ContextDir))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.OrganisationId == input.OrganisationId ||
                    (this.OrganisationId != null &&
                    this.OrganisationId.Equals(input.OrganisationId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Updated != null)
                    hashCode = hashCode * 59 + this.Updated.GetHashCode();
                if (this.Archived != null)
                    hashCode = hashCode * 59 + this.Archived.GetHashCode();
                if (this.Dataset != null)
                    hashCode = hashCode * 59 + this.Dataset.GetHashCode();
                if (this.ClusterId != null)
                    hashCode = hashCode * 59 + this.ClusterId.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.WorkflowSpec != null)
                    hashCode = hashCode * 59 + this.WorkflowSpec.GetHashCode();
                if (this.EvaluatorRepo != null)
                    hashCode = hashCode * 59 + this.EvaluatorRepo.GetHashCode();
                if (this.EvaluatorRepoTag != null)
                    hashCode = hashCode * 59 + this.EvaluatorRepoTag.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Notifications != null)
                    hashCode = hashCode * 59 + this.Notifications.GetHashCode();
                if (this.Logs != null)
                    hashCode = hashCode * 59 + this.Logs.GetHashCode();
                if (this.Meta != null)
                    hashCode = hashCode * 59 + this.Meta.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Secrets != null)
                    hashCode = hashCode * 59 + this.Secrets.GetHashCode();
                if (this.WfName != null)
                    hashCode = hashCode * 59 + this.WfName.GetHashCode();
                if (this.AllowedExtensions != null)
                    hashCode = hashCode * 59 + this.AllowedExtensions.GetHashCode();
                if (this.WorkflowPriority != null)
                    hashCode = hashCode * 59 + this.WorkflowPriority.GetHashCode();
                if (this.ConfigPath != null)
                    hashCode = hashCode * 59 + this.ConfigPath.GetHashCode();
                if (this.DockerRepo != null)
                    hashCode = hashCode * 59 + this.DockerRepo.GetHashCode();
                if (this.ContextDir != null)
                    hashCode = hashCode * 59 + this.ContextDir.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.OrganisationId != null)
                    hashCode = hashCode * 59 + this.OrganisationId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
