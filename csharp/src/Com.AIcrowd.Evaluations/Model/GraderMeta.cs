/* 
 * AIcrowd Evaluations API
 *
 * API to create and evaluate custom challenges on AIcrowd!
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.AIcrowd.Evaluations.Client.SwaggerDateConverter;

namespace Com.AIcrowd.Evaluations.Model
{
    /// <summary>
    /// GraderMeta
    /// </summary>
    [DataContract]
    public partial class GraderMeta :  IEquatable<GraderMeta>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GraderMeta" /> class.
        /// </summary>
        /// <param name="dataset">Dataset metadata.</param>
        /// <param name="notifications">Notifications available for the grader.</param>
        /// <param name="name">Name of the grader.</param>
        /// <param name="description">Description of the grader.</param>
        /// <param name="clusterId">Cluster to run the grader on.</param>
        /// <param name="meta">Additional meta data of the grader.</param>
        public GraderMeta(Object dataset = default(Object), Object notifications = default(Object), string name = default(string), string description = default(string), int? clusterId = default(int?), string meta = default(string))
        {
            this.Dataset = dataset;
            this.Notifications = notifications;
            this.Name = name;
            this.Description = description;
            this.ClusterId = clusterId;
            this.Meta = meta;
        }
        
        /// <summary>
        /// Dataset metadata
        /// </summary>
        /// <value>Dataset metadata</value>
        [DataMember(Name="dataset", EmitDefaultValue=false)]
        public Object Dataset { get; set; }

        /// <summary>
        /// Notifications available for the grader
        /// </summary>
        /// <value>Notifications available for the grader</value>
        [DataMember(Name="notifications", EmitDefaultValue=false)]
        public Object Notifications { get; set; }

        /// <summary>
        /// Name of the grader
        /// </summary>
        /// <value>Name of the grader</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Description of the grader
        /// </summary>
        /// <value>Description of the grader</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Cluster to run the grader on
        /// </summary>
        /// <value>Cluster to run the grader on</value>
        [DataMember(Name="cluster_id", EmitDefaultValue=false)]
        public int? ClusterId { get; set; }

        /// <summary>
        /// Additional meta data of the grader
        /// </summary>
        /// <value>Additional meta data of the grader</value>
        [DataMember(Name="meta", EmitDefaultValue=false)]
        public string Meta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GraderMeta {\n");
            sb.Append("  Dataset: ").Append(Dataset).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ClusterId: ").Append(ClusterId).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GraderMeta);
        }

        /// <summary>
        /// Returns true if GraderMeta instances are equal
        /// </summary>
        /// <param name="input">Instance of GraderMeta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GraderMeta input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Dataset == input.Dataset ||
                    (this.Dataset != null &&
                    this.Dataset.Equals(input.Dataset))
                ) && 
                (
                    this.Notifications == input.Notifications ||
                    (this.Notifications != null &&
                    this.Notifications.Equals(input.Notifications))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ClusterId == input.ClusterId ||
                    (this.ClusterId != null &&
                    this.ClusterId.Equals(input.ClusterId))
                ) && 
                (
                    this.Meta == input.Meta ||
                    (this.Meta != null &&
                    this.Meta.Equals(input.Meta))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Dataset != null)
                    hashCode = hashCode * 59 + this.Dataset.GetHashCode();
                if (this.Notifications != null)
                    hashCode = hashCode * 59 + this.Notifications.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ClusterId != null)
                    hashCode = hashCode * 59 + this.ClusterId.GetHashCode();
                if (this.Meta != null)
                    hashCode = hashCode * 59 + this.Meta.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
