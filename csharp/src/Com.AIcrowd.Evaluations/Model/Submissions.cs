/* 
 * AIcrowd Evaluations API
 *
 * API to create and evaluate custom challenges on AIcrowd!
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.AIcrowd.Evaluations.Client.SwaggerDateConverter;

namespace Com.AIcrowd.Evaluations.Model
{
    /// <summary>
    /// Submissions
    /// </summary>
    [DataContract]
    public partial class Submissions :  IEquatable<Submissions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Submissions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Submissions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Submissions" /> class.
        /// </summary>
        /// <param name="graderId">Grader identifier (required).</param>
        /// <param name="submissionData">URL to the submission code.</param>
        /// <param name="meta">Additional meta data of the grader.</param>
        public Submissions(int? graderId = default(int?), Object submissionData = default(Object), string meta = default(string))
        {
            // to ensure "graderId" is required (not null)
            if (graderId == null)
            {
                throw new InvalidDataException("graderId is a required property for Submissions and cannot be null");
            }
            else
            {
                this.GraderId = graderId;
            }
            this.SubmissionData = submissionData;
            this.Meta = meta;
        }
        
        /// <summary>
        /// ID
        /// </summary>
        /// <value>ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Creation time
        /// </summary>
        /// <value>Creation time</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; private set; }

        /// <summary>
        /// Last updation time
        /// </summary>
        /// <value>Last updation time</value>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public DateTime? Updated { get; private set; }

        /// <summary>
        /// Grader identifier
        /// </summary>
        /// <value>Grader identifier</value>
        [DataMember(Name="grader_id", EmitDefaultValue=false)]
        public int? GraderId { get; set; }

        /// <summary>
        /// URL to the submission code
        /// </summary>
        /// <value>URL to the submission code</value>
        [DataMember(Name="submission_data", EmitDefaultValue=false)]
        public Object SubmissionData { get; set; }

        /// <summary>
        /// Current status of the submission
        /// </summary>
        /// <value>Current status of the submission</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; private set; }

        /// <summary>
        /// S3 link of the output (available after the evaluation)
        /// </summary>
        /// <value>S3 link of the output (available after the evaluation)</value>
        [DataMember(Name="output", EmitDefaultValue=false)]
        public string Output { get; private set; }

        /// <summary>
        /// Array of any additional outputs
        /// </summary>
        /// <value>Array of any additional outputs</value>
        [DataMember(Name="additional_outputs", EmitDefaultValue=false)]
        public Object AdditionalOutputs { get; private set; }

        /// <summary>
        /// S3 link of the STDOUT of the evaluation
        /// </summary>
        /// <value>S3 link of the STDOUT of the evaluation</value>
        [DataMember(Name="logs", EmitDefaultValue=false)]
        public string Logs { get; private set; }

        /// <summary>
        /// Evaluation start time
        /// </summary>
        /// <value>Evaluation start time</value>
        [DataMember(Name="started", EmitDefaultValue=false)]
        public DateTime? Started { get; private set; }

        /// <summary>
        /// Evaluation end time
        /// </summary>
        /// <value>Evaluation end time</value>
        [DataMember(Name="ended", EmitDefaultValue=false)]
        public DateTime? Ended { get; private set; }

        /// <summary>
        /// Additional meta data of the grader
        /// </summary>
        /// <value>Additional meta data of the grader</value>
        [DataMember(Name="meta", EmitDefaultValue=false)]
        public string Meta { get; set; }

        /// <summary>
        /// Name of the workflow used to evaluate submission
        /// </summary>
        /// <value>Name of the workflow used to evaluate submission</value>
        [DataMember(Name="wf_name", EmitDefaultValue=false)]
        public string WfName { get; private set; }

        /// <summary>
        /// User ID
        /// </summary>
        /// <value>User ID</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public int? UserId { get; private set; }

        /// <summary>
        /// Organisation ID
        /// </summary>
        /// <value>Organisation ID</value>
        [DataMember(Name="organisation_id", EmitDefaultValue=false)]
        public int? OrganisationId { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Submissions {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  GraderId: ").Append(GraderId).Append("\n");
            sb.Append("  SubmissionData: ").Append(SubmissionData).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Output: ").Append(Output).Append("\n");
            sb.Append("  AdditionalOutputs: ").Append(AdditionalOutputs).Append("\n");
            sb.Append("  Logs: ").Append(Logs).Append("\n");
            sb.Append("  Started: ").Append(Started).Append("\n");
            sb.Append("  Ended: ").Append(Ended).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  WfName: ").Append(WfName).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  OrganisationId: ").Append(OrganisationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Submissions);
        }

        /// <summary>
        /// Returns true if Submissions instances are equal
        /// </summary>
        /// <param name="input">Instance of Submissions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Submissions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                ) && 
                (
                    this.GraderId == input.GraderId ||
                    (this.GraderId != null &&
                    this.GraderId.Equals(input.GraderId))
                ) && 
                (
                    this.SubmissionData == input.SubmissionData ||
                    (this.SubmissionData != null &&
                    this.SubmissionData.Equals(input.SubmissionData))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Output == input.Output ||
                    (this.Output != null &&
                    this.Output.Equals(input.Output))
                ) && 
                (
                    this.AdditionalOutputs == input.AdditionalOutputs ||
                    (this.AdditionalOutputs != null &&
                    this.AdditionalOutputs.Equals(input.AdditionalOutputs))
                ) && 
                (
                    this.Logs == input.Logs ||
                    (this.Logs != null &&
                    this.Logs.Equals(input.Logs))
                ) && 
                (
                    this.Started == input.Started ||
                    (this.Started != null &&
                    this.Started.Equals(input.Started))
                ) && 
                (
                    this.Ended == input.Ended ||
                    (this.Ended != null &&
                    this.Ended.Equals(input.Ended))
                ) && 
                (
                    this.Meta == input.Meta ||
                    (this.Meta != null &&
                    this.Meta.Equals(input.Meta))
                ) && 
                (
                    this.WfName == input.WfName ||
                    (this.WfName != null &&
                    this.WfName.Equals(input.WfName))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.OrganisationId == input.OrganisationId ||
                    (this.OrganisationId != null &&
                    this.OrganisationId.Equals(input.OrganisationId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Updated != null)
                    hashCode = hashCode * 59 + this.Updated.GetHashCode();
                if (this.GraderId != null)
                    hashCode = hashCode * 59 + this.GraderId.GetHashCode();
                if (this.SubmissionData != null)
                    hashCode = hashCode * 59 + this.SubmissionData.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Output != null)
                    hashCode = hashCode * 59 + this.Output.GetHashCode();
                if (this.AdditionalOutputs != null)
                    hashCode = hashCode * 59 + this.AdditionalOutputs.GetHashCode();
                if (this.Logs != null)
                    hashCode = hashCode * 59 + this.Logs.GetHashCode();
                if (this.Started != null)
                    hashCode = hashCode * 59 + this.Started.GetHashCode();
                if (this.Ended != null)
                    hashCode = hashCode * 59 + this.Ended.GetHashCode();
                if (this.Meta != null)
                    hashCode = hashCode * 59 + this.Meta.GetHashCode();
                if (this.WfName != null)
                    hashCode = hashCode * 59 + this.WfName.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.OrganisationId != null)
                    hashCode = hashCode * 59 + this.OrganisationId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
