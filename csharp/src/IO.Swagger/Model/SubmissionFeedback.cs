/* 
 * Evaluations API
 *
 * API to create and evaluate custom challenges
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SubmissionFeedback
    /// </summary>
    [DataContract]
    public partial class SubmissionFeedback :  IEquatable<SubmissionFeedback>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmissionFeedback" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubmissionFeedback() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmissionFeedback" /> class.
        /// </summary>
        /// <param name="status">Status of the submission (required).</param>
        /// <param name="outputs">S3 link of the outputs (required).</param>
        /// <param name="score">Additional outputs (required).</param>
        /// <param name="logs">Output on stdout for run-evaluator.run-submitted-code step (required).</param>
        public SubmissionFeedback(string status = default(string), string outputs = default(string), decimal? score = default(decimal?), string logs = default(string))
        {
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for SubmissionFeedback and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            // to ensure "outputs" is required (not null)
            if (outputs == null)
            {
                throw new InvalidDataException("outputs is a required property for SubmissionFeedback and cannot be null");
            }
            else
            {
                this.Outputs = outputs;
            }
            // to ensure "score" is required (not null)
            if (score == null)
            {
                throw new InvalidDataException("score is a required property for SubmissionFeedback and cannot be null");
            }
            else
            {
                this.Score = score;
            }
            // to ensure "logs" is required (not null)
            if (logs == null)
            {
                throw new InvalidDataException("logs is a required property for SubmissionFeedback and cannot be null");
            }
            else
            {
                this.Logs = logs;
            }
        }
        
        /// <summary>
        /// Status of the submission
        /// </summary>
        /// <value>Status of the submission</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// S3 link of the outputs
        /// </summary>
        /// <value>S3 link of the outputs</value>
        [DataMember(Name="outputs", EmitDefaultValue=false)]
        public string Outputs { get; set; }

        /// <summary>
        /// Additional outputs
        /// </summary>
        /// <value>Additional outputs</value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public decimal? Score { get; set; }

        /// <summary>
        /// Output on stdout for run-evaluator.run-submitted-code step
        /// </summary>
        /// <value>Output on stdout for run-evaluator.run-submitted-code step</value>
        [DataMember(Name="logs", EmitDefaultValue=false)]
        public string Logs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubmissionFeedback {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Outputs: ").Append(Outputs).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Logs: ").Append(Logs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubmissionFeedback);
        }

        /// <summary>
        /// Returns true if SubmissionFeedback instances are equal
        /// </summary>
        /// <param name="input">Instance of SubmissionFeedback to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubmissionFeedback input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Outputs == input.Outputs ||
                    (this.Outputs != null &&
                    this.Outputs.Equals(input.Outputs))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.Logs == input.Logs ||
                    (this.Logs != null &&
                    this.Logs.Equals(input.Logs))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Outputs != null)
                    hashCode = hashCode * 59 + this.Outputs.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.Logs != null)
                    hashCode = hashCode * 59 + this.Logs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
