# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule AIcrowd.Evaluations.Api.Clusters do
  @moduledoc """
  API calls for all endpoints tagged `Clusters`.
  """

  alias AIcrowd.Evaluations.Connection
  import AIcrowd.Evaluations.RequestBuilder


  @doc """
  Add a new cluster to AIcrowd and install necessary dependencies

  ## Parameters

  - connection (AIcrowd.Evaluations.Connection): Connection to server
  - payload (Cluster): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_fields (String.t): An optional fields mask

  ## Returns

  {:ok, %AIcrowd.Evaluations.Model.Cluster{}} on success
  {:error, info} on failure
  """
  @spec create_cluster(Tesla.Env.client, AIcrowd.Evaluations.Model.Cluster.t, keyword()) :: {:ok, AIcrowd.Evaluations.Model.Cluster.t} | {:error, Tesla.Env.t}
  def create_cluster(connection, payload, opts \\ []) do
    optional_params = %{
      :"X-Fields" => :headers
    }
    %{}
    |> method(:post)
    |> url("/clusters/")
    |> add_param(:body, :"payload", payload)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AIcrowd.Evaluations.Model.Cluster{})
  end

  @doc """
  Delete a cluster by its ID

  ## Parameters

  - connection (AIcrowd.Evaluations.Connection): Connection to server
  - cluster_id (integer()): 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_cluster(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_cluster(connection, cluster_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/clusters/#{cluster_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get details of a cluster by its ID

  ## Parameters

  - connection (AIcrowd.Evaluations.Connection): Connection to server
  - cluster_id (integer()): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_fields (String.t): An optional fields mask

  ## Returns

  {:ok, %AIcrowd.Evaluations.Model.Cluster{}} on success
  {:error, info} on failure
  """
  @spec get_cluster(Tesla.Env.client, integer(), keyword()) :: {:ok, AIcrowd.Evaluations.Model.Cluster.t} | {:error, Tesla.Env.t}
  def get_cluster(connection, cluster_id, opts \\ []) do
    optional_params = %{
      :"X-Fields" => :headers
    }
    %{}
    |> method(:get)
    |> url("/clusters/#{cluster_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AIcrowd.Evaluations.Model.Cluster{})
  end

  @doc """
  List all clusters available

  ## Parameters

  - connection (AIcrowd.Evaluations.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :x_fields (String.t): An optional fields mask

  ## Returns

  {:ok, [%Cluster{}, ...]} on success
  {:error, info} on failure
  """
  @spec list_clusters(Tesla.Env.client, keyword()) :: {:ok, list(AIcrowd.Evaluations.Model.Cluster.t)} | {:error, Tesla.Env.t}
  def list_clusters(connection, opts \\ []) do
    optional_params = %{
      :"X-Fields" => :headers
    }
    %{}
    |> method(:get)
    |> url("/clusters/")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%AIcrowd.Evaluations.Model.Cluster{}])
  end
end
