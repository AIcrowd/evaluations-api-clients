---
swagger: "2.0"
info:
  description: "API to create and evaluate custom challenges on AIcrowd!"
  version: "1.0.0"
  title: "AIcrowd Evaluations API"
basePath: "/v1"
tags:
- name: "auth"
  description: "Login and Logout operations."
- name: "graders"
  description: "Manage your graders."
- name: "submissions"
  description: "Manage your submissions."
- name: "clusters"
  description: "Manage your k8s cluster."
- name: "organisations"
  description: "Manage your organisation details (Admin)."
- name: "users"
  description: "Manage users (Admin)."
consumes:
- "application/json"
produces:
- "application/json"
security:
- api_key: []
paths:
  /auth/login:
    post:
      tags:
      - "auth"
      description: "Log in a user with email and password."
      operationId: "Login"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/Login"
        x-exportParamName: "Payload"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      security: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AuthResponse"
        "401":
          description: "Wrong username or password"
  /auth/logout:
    post:
      tags:
      - "auth"
      description: "Invalidate the current authorization token."
      operationId: "Logout"
      parameters:
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AuthLogout"
  /clusters/:
    get:
      tags:
      - "clusters"
      description: "List all clusters available"
      operationId: "ListClusters"
      parameters:
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Cluster"
    post:
      tags:
      - "clusters"
      description: "Add a new cluster to AIcrowd and install necessary dependencies"
      operationId: "CreateCluster"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/Cluster"
        x-exportParamName: "Payload"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "400":
          description: "Invalid inputs"
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Cluster"
  /clusters/{cluster_id}:
    get:
      tags:
      - "clusters"
      description: "Get details of a cluster by its ID"
      operationId: "GetCluster"
      parameters:
      - name: "cluster_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "ClusterId"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "404":
          description: "Cluster not found"
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Cluster"
    delete:
      tags:
      - "clusters"
      description: "Delete a cluster by its ID"
      operationId: "DeleteCluster"
      parameters:
      - name: "cluster_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "ClusterId"
      responses:
        "404":
          description: "Cluster not found"
        "200":
          description: "Success"
  /graders/:
    get:
      tags:
      - "graders"
      description: "List all graders available"
      operationId: "ListGraders"
      parameters:
      - name: "per_page"
        in: "query"
        description: "Results to display per page"
        required: false
        type: "string"
        x-exportParamName: "PerPage"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "Page number"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      - name: "meta"
        in: "query"
        description: "Fetch graders containing this meta value"
        required: false
        type: "string"
        x-exportParamName: "Meta"
        x-optionalDataType: "String"
      - name: "name"
        in: "query"
        description: "Fetch grader containing name"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "status"
        in: "query"
        description: "Fetch graders with this status"
        required: false
        type: "string"
        x-exportParamName: "Status"
        x-optionalDataType: "String"
      - name: "user_id"
        in: "query"
        description: "Fetch graders created by the user"
        required: false
        type: "integer"
        x-exportParamName: "UserId"
        x-optionalDataType: "Int32"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Grader"
    post:
      tags:
      - "graders"
      description: "Create a new grader"
      operationId: "CreateGrader"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/Grader"
        x-exportParamName: "Payload"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "403":
          description: "Cluster not ready"
        "404":
          description: "Cluster not found"
        "400":
          description: "Invalid inputs"
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Grader"
  /graders/{grader_id}:
    get:
      tags:
      - "graders"
      description: "Get details of a grader by its ID"
      operationId: "GetGrader"
      parameters:
      - name: "grader_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "GraderId"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "404":
          description: "Grader not found"
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Grader"
    delete:
      tags:
      - "graders"
      description: "Delete a grader by its ID"
      operationId: "DeleteGrader"
      parameters:
      - name: "grader_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "GraderId"
      responses:
        "404":
          description: "Grader not found"
        "200":
          description: "Success"
    patch:
      tags:
      - "graders"
      description: "Update meta details of a grader by its ID. Warning: There is no\
        \ data validation."
      operationId: "UpdateGrader"
      parameters:
      - name: "grader_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "GraderId"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/GraderMeta"
        x-exportParamName: "Payload"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "404":
          description: "Grader not found"
        "400":
          description: "Invalid inputs"
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Grader"
  /graders/{grader_id}/archive:
    post:
      tags:
      - "graders"
      description: "Archive a grader"
      operationId: "ArchiveGrader"
      parameters:
      - name: "grader_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "GraderId"
      responses:
        "404":
          description: "Grader not found"
        "403":
          description: "Grader not ready"
        "200":
          description: "Success"
  /graders/{grader_id}/logs:
    get:
      tags:
      - "graders"
      description: "Get grader logs from loki"
      operationId: "GetGraderLogs"
      parameters:
      - name: "grader_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "GraderId"
      - name: "step"
        in: "query"
        description: "Granularity of logs"
        required: false
        type: "integer"
        x-exportParamName: "Step"
        x-optionalDataType: "Int32"
      - name: "log_lines"
        in: "query"
        description: "Number of lines to fetch"
        required: false
        type: "integer"
        x-exportParamName: "LogLines"
        x-optionalDataType: "Int32"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "404":
          description: "Grader not found"
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/GraderLogs"
  /graders/{grader_id}/logs/download:
    get:
      tags:
      - "graders"
      description: "Get the grader logs by submission ID"
      operationId: "DownloadGraderLogs"
      parameters:
      - name: "grader_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "GraderId"
      responses:
        "404":
          description: "Grader not found"
        "200":
          description: "Success"
  /graders/{grader_id}/unarchive:
    post:
      tags:
      - "graders"
      description: "Unarchive a grader"
      operationId: "UnarchiveGrader"
      parameters:
      - name: "grader_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "GraderId"
      responses:
        "404":
          description: "Grader not found"
        "403":
          description: "Grader not ready"
        "200":
          description: "Success"
  /organisations/:
    get:
      tags:
      - "organisations"
      description: "List all organisations"
      operationId: "ListOrganisations"
      parameters:
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Organisation"
    post:
      tags:
      - "organisations"
      description: "Create a new organisation"
      operationId: "CreateOrganisation"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/Organisation"
        x-exportParamName: "Payload"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "201":
          description: "Success"
          schema:
            $ref: "#/definitions/Organisation"
        "409":
          description: "Organisation already exists"
        "400":
          description: "Invalid inputs"
  /organisations/{organisation_id}:
    get:
      tags:
      - "organisations"
      description: "Get details of an organisation"
      operationId: "GetOrganisation"
      parameters:
      - name: "organisation_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "OrganisationId"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "404":
          description: "Organisation not found."
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Organisation"
    put:
      tags:
      - "organisations"
      description: "Update an Organisation"
      operationId: "UpdateOrganisation"
      parameters:
      - name: "organisation_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "OrganisationId"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/Organisation"
        x-exportParamName: "Payload"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "404":
          description: "Organisation not found"
        "400":
          description: "Invalid inputs"
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Organisation"
    delete:
      tags:
      - "organisations"
      description: "Delete an Organisation"
      operationId: "DeleteOrganisation"
      parameters:
      - name: "organisation_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "OrganisationId"
      responses:
        "404":
          description: "Organisation not found"
        "200":
          description: "Success"
  /organisations/{organisation_id}/addquota:
    put:
      tags:
      - "organisations"
      description: "Add or subtract quota for an organisation"
      operationId: "UpdateOrganisationQuota"
      parameters:
      - name: "organisation_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "OrganisationId"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/OrganisationQuota"
        x-exportParamName: "Payload"
      responses:
        "404":
          description: "Organisation not found."
        "200":
          description: "Success"
  /submissions/:
    get:
      tags:
      - "submissions"
      description: "List all submissions available"
      operationId: "ListSubmissions"
      parameters:
      - name: "per_page"
        in: "query"
        description: "Results to display per page"
        required: false
        type: "string"
        x-exportParamName: "PerPage"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "Page number"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      - name: "meta"
        in: "query"
        description: "Fetch submissions containing this meta value"
        required: false
        type: "string"
        x-exportParamName: "Meta"
        x-optionalDataType: "String"
      - name: "status"
        in: "query"
        description: "Fetch submissions with this status"
        required: false
        type: "string"
        x-exportParamName: "Status"
        x-optionalDataType: "String"
      - name: "grader_id"
        in: "query"
        description: "Fetch submissions for a grader"
        required: false
        type: "integer"
        x-exportParamName: "GraderId"
        x-optionalDataType: "Int32"
      - name: "user_id"
        in: "query"
        description: "Fetch submissions created by the user"
        required: false
        type: "integer"
        x-exportParamName: "UserId"
        x-optionalDataType: "Int32"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Submissions"
    post:
      tags:
      - "submissions"
      description: "Make a new submission"
      operationId: "CreateSubmission"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/Submissions"
        x-exportParamName: "Payload"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "403":
          description: "Grader not found or ready"
        "400":
          description: "Invalid inputs"
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Submissions"
  /submissions/retry:
    post:
      tags:
      - "submissions"
      description: "Retry the submissions with given IDs"
      operationId: "RetrySubmissions"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/SubmissionRetryInput"
        x-exportParamName: "Payload"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "404":
          description: "Submission not found"
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SubmissionRetry"
  /submissions/{submission_id}:
    get:
      tags:
      - "submissions"
      description: "Get details of a submission by its ID"
      operationId: "GetSubmission"
      parameters:
      - name: "submission_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "SubmissionId"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "404":
          description: "Submission not found"
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Submissions"
    delete:
      tags:
      - "submissions"
      description: "Stop evaluation of a submission and delete it"
      operationId: "DeleteSubmission"
      parameters:
      - name: "submission_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "SubmissionId"
      responses:
        "404":
          description: "Submission not found"
        "201":
          description: "Success"
  /submissions/{submission_id}/data:
    get:
      tags:
      - "submissions"
      description: "Get the submission data by submission ID"
      operationId: "GetSubmissionData"
      parameters:
      - name: "submission_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "SubmissionId"
      responses:
        "404":
          description: "Submission not found"
        "200":
          description: "Success"
  /submissions/{submission_id}/logs:
    get:
      tags:
      - "submissions"
      description: "Get submission logs from loki"
      operationId: "GetSubmissionLogs"
      parameters:
      - name: "submission_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "SubmissionId"
      - name: "step"
        in: "query"
        description: "Granularity of logs"
        required: false
        type: "integer"
        x-exportParamName: "Step"
        x-optionalDataType: "Int32"
      - name: "log_lines"
        in: "query"
        description: "Number of lines to fetch"
        required: false
        type: "integer"
        x-exportParamName: "LogLines"
        x-optionalDataType: "Int32"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "404":
          description: "Submission not found"
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SubmissionLogs"
  /submissions/{submission_id}/logs/download:
    get:
      tags:
      - "submissions"
      description: "Get the submission logs by submission ID"
      operationId: "DownloadSubmissionLogs"
      parameters:
      - name: "submission_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "SubmissionId"
      responses:
        "404":
          description: "Submission not found"
        "200":
          description: "Success"
  /users/:
    get:
      tags:
      - "users"
      description: "Get all user"
      operationId: "ListUsers"
      parameters:
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
    post:
      tags:
      - "users"
      description: "Create a new user"
      operationId: "CreateUser"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/User"
        x-exportParamName: "Payload"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "400":
          description: "Invalid inputs"
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/User"
  /users/{user_id}:
    get:
      tags:
      - "users"
      description: "Get information of a user"
      operationId: "GetUser"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "UserId"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "404":
          description: "User not found."
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/User"
    put:
      tags:
      - "users"
      description: "Update a user"
      operationId: "UpdateUser"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "UserId"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/User"
        x-exportParamName: "Payload"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "404":
          description: "User not found"
        "400":
          description: "Invalid inputs"
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/User"
    delete:
      tags:
      - "users"
      description: "Delete a user"
      operationId: "DeleteUser"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "UserId"
      responses:
        "404":
          description: "User not found"
        "200":
          description: "Success"
  /users/{user_id}/addquota:
    put:
      tags:
      - "users"
      description: "Add or subtract quota for a user"
      operationId: "UpdateUserQuota"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "UserId"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/UserQuota"
        x-exportParamName: "Payload"
      responses:
        "404":
          description: "User not found"
        "200":
          description: "Success"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "AUTHORIZATION"
    in: "header"
definitions:
  Login:
    type: "object"
    required:
    - "email"
    - "password"
    properties:
      email:
        type: "string"
        description: "Email address of the user"
      password:
        type: "string"
        description: "Password corresponding to the Email address"
    example:
      password: "password"
      email: "email"
  AuthResponse:
    type: "object"
    properties:
      Authorization:
        type: "string"
        description: "API Authorization token that should be used in the headers"
    example:
      Authorization: "Authorization"
  AuthLogout:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Logout message"
    example:
      message: "message"
  Grader:
    type: "object"
    required:
    - "evaluator_repo"
    properties:
      id:
        type: "integer"
        description: "ID"
        readOnly: true
      created:
        type: "string"
        format: "date-time"
        description: "Creation time"
        readOnly: true
      updated:
        type: "string"
        format: "date-time"
        description: "Last updation time"
        readOnly: true
      archived:
        type: "boolean"
        description: "Grader archival status"
        readOnly: true
      dataset:
        type: "object"
        description: "Dataset metadata"
        readOnly: true
        properties: {}
      cluster_id:
        type: "integer"
        description: "Cluster to run the grader on"
      description:
        type: "string"
        description: "Description of the grader"
        readOnly: true
      workflow_spec:
        type: "object"
        description: "Argo workflow template spec"
        readOnly: true
        properties: {}
      evaluator_repo:
        type: "string"
        description: "Git URL of the repository containing the code that will be used\
          \ for the evaluation"
      evaluator_repo_tag:
        type: "string"
        description: "Git branch/tag that should be used with the evaluator repository."
      name:
        type: "string"
        description: "Name of the grader"
        readOnly: true
      notifications:
        type: "string"
        description: "Notifications available for the grader."
        readOnly: true
      logs:
        type: "string"
        description: "Logs from argo workflow"
        readOnly: true
      meta:
        type: "string"
        description: "Additional meta data of the grader"
      status:
        type: "string"
        description: "Status of the grader - True if it ready, False otherwise"
        readOnly: true
      secrets:
        type: "object"
        description: "List of key:value pair of secrets that will be replace `{key}`\
          \ in aicrowd.yaml"
        properties: {}
      wf_name:
        type: "string"
        description: "Name of the workflow used to setup grader"
        readOnly: true
      allowed_extensions:
        type: "object"
        description: "Allowed extensions for the grader"
        readOnly: true
        properties: {}
      workflow_priority:
        type: "integer"
        description: "Workflow priority to assign"
      config_path:
        type: "string"
        description: "Path to grader configuration (default: aicrowd.yaml)"
      docker_repo:
        type: "string"
        description: "Docker repo to use for grader images"
      context_dir:
        type: "string"
        description: "Context for grader files inside the repository"
      user_id:
        type: "integer"
        description: "User ID"
        readOnly: true
      organisation_id:
        type: "integer"
        description: "Organisation ID"
        readOnly: true
    example:
      evaluator_repo: "evaluator_repo"
      docker_repo: "docker_repo"
      evaluator_repo_tag: "evaluator_repo_tag"
      created: "2000-01-23T04:56:07.000+00:00"
      description: "description"
      workflow_spec: "{}"
      config_path: "config_path"
      secrets: "{}"
      archived: true
      organisation_id: 5
      cluster_id: 6
      user_id: 5
      meta: "meta"
      name: "name"
      wf_name: "wf_name"
      id: 0
      allowed_extensions: "{}"
      workflow_priority: 1
      updated: "2000-01-23T04:56:07.000+00:00"
      dataset: "{}"
      logs: "logs"
      notifications: "notifications"
      context_dir: "context_dir"
      status: "status"
    x-mask: "{id,created,updated,archived,dataset,cluster_id,description,evaluator_repo,evaluator_repo_tag,name,status,allowed_extensions,deleted,workflow_priority,config_path,docker_repo,context_dir,user_id,organisation_id}"
  GraderMeta:
    type: "object"
    properties:
      dataset:
        type: "object"
        description: "Dataset metadata"
        properties: {}
      notifications:
        type: "object"
        description: "Notifications available for the grader"
        properties: {}
      name:
        type: "string"
        description: "Name of the grader"
      description:
        type: "string"
        description: "Description of the grader"
      cluster_id:
        type: "integer"
        description: "Cluster to run the grader on"
      meta:
        type: "string"
        description: "Additional meta data of the grader"
    example:
      cluster_id: 0
      meta: "meta"
      name: "name"
      description: "description"
      dataset: "{}"
      notifications: "{}"
  GraderLogs:
    type: "object"
    properties:
      status:
        type: "string"
        description: "Status of the operation"
      data:
        type: "object"
        properties: {}
    example:
      data: "{}"
      status: "status"
  Submissions:
    type: "object"
    required:
    - "grader_id"
    properties:
      id:
        type: "integer"
        description: "ID"
        readOnly: true
      created:
        type: "string"
        format: "date-time"
        description: "Creation time"
        readOnly: true
      updated:
        type: "string"
        format: "date-time"
        description: "Last updation time"
        readOnly: true
      grader_id:
        type: "integer"
        description: "Grader identifier"
      submission_data:
        type: "object"
        description: "URL to the submission code"
        properties: {}
      status:
        type: "string"
        description: "Current status of the submission"
        readOnly: true
      output:
        type: "string"
        description: "S3 link of the output (available after the evaluation)"
        readOnly: true
      additional_outputs:
        type: "object"
        description: "Array of any additional outputs"
        readOnly: true
        properties: {}
      logs:
        type: "string"
        description: "S3 link of the STDOUT of the evaluation"
        readOnly: true
      started:
        type: "string"
        format: "date-time"
        description: "Evaluation start time"
        readOnly: true
      ended:
        type: "string"
        format: "date-time"
        description: "Evaluation end time"
        readOnly: true
      meta:
        type: "string"
        description: "Additional meta data of the grader"
      wf_name:
        type: "string"
        description: "Name of the workflow used to evaluate submission"
        readOnly: true
      workflow_priority:
        type: "integer"
        description: "Workflow priority to assign"
      minimal_run:
        type: "boolean"
        description: "Remove steps like build-image, services, etc from the workflow.\
          \ Only valid for retries"
      user_id:
        type: "integer"
        description: "User ID"
        readOnly: true
      organisation_id:
        type: "integer"
        description: "Organisation ID"
        readOnly: true
    example:
      minimal_run: true
      created: "2000-01-23T04:56:07.000+00:00"
      started: "2000-01-23T04:56:07.000+00:00"
      grader_id: 6
      submission_data: "{}"
      additional_outputs: "{}"
      output: "output"
      organisation_id: 5
      user_id: 5
      meta: "meta"
      ended: "2000-01-23T04:56:07.000+00:00"
      wf_name: "wf_name"
      id: 0
      workflow_priority: 1
      updated: "2000-01-23T04:56:07.000+00:00"
      logs: "logs"
      status: "status"
    x-mask: "{id,created,updated,grader_id,submission_data,status,output,additional_outputs,started,ended,meta,deleted,workflow_priority,minimal_run,user_id,organisation_id}"
  SubmissionLogs:
    type: "object"
    properties:
      status:
        type: "string"
        description: "Status of the operation"
      data:
        type: "object"
        properties: {}
    example:
      data: "{}"
      status: "status"
  SubmissionRetryInput:
    type: "object"
    properties:
      submissions:
        type: "array"
        description: "List of submission IDs to retry"
        items:
          type: "integer"
    example:
      submissions:
      - 0
      - 0
  SubmissionRetry:
    type: "object"
    properties:
      queued:
        type: "object"
        description: "List of submission IDs queued for evaluation"
        properties: {}
      failed:
        type: "array"
        description: "List of submission IDs failed to get queued"
        items:
          type: "integer"
    example:
      queued: "{}"
      failed:
      - 0
      - 0
  Cluster:
    type: "object"
    required:
    - "auth_token"
    - "docker_username"
    - "remote_address"
    properties:
      id:
        type: "integer"
        description: "ID"
        readOnly: true
      created:
        type: "string"
        format: "date-time"
        description: "Creation time"
        readOnly: true
      updated:
        type: "string"
        format: "date-time"
        description: "Last updation time"
        readOnly: true
      remote_address:
        type: "string"
        description: "Remote address used to connect to the cluster"
      auth_token:
        type: "string"
        description: "Authentication needed for the cluster"
      docker_username:
        type: "string"
        description: "Docker registry username"
      docker_registry:
        type: "string"
        description: "Docker registry URL. Dockerhub is used by default."
      namespace:
        type: "string"
        description: "Kubernetes namespace to run the workflows in"
      storage_class:
        type: "string"
        description: "Storage class to use for datasets"
      status:
        type: "boolean"
        description: "Readiness of the cluster"
        readOnly: true
      wf_name:
        type: "string"
        description: "Name of the workflow used to setup grader"
        readOnly: true
      argo_host:
        type: "string"
        description: "External IP exposed by LoadBalancer Service of argo-server deployment"
        readOnly: true
      argo_token:
        type: "string"
        description: "Argo server token required for authentication"
      minio_user:
        type: "string"
        description: "Minio user to give file access to"
      s3_policy:
        type: "string"
        description: "Minio s3 policy"
      user_id:
        type: "integer"
        description: "User ID"
        readOnly: true
      organisation_id:
        type: "integer"
        description: "Organisation ID"
        readOnly: true
    example:
      storage_class: "storage_class"
      argo_host: "argo_host"
      created: "2000-01-23T04:56:07.000+00:00"
      s3_policy: "s3_policy"
      docker_registry: "docker_registry"
      remote_address: "remote_address"
      organisation_id: 1
      minio_user: "minio_user"
      user_id: 6
      namespace: "namespace"
      wf_name: "wf_name"
      id: 0
      auth_token: "auth_token"
      docker_username: "docker_username"
      updated: "2000-01-23T04:56:07.000+00:00"
      argo_token: "argo_token"
      status: true
    x-mask: "{id,created,updated,remote_address,docker_username,namespace,storage_class,status,argo_host,deleted,minio_user,s3_policy,user_id,organisation_id}"
  Organisation:
    type: "object"
    required:
    - "name"
    - "poc_email"
    properties:
      id:
        type: "integer"
        description: "ID"
        readOnly: true
      name:
        type: "string"
        description: "Organisation Name"
      poc_email:
        type: "string"
        description: "Point of contact email"
      created_on:
        type: "string"
        format: "date-time"
        description: "Creation Time"
        readOnly: true
      total_quota:
        type: "integer"
        description: "Total assigned evaluation quota"
        readOnly: true
      quota:
        type: "integer"
        description: "Available evaluation quota"
        readOnly: true
    example:
      total_quota: 6
      created_on: "2000-01-23T04:56:07.000+00:00"
      quota: 1
      name: "name"
      id: 0
      poc_email: "poc_email"
  OrganisationQuota:
    type: "object"
    required:
    - "quota"
    properties:
      quota:
        type: "integer"
        description: "Quota to be added or reduced"
    example:
      quota: 0
  User:
    type: "object"
    required:
    - "email"
    - "organisation_id"
    - "password"
    properties:
      id:
        type: "integer"
        description: "ID"
        readOnly: true
      email:
        type: "string"
        description: "Email"
      admin:
        type: "boolean"
        description: "Admin Boolean"
      created_on:
        type: "string"
        format: "date-time"
        description: "Creation Time"
        readOnly: true
      password_hash:
        type: "string"
        description: "Hashed Password"
        readOnly: true
      total_quota:
        type: "integer"
        description: "Total assigned evaluation quota"
        readOnly: true
      quota:
        type: "integer"
        description: "Available evaluation quota"
        readOnly: true
      organisation_id:
        type: "integer"
        description: "Organisation identifier"
      password:
        type: "string"
        description: "user password"
    example:
      organisation_id: 5
      password: "password"
      total_quota: 6
      created_on: "2000-01-23T04:56:07.000+00:00"
      password_hash: "password_hash"
      quota: 1
      admin: true
      id: 0
      email: "email"
  UserQuota:
    type: "object"
    required:
    - "quota"
    properties:
      quota:
        type: "integer"
        description: "Quota to be added or reduced"
    example:
      quota: 0
responses:
  ParseError:
    description: "When a mask can't be parsed"
  MaskError:
    description: "When any error occurs on mask"
