---
swagger: "2.0"
info:
  description: "API to create and evaluate custom challenges"
  version: "1.0.0"
  title: "Evaluations API"
basePath: "/v1"
tags:
- name: "auth"
  description: "authentication related operations"
- name: "clusters"
  description: "Controller for cluster."
- name: "argo"
  description: "Controller for argo feedback."
- name: "graders"
  description: "Controller for grader."
- name: "organisations"
  description: "Controller for organisation."
- name: "submissions"
  description: "Controller for submissions."
- name: "users"
  description: "Controller for user."
consumes:
- "application/json"
produces:
- "application/json"
security:
- api_key: []
paths:
  /argo/graders/{grader_id}:
    post:
      tags:
      - "argo"
      description: "Update the grader details"
      operationId: "post_grader_feedback_dao"
      parameters:
      - name: "grader_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "GraderId"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/GraderFeedback"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Bad inputs"
        "404":
          description: "Grader not found"
  /argo/submissions/{submission_id}:
    post:
      tags:
      - "argo"
      description: "Update the submission details"
      operationId: "post_submission_feedback_dao"
      parameters:
      - name: "submission_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "SubmissionId"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/SubmissionFeedback"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Bad inputs"
        "404":
          description: "Grader not found"
  /argo/{model_name}/{object_id}:
    post:
      tags:
      - "argo"
      description: "Update the status of an object"
      operationId: "post_generic_feedback_contract"
      parameters:
      - name: "model_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ModelName"
      - name: "object_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "ObjectId"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/GenericFeedback"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Bad inputs"
        "404":
          description: "Object not found"
  /auth/login:
    post:
      tags:
      - "auth"
      operationId: "user login"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/Login"
        x-exportParamName: "Payload"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AuthResponse"
        "401":
          description: "Wrong username or password"
      security: []
  /auth/logout:
    post:
      tags:
      - "auth"
      operationId: "logout a user"
      parameters:
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AuthLogout"
  /clusters/:
    get:
      tags:
      - "clusters"
      description: "Get all clusters"
      operationId: "get_grader_list_dao"
      parameters:
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Cluster"
    post:
      tags:
      - "clusters"
      description: "Add a new cluster"
      operationId: "post_grader_list_dao"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/Cluster"
        x-exportParamName: "Payload"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Cluster"
        "400":
          description: "Invalid inputs"
  /clusters/{cluster_id}:
    get:
      tags:
      - "clusters"
      description: "Get information of a cluster"
      operationId: "get_cluster_dao"
      parameters:
      - name: "cluster_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "ClusterId"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Cluster"
        "404":
          description: "Cluster not found"
    delete:
      tags:
      - "clusters"
      description: "Delete a cluster"
      operationId: "delete_cluster_dao"
      parameters:
      - name: "cluster_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "ClusterId"
      responses:
        "200":
          description: "Success"
        "404":
          description: "Cluster not found"
  /graders/:
    get:
      tags:
      - "graders"
      description: "Get all grader"
      operationId: "get_grader_list_dao"
      parameters:
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Grader"
    post:
      tags:
      - "graders"
      description: "Create a new grader"
      operationId: "post_grader_list_dao"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/Grader"
        x-exportParamName: "Payload"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Grader"
        "400":
          description: "Wrong code access mode"
        "403":
          description: "Cluster not ready"
        "404":
          description: "Cluster not found"
  /graders/{grader_id}:
    get:
      tags:
      - "graders"
      description: "Get information of a grader"
      operationId: "get_grader_dao"
      parameters:
      - name: "grader_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "GraderId"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Grader"
        "404":
          description: "Grader not found"
    put:
      tags:
      - "graders"
      description: "Update a grader"
      operationId: "put_grader_dao"
      parameters:
      - name: "grader_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "GraderId"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/Grader"
        x-exportParamName: "Payload"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Grader"
        "400":
          description: "Invalid inputs"
        "404":
          description: "Grader not found"
    delete:
      tags:
      - "graders"
      description: "Delete a grader"
      operationId: "delete_grader_dao"
      parameters:
      - name: "grader_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "GraderId"
      responses:
        "200":
          description: "Success"
        "404":
          description: "Grader not found"
  /organisations/:
    get:
      tags:
      - "organisations"
      description: "Get all organisations"
      operationId: "get_organisation_list_dao"
      parameters:
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Organisation"
    post:
      tags:
      - "organisations"
      description: "Create a new organisation"
      operationId: "post_organisation_list_dao"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/Organisation"
        x-exportParamName: "Payload"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "201":
          description: "Success"
          schema:
            $ref: "#/definitions/Organisation"
        "400":
          description: "Invalid inputs"
        "409":
          description: "Organisation already exists"
  /organisations/addquota/{organisation_id}:
    put:
      tags:
      - "organisations"
      description: "Add or subtract quota for an organisation"
      operationId: "put_quota_dao"
      parameters:
      - name: "organisation_id"
        in: "path"
        description: "Organisation identifier"
        required: true
        type: "integer"
        x-exportParamName: "OrganisationId"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/OrganisationQuota"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
        "404":
          description: "Organisation not found."
  /organisations/{organisation_id}:
    get:
      tags:
      - "organisations"
      description: "Get information of an organisation"
      operationId: "get_organisation_dao"
      parameters:
      - name: "organisation_id"
        in: "path"
        description: "Organisation identifier"
        required: true
        type: "integer"
        x-exportParamName: "OrganisationId"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Organisation"
        "404":
          description: "Organisation not found."
    put:
      tags:
      - "organisations"
      description: "Update an Organisation"
      operationId: "put_organisation_dao"
      parameters:
      - name: "organisation_id"
        in: "path"
        description: "Organisation identifier"
        required: true
        type: "integer"
        x-exportParamName: "OrganisationId"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/Organisation"
        x-exportParamName: "Payload"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Organisation"
        "400":
          description: "Invalid inputs"
        "404":
          description: "Organisation not found"
    delete:
      tags:
      - "organisations"
      description: "Delete an Organisation"
      operationId: "delete_organisation_dao"
      parameters:
      - name: "organisation_id"
        in: "path"
        description: "Organisation identifier"
        required: true
        type: "integer"
        x-exportParamName: "OrganisationId"
      responses:
        "200":
          description: "Success"
        "404":
          description: "Organisation not found"
  /submissions/:
    get:
      tags:
      - "submissions"
      description: "Get all submissions"
      operationId: "get_submission_list_dao"
      parameters:
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Submissions"
    post:
      tags:
      - "submissions"
      description: "Make a new submission"
      operationId: "post_submission_list_dao"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/Submissions"
        x-exportParamName: "Payload"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Submissions"
        "400":
          description: "Invalid inputs"
        "403":
          description: "Grader not found or ready"
  /submissions/{submission_id}:
    get:
      tags:
      - "submissions"
      description: "Get details of a submission"
      operationId: "get_submission_dao"
      parameters:
      - name: "submission_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "SubmissionId"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Submissions"
        "404":
          description: "Submission not found"
    delete:
      tags:
      - "submissions"
      description: "Stop evaluation of a submission"
      operationId: "delete_submission_dao"
      parameters:
      - name: "submission_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "SubmissionId"
      responses:
        "201":
          description: "Success"
        "404":
          description: "Submission not found"
  /users/:
    get:
      tags:
      - "users"
      description: "Get all user"
      operationId: "get_user_list_dao"
      parameters:
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
    post:
      tags:
      - "users"
      description: "Create a new user"
      operationId: "post_user_list_dao"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/User"
        x-exportParamName: "Payload"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid inputs"
  /users/addquota/{user_id}:
    put:
      tags:
      - "users"
      description: "Add or subtract quota for a user"
      operationId: "put_quota_dao"
      parameters:
      - name: "user_id"
        in: "path"
        description: "User identifier"
        required: true
        type: "integer"
        x-exportParamName: "UserId"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/UserQuota"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
        "404":
          description: "User not found"
  /users/{user_id}:
    get:
      tags:
      - "users"
      description: "Get information of a user"
      operationId: "get_user_dao"
      parameters:
      - name: "user_id"
        in: "path"
        description: "User identifier"
        required: true
        type: "integer"
        x-exportParamName: "UserId"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/User"
        "404":
          description: "User not found."
    put:
      tags:
      - "users"
      description: "Update a user"
      operationId: "put_user_dao"
      parameters:
      - name: "user_id"
        in: "path"
        description: "User identifier"
        required: true
        type: "integer"
        x-exportParamName: "UserId"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/User"
        x-exportParamName: "Payload"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid inputs"
        "404":
          description: "User not found"
    delete:
      tags:
      - "users"
      description: "Delete a user"
      operationId: "delete_user_dao"
      parameters:
      - name: "user_id"
        in: "path"
        description: "User identifier"
        required: true
        type: "integer"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: "Success"
        "404":
          description: "User not found"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "AUTHORIZATION"
    in: "header"
definitions:
  Login:
    type: "object"
    required:
    - "email"
    - "password"
    properties:
      email:
        type: "string"
        description: "The email address"
      password:
        type: "string"
        description: "The user password "
    example:
      password: "password"
      email: "email"
  AuthResponse:
    type: "object"
    properties:
      Authorization:
        type: "string"
        description: "Authorization token that should be used in the headers"
    example:
      Authorization: "Authorization"
  AuthLogout:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Logout message"
    example:
      message: "message"
  Cluster:
    type: "object"
    required:
    - "auth_token"
    - "remote_address"
    properties:
      id:
        type: "integer"
        description: "ID"
        readOnly: true
      created:
        type: "string"
        format: "date-time"
        description: "Creation time"
        readOnly: true
      updated:
        type: "string"
        format: "date-time"
        description: "Last updation time"
        readOnly: true
      remote_address:
        type: "string"
        description: "Remote address used to connect to the cluster"
      auth_token:
        type: "string"
        description: "Authentication needed for the cluster"
      storage_class:
        type: "string"
        description: "Storage class to use for datasets"
      status:
        type: "boolean"
        description: "Readiness of the cluster"
        readOnly: true
      meta:
        type: "object"
        description: "Additional metadata"
        readOnly: true
        properties: {}
      user_id:
        type: "integer"
        description: "User ID"
        readOnly: true
      organisation_id:
        type: "integer"
        description: "Organisation ID"
        readOnly: true
    example:
      organisation_id: 1
      storage_class: "storage_class"
      user_id: 6
      created: "2000-01-23T04:56:07.000+00:00"
      meta: "{}"
      id: 0
      remote_address: "remote_address"
      auth_token: "auth_token"
      updated: "2000-01-23T04:56:07.000+00:00"
      status: true
    x-mask: "{id,created,updated,remote_address,storage_class,status,deleted,user_id,organisation_id}"
  GraderFeedback:
    type: "object"
    required:
    - "status"
    - "workflow_spec"
    properties:
      status:
        type: "boolean"
        description: "Status of the grader"
      workflow_spec:
        type: "string"
        description: "Serialized YAML workflow spec"
    example:
      workflow_spec: "workflow_spec"
      status: true
  SubmissionFeedback:
    type: "object"
    required:
    - "logs"
    - "outputs"
    - "score"
    - "status"
    properties:
      status:
        type: "string"
        description: "Status of the submission"
      outputs:
        type: "string"
        description: "S3 link of the outputs"
      score:
        type: "number"
        description: "Additional outputs"
      logs:
        type: "string"
        description: "Output on stdout for run-evaluator.run-submitted-code step"
    example:
      outputs: "outputs"
      score: 0.80082819046101150206595775671303272247314453125
      logs: "logs"
      status: "status"
  GenericFeedback:
    type: "object"
    required:
    - "status"
    properties:
      status:
        type: "boolean"
        description: "Status of the operation"
      meta:
        type: "object"
        description: "Additional metadata to add"
        properties: {}
    example:
      meta: "{}"
      status: true
  Grader:
    type: "object"
    required:
    - "code_access_auth_key"
    - "code_access_mode"
    - "docker_password"
    - "docker_username"
    - "evaluation_code"
    properties:
      id:
        type: "integer"
        description: "ID"
        readOnly: true
      created:
        type: "string"
        format: "date-time"
        description: "Creation time"
        readOnly: true
      updated:
        type: "string"
        format: "date-time"
        description: "Last updation time"
        readOnly: true
      dataset_url:
        type: "string"
        description: "S3 link of the Dataset"
      code_access_mode:
        type: "string"
        description: "git/http"
      code_access_auth_key:
        type: "string"
        description: "SSH private key if using git or HTTP Auth token if using HTTP\
          \ to access the submission code"
      cluster_id:
        type: "integer"
        description: "Cluster to run the grader on"
      docker_username:
        type: "string"
        description: "Docker registry username"
      docker_password:
        type: "string"
        description: "Docker registry password"
      docker_registry:
        type: "string"
        description: "Docker registry URL. Dockerhub is used by default."
      workflow_spec:
        type: "object"
        description: "Argo workflow template spec"
        readOnly: true
        properties: {}
      evaluation_code:
        type: "string"
        description: "S3 link to the zip file containing the code that will be used\
          \ for the evaluation"
      storage_capacity:
        type: "string"
        description: "Size of the dataset partition to request. Please provide at\
          \ least 2x of the size of the dataset."
      meta:
        type: "object"
        description: "Additional meta data of the grader"
        readOnly: true
        properties: {}
      status:
        type: "boolean"
        description: "Status of the grader - True if it ready, False otherwise"
        readOnly: true
      user_id:
        type: "integer"
        description: "User ID"
        readOnly: true
      organisation_id:
        type: "integer"
        description: "Organisation ID"
        readOnly: true
    example:
      storage_capacity: "storage_capacity"
      created: "2000-01-23T04:56:07.000+00:00"
      docker_registry: "docker_registry"
      workflow_spec: "{}"
      code_access_mode: "code_access_mode"
      organisation_id: 5
      cluster_id: 6
      docker_password: "docker_password"
      code_access_auth_key: "code_access_auth_key"
      user_id: 1
      meta: "{}"
      id: 0
      dataset_url: "dataset_url"
      docker_username: "docker_username"
      evaluation_code: "evaluation_code"
      updated: "2000-01-23T04:56:07.000+00:00"
      status: true
    x-mask: "{id,created,updated,dataset_url,code_access_mode,cluster_id,docker_username,docker_password,docker_registry,evaluation_code,storage_capacity,status,deleted,user_id,organisation_id}"
  Organisation:
    type: "object"
    required:
    - "name"
    - "poc_email"
    properties:
      id:
        type: "integer"
        description: "ID"
        readOnly: true
      name:
        type: "string"
        description: "Organisation Name"
      poc_email:
        type: "string"
        description: "Point of contact email"
      created_on:
        type: "string"
        format: "date-time"
        description: "Creation Time"
        readOnly: true
      total_quota:
        type: "integer"
        description: "Total assigned evaluation quota"
        readOnly: true
      quota:
        type: "integer"
        description: "Available evaluation quota"
        readOnly: true
    example:
      total_quota: 6
      created_on: "2000-01-23T04:56:07.000+00:00"
      quota: 1
      name: "name"
      id: 0
      poc_email: "poc_email"
  OrganisationQuota:
    type: "object"
    required:
    - "quota"
    properties:
      quota:
        type: "integer"
        description: "Quota to be added or reduced"
    example:
      quota: 0
  Submissions:
    type: "object"
    required:
    - "grader_id"
    - "submission_code"
    properties:
      id:
        type: "integer"
        description: "ID"
        readOnly: true
      created:
        type: "string"
        format: "date-time"
        description: "Creation time"
        readOnly: true
      updated:
        type: "string"
        format: "date-time"
        description: "Last updation time"
        readOnly: true
      participant_id:
        type: "integer"
        description: "Participant identifier"
      round_id:
        type: "integer"
        description: "Round identifier"
      grader_id:
        type: "integer"
        description: "Grader identifier"
      submission_code:
        type: "string"
        description: "URL to the submission code"
      status:
        type: "string"
        description: "Current status of the submission"
        readOnly: true
      output:
        type: "string"
        description: "S3 link of the output (available after the evaluation)"
        readOnly: true
      additional_outputs:
        type: "string"
        description: "Array of any additional outputs"
        readOnly: true
      logs:
        type: "string"
        description: "S3 link of the STDOUT of the evaluation"
        readOnly: true
      started:
        type: "string"
        format: "date-time"
        description: "Evaluation start time"
        readOnly: true
      ended:
        type: "string"
        format: "date-time"
        description: "Evaluation end time"
        readOnly: true
      meta:
        type: "object"
        description: "Additional meta-data"
        readOnly: true
        properties: {}
      user_id:
        type: "integer"
        description: "User ID"
        readOnly: true
      organisation_id:
        type: "integer"
        description: "Organisation ID"
        readOnly: true
    example:
      created: "2000-01-23T04:56:07.000+00:00"
      participant_id: 6
      started: "2000-01-23T04:56:07.000+00:00"
      grader_id: 5
      additional_outputs: "additional_outputs"
      submission_code: "submission_code"
      output: "output"
      round_id: 1
      organisation_id: 2
      user_id: 5
      meta: "{}"
      ended: "2000-01-23T04:56:07.000+00:00"
      id: 0
      updated: "2000-01-23T04:56:07.000+00:00"
      logs: "logs"
      status: "status"
    x-mask: "{id,created,updated,participant_id,round_id,grader_id,submission_code,status,output,additional_outputs,logs,started,ended,deleted,user_id,organisation_id}"
  User:
    type: "object"
    required:
    - "email"
    - "organisation_id"
    - "password"
    properties:
      id:
        type: "integer"
        description: "ID"
        readOnly: true
      email:
        type: "string"
        description: "Email"
      admin:
        type: "boolean"
        description: "Admin Boolean"
      created_on:
        type: "string"
        format: "date-time"
        description: "Creation Time"
        readOnly: true
      password_hash:
        type: "string"
        description: "Hashed Password"
        readOnly: true
      total_quota:
        type: "integer"
        description: "Total assigned evaluation quota"
        readOnly: true
      quota:
        type: "integer"
        description: "Available evaluation quota"
        readOnly: true
      organisation_id:
        type: "integer"
        description: "Organisation identifier"
      password:
        type: "string"
        description: "user password"
    example:
      organisation_id: 5
      password: "password"
      total_quota: 6
      created_on: "2000-01-23T04:56:07.000+00:00"
      password_hash: "password_hash"
      quota: 1
      admin: true
      id: 0
      email: "email"
  UserQuota:
    type: "object"
    required:
    - "quota"
    properties:
      quota:
        type: "integer"
        description: "Quota to be added or reduced"
    example:
      quota: 0
responses:
  MaskError:
    description: "When any error occurs on mask"
  ParseError:
    description: "When a mask can't be parsed"
