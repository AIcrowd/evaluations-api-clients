/*
 * AIcrowd Evaluations API
 * API to create and evaluate custom challenges on AIcrowd!
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aicrowd.evaluations.api;

import com.aicrowd.evaluations.ApiException;
import com.aicrowd.evaluations.models.Grader;
import com.aicrowd.evaluations.models.GraderLogs;
import com.aicrowd.evaluations.models.GraderMeta;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GradersApi
 */
@Ignore
public class GradersApiTest {

    private final GradersApi api = new GradersApi();

    
    /**
     * 
     *
     * Archive a grader
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void archiveGraderTest() throws ApiException {
        Integer graderId = null;
        api.archiveGrader(graderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new grader
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGraderTest() throws ApiException {
        Grader payload = null;
        String xFields = null;
        Grader response = api.createGrader(payload, xFields);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a grader by its ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteGraderTest() throws ApiException {
        Integer graderId = null;
        api.deleteGrader(graderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the grader logs by submission ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadGraderLogsTest() throws ApiException {
        Integer graderId = null;
        api.downloadGraderLogs(graderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get details of a grader by its ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGraderTest() throws ApiException {
        Integer graderId = null;
        String xFields = null;
        Grader response = api.getGrader(graderId, xFields);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get grader logs from loki
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGraderLogsTest() throws ApiException {
        Integer graderId = null;
        Integer step = null;
        Integer logLines = null;
        String xFields = null;
        GraderLogs response = api.getGraderLogs(graderId, step, logLines, xFields);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all graders available
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listGradersTest() throws ApiException {
        String perPage = null;
        String page = null;
        String meta = null;
        String name = null;
        String status = null;
        Integer userId = null;
        String xFields = null;
        List<Grader> response = api.listGraders(perPage, page, meta, name, status, userId, xFields);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Unarchive a grader
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unarchiveGraderTest() throws ApiException {
        Integer graderId = null;
        api.unarchiveGrader(graderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update meta details of a grader by its ID. Warning: There is no data validation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateGraderTest() throws ApiException {
        Integer graderId = null;
        GraderMeta payload = null;
        String xFields = null;
        Grader response = api.updateGrader(graderId, payload, xFields);

        // TODO: test validations
    }
    
}
