/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.ArgoApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * API to create and evaluate custom challenges on AIcrowd!
 * Version: 1.0.0
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.ArgoApi');

goog.require('API.Client.GenericFeedback');
goog.require('API.Client.GraderFeedback');
goog.require('API.Client.SubmissionFeedback');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.ArgoApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('ArgoApiBasePath') ?
                   /** @type {!string} */ ($injector.get('ArgoApiBasePath')) :
                   'https://localhost/v1';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('ArgoApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('ArgoApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.ArgoApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * Update the status of an object
 * @param {!string} modelName 
 * @param {!number} objectId 
 * @param {!GenericFeedback} payload 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ArgoApi.prototype.postGenericFeedbackContract = function(modelName, objectId, payload, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/argo/{model_name}/{object_id}'
      .replace('{' + 'model_name' + '}', String(modelName))
      .replace('{' + 'object_id' + '}', String(objectId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'modelName' is set
  if (!modelName) {
    throw new Error('Missing required parameter modelName when calling postGenericFeedbackContract');
  }
  // verify required parameter 'objectId' is set
  if (!objectId) {
    throw new Error('Missing required parameter objectId when calling postGenericFeedbackContract');
  }
  // verify required parameter 'payload' is set
  if (!payload) {
    throw new Error('Missing required parameter payload when calling postGenericFeedbackContract');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: payload,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Update the grader details
 * @param {!number} graderId 
 * @param {!GraderFeedback} payload 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ArgoApi.prototype.postGraderFeedbackDao = function(graderId, payload, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/argo/graders/{grader_id}'
      .replace('{' + 'grader_id' + '}', String(graderId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'graderId' is set
  if (!graderId) {
    throw new Error('Missing required parameter graderId when calling postGraderFeedbackDao');
  }
  // verify required parameter 'payload' is set
  if (!payload) {
    throw new Error('Missing required parameter payload when calling postGraderFeedbackDao');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: payload,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Update the submission details
 * @param {!number} submissionId 
 * @param {!SubmissionFeedback} payload 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ArgoApi.prototype.postSubmissionFeedbackDao = function(submissionId, payload, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/argo/submissions/{submission_id}'
      .replace('{' + 'submission_id' + '}', String(submissionId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'submissionId' is set
  if (!submissionId) {
    throw new Error('Missing required parameter submissionId when calling postSubmissionFeedbackDao');
  }
  // verify required parameter 'payload' is set
  if (!payload) {
    throw new Error('Missing required parameter payload when calling postSubmissionFeedbackDao');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: payload,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
