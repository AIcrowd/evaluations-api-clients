/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.SubmissionsApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * API to create and evaluate custom challenges on AIcrowd!
 * Version: 1.0.0
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.SubmissionsApi');

goog.require('API.Client.SubmissionLogs');
goog.require('API.Client.SubmissionRetry');
goog.require('API.Client.SubmissionRetryInput');
goog.require('API.Client.Submissions');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.SubmissionsApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('SubmissionsApiBasePath') ?
                   /** @type {!string} */ ($injector.get('SubmissionsApiBasePath')) :
                   'https://localhost/v1';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('SubmissionsApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('SubmissionsApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.SubmissionsApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * Make a new submission
 * @param {!Submissions} payload 
 * @param {!string=} opt_xFields An optional fields mask
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Submissions>}
 */
API.Client.SubmissionsApi.prototype.createSubmission = function(payload, opt_xFields, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/submissions/';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'payload' is set
  if (!payload) {
    throw new Error('Missing required parameter payload when calling createSubmission');
  }
  headerParams['X-Fields'] = opt_xFields;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: payload,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Stop evaluation of a submission and delete it
 * @param {!number} submissionId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SubmissionsApi.prototype.deleteSubmission = function(submissionId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/submissions/{submission_id}'
      .replace('{' + 'submission_id' + '}', String(submissionId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'submissionId' is set
  if (!submissionId) {
    throw new Error('Missing required parameter submissionId when calling deleteSubmission');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get the submission logs by submission ID
 * @param {!number} submissionId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SubmissionsApi.prototype.downloadSubmissionLogs = function(submissionId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/submissions/{submission_id}/logs/download'
      .replace('{' + 'submission_id' + '}', String(submissionId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'submissionId' is set
  if (!submissionId) {
    throw new Error('Missing required parameter submissionId when calling downloadSubmissionLogs');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get details of a submission by its ID
 * @param {!number} submissionId 
 * @param {!string=} opt_xFields An optional fields mask
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Submissions>}
 */
API.Client.SubmissionsApi.prototype.getSubmission = function(submissionId, opt_xFields, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/submissions/{submission_id}'
      .replace('{' + 'submission_id' + '}', String(submissionId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'submissionId' is set
  if (!submissionId) {
    throw new Error('Missing required parameter submissionId when calling getSubmission');
  }
  headerParams['X-Fields'] = opt_xFields;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get the submission data by submission ID
 * @param {!number} submissionId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SubmissionsApi.prototype.getSubmissionData = function(submissionId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/submissions/{submission_id}/data'
      .replace('{' + 'submission_id' + '}', String(submissionId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'submissionId' is set
  if (!submissionId) {
    throw new Error('Missing required parameter submissionId when calling getSubmissionData');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get submission logs from loki
 * @param {!number} submissionId 
 * @param {!number=} opt_step Granularity of logs
 * @param {!number=} opt_logLines Number of lines to fetch
 * @param {!string=} opt_xFields An optional fields mask
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.SubmissionLogs>}
 */
API.Client.SubmissionsApi.prototype.getSubmissionLogs = function(submissionId, opt_step, opt_logLines, opt_xFields, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/submissions/{submission_id}/logs'
      .replace('{' + 'submission_id' + '}', String(submissionId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'submissionId' is set
  if (!submissionId) {
    throw new Error('Missing required parameter submissionId when calling getSubmissionLogs');
  }
  if (opt_step !== undefined) {
    queryParameters['step'] = opt_step;
  }

  if (opt_logLines !== undefined) {
    queryParameters['log_lines'] = opt_logLines;
  }

  headerParams['X-Fields'] = opt_xFields;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * List all submissions available
 * @param {!string=} opt_perPage Results to display per page
 * @param {!string=} opt_page Page number
 * @param {!string=} opt_meta Fetch submissions containing this meta value
 * @param {!string=} opt_status Fetch submissions with this status
 * @param {!number=} opt_graderId Fetch submissions for a grader
 * @param {!number=} opt_userId Fetch submissions created by the user
 * @param {!string=} opt_xFields An optional fields mask
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Submissions>>}
 */
API.Client.SubmissionsApi.prototype.listSubmissions = function(opt_perPage, opt_page, opt_meta, opt_status, opt_graderId, opt_userId, opt_xFields, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/submissions/';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_perPage !== undefined) {
    queryParameters['per_page'] = opt_perPage;
  }

  if (opt_page !== undefined) {
    queryParameters['page'] = opt_page;
  }

  if (opt_meta !== undefined) {
    queryParameters['meta'] = opt_meta;
  }

  if (opt_status !== undefined) {
    queryParameters['status'] = opt_status;
  }

  if (opt_graderId !== undefined) {
    queryParameters['grader_id'] = opt_graderId;
  }

  if (opt_userId !== undefined) {
    queryParameters['user_id'] = opt_userId;
  }

  headerParams['X-Fields'] = opt_xFields;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retry the submissions with given IDs
 * @param {!SubmissionRetryInput} payload 
 * @param {!string=} opt_xFields An optional fields mask
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.SubmissionRetry>}
 */
API.Client.SubmissionsApi.prototype.retrySubmissions = function(payload, opt_xFields, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/submissions/retry';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'payload' is set
  if (!payload) {
    throw new Error('Missing required parameter payload when calling retrySubmissions');
  }
  headerParams['X-Fields'] = opt_xFields;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: payload,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
