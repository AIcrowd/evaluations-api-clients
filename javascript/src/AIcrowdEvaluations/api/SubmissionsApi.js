/*
 * AIcrowd Evaluations API
 * API to create and evaluate custom challenges on AIcrowd!
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.23
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['AIcrowdEvaluations/ApiClient', 'AIcrowdEvaluations/model/SubmissionLogs', 'AIcrowdEvaluations/model/SubmissionRetry', 'AIcrowdEvaluations/model/SubmissionRetryInput', 'AIcrowdEvaluations/model/Submissions'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/SubmissionLogs'), require('../model/SubmissionRetry'), require('../model/SubmissionRetryInput'), require('../model/Submissions'));
  } else {
    // Browser globals (root is window)
    if (!root.AicrowdEvaluations) {
      root.AicrowdEvaluations = {};
    }
    root.AicrowdEvaluations.SubmissionsApi = factory(root.AicrowdEvaluations.ApiClient, root.AicrowdEvaluations.SubmissionLogs, root.AicrowdEvaluations.SubmissionRetry, root.AicrowdEvaluations.SubmissionRetryInput, root.AicrowdEvaluations.Submissions);
  }
}(this, function(ApiClient, SubmissionLogs, SubmissionRetry, SubmissionRetryInput, Submissions) {
  'use strict';

  /**
   * Submissions service.
   * @module AIcrowdEvaluations/api/SubmissionsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new SubmissionsApi. 
   * @alias module:AIcrowdEvaluations/api/SubmissionsApi
   * @class
   * @param {module:AIcrowdEvaluations/ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:AIcrowdEvaluations/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createSubmission operation.
     * @callback module:AIcrowdEvaluations/api/SubmissionsApi~createSubmissionCallback
     * @param {String} error Error message, if any.
     * @param {module:AIcrowdEvaluations/model/Submissions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Make a new submission
     * @param {module:AIcrowdEvaluations/model/Submissions} payload 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xFields An optional fields mask
     * @param {module:AIcrowdEvaluations/api/SubmissionsApi~createSubmissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:AIcrowdEvaluations/model/Submissions}
     */
    this.createSubmission = function(payload, opts, callback) {
      opts = opts || {};
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling createSubmission");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Fields': opts['xFields']
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Submissions;

      return this.apiClient.callApi(
        '/submissions/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSubmission operation.
     * @callback module:AIcrowdEvaluations/api/SubmissionsApi~deleteSubmissionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop evaluation of a submission and delete it
     * @param {Number} submissionId 
     * @param {module:AIcrowdEvaluations/api/SubmissionsApi~deleteSubmissionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSubmission = function(submissionId, callback) {
      var postBody = null;

      // verify the required parameter 'submissionId' is set
      if (submissionId === undefined || submissionId === null) {
        throw new Error("Missing the required parameter 'submissionId' when calling deleteSubmission");
      }


      var pathParams = {
        'submission_id': submissionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/submissions/{submission_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadSubmissionLogs operation.
     * @callback module:AIcrowdEvaluations/api/SubmissionsApi~downloadSubmissionLogsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the submission logs by submission ID
     * @param {Number} submissionId 
     * @param {module:AIcrowdEvaluations/api/SubmissionsApi~downloadSubmissionLogsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.downloadSubmissionLogs = function(submissionId, callback) {
      var postBody = null;

      // verify the required parameter 'submissionId' is set
      if (submissionId === undefined || submissionId === null) {
        throw new Error("Missing the required parameter 'submissionId' when calling downloadSubmissionLogs");
      }


      var pathParams = {
        'submission_id': submissionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/submissions/{submission_id}/logs/download', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubmission operation.
     * @callback module:AIcrowdEvaluations/api/SubmissionsApi~getSubmissionCallback
     * @param {String} error Error message, if any.
     * @param {module:AIcrowdEvaluations/model/Submissions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details of a submission by its ID
     * @param {Number} submissionId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xFields An optional fields mask
     * @param {module:AIcrowdEvaluations/api/SubmissionsApi~getSubmissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:AIcrowdEvaluations/model/Submissions}
     */
    this.getSubmission = function(submissionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'submissionId' is set
      if (submissionId === undefined || submissionId === null) {
        throw new Error("Missing the required parameter 'submissionId' when calling getSubmission");
      }


      var pathParams = {
        'submission_id': submissionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Fields': opts['xFields']
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Submissions;

      return this.apiClient.callApi(
        '/submissions/{submission_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubmissionData operation.
     * @callback module:AIcrowdEvaluations/api/SubmissionsApi~getSubmissionDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the submission data by submission ID
     * @param {Number} submissionId 
     * @param {module:AIcrowdEvaluations/api/SubmissionsApi~getSubmissionDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getSubmissionData = function(submissionId, callback) {
      var postBody = null;

      // verify the required parameter 'submissionId' is set
      if (submissionId === undefined || submissionId === null) {
        throw new Error("Missing the required parameter 'submissionId' when calling getSubmissionData");
      }


      var pathParams = {
        'submission_id': submissionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/submissions/{submission_id}/data', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubmissionLogs operation.
     * @callback module:AIcrowdEvaluations/api/SubmissionsApi~getSubmissionLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:AIcrowdEvaluations/model/SubmissionLogs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get submission logs from loki
     * @param {Number} submissionId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.step Granularity of logs
     * @param {Number} opts.logLines Number of lines to fetch
     * @param {String} opts.xFields An optional fields mask
     * @param {module:AIcrowdEvaluations/api/SubmissionsApi~getSubmissionLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:AIcrowdEvaluations/model/SubmissionLogs}
     */
    this.getSubmissionLogs = function(submissionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'submissionId' is set
      if (submissionId === undefined || submissionId === null) {
        throw new Error("Missing the required parameter 'submissionId' when calling getSubmissionLogs");
      }


      var pathParams = {
        'submission_id': submissionId
      };
      var queryParams = {
        'step': opts['step'],
        'log_lines': opts['logLines'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Fields': opts['xFields']
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SubmissionLogs;

      return this.apiClient.callApi(
        '/submissions/{submission_id}/logs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listSubmissions operation.
     * @callback module:AIcrowdEvaluations/api/SubmissionsApi~listSubmissionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:AIcrowdEvaluations/model/Submissions>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all submissions available
     * @param {Object} opts Optional parameters
     * @param {String} opts.perPage Results to display per page
     * @param {String} opts.page Page number
     * @param {String} opts.meta Fetch submissions containing this meta value
     * @param {String} opts.status Fetch submissions with this status
     * @param {Number} opts.graderId Fetch submissions for a grader
     * @param {Number} opts.userId Fetch submissions created by the user
     * @param {String} opts.xFields An optional fields mask
     * @param {module:AIcrowdEvaluations/api/SubmissionsApi~listSubmissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:AIcrowdEvaluations/model/Submissions>}
     */
    this.listSubmissions = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page'],
        'meta': opts['meta'],
        'status': opts['status'],
        'grader_id': opts['graderId'],
        'user_id': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Fields': opts['xFields']
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Submissions];

      return this.apiClient.callApi(
        '/submissions/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrySubmissions operation.
     * @callback module:AIcrowdEvaluations/api/SubmissionsApi~retrySubmissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:AIcrowdEvaluations/model/SubmissionRetry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retry the submissions with given IDs
     * @param {module:AIcrowdEvaluations/model/SubmissionRetryInput} payload 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xFields An optional fields mask
     * @param {module:AIcrowdEvaluations/api/SubmissionsApi~retrySubmissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:AIcrowdEvaluations/model/SubmissionRetry}
     */
    this.retrySubmissions = function(payload, opts, callback) {
      opts = opts || {};
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling retrySubmissions");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Fields': opts['xFields']
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SubmissionRetry;

      return this.apiClient.callApi(
        '/submissions/retry', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
