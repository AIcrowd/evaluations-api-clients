/*
 * Evaluations API
 * API to create and evaluate custom challenges
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['AIcrowdEvaluations/ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.AicrowdEvaluations) {
      root.AicrowdEvaluations = {};
    }
    root.AicrowdEvaluations.Grader = factory(root.AicrowdEvaluations.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The Grader model module.
   * @module AIcrowdEvaluations/model/Grader
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>Grader</code>.
   * @alias module:AIcrowdEvaluations/model/Grader
   * @class
   * @param evaluatorRepo {String} Git URL of the repository containing the code that will be used for the evaluation
   */
  var exports = function(evaluatorRepo) {
    this.evaluatorRepo = evaluatorRepo;
  };

  /**
   * Constructs a <code>Grader</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:AIcrowdEvaluations/model/Grader} obj Optional instance to populate.
   * @return {module:AIcrowdEvaluations/model/Grader} The populated <code>Grader</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('created'))
        obj.created = ApiClient.convertToType(data['created'], 'Date');
      if (data.hasOwnProperty('updated'))
        obj.updated = ApiClient.convertToType(data['updated'], 'Date');
      if (data.hasOwnProperty('dataset_url'))
        obj.datasetUrl = ApiClient.convertToType(data['dataset_url'], 'String');
      if (data.hasOwnProperty('cluster_id'))
        obj.clusterId = ApiClient.convertToType(data['cluster_id'], 'Number');
      if (data.hasOwnProperty('workflow_spec'))
        obj.workflowSpec = ApiClient.convertToType(data['workflow_spec'], Object);
      if (data.hasOwnProperty('evaluator_repo'))
        obj.evaluatorRepo = ApiClient.convertToType(data['evaluator_repo'], 'String');
      if (data.hasOwnProperty('evaluator_repo_tag'))
        obj.evaluatorRepoTag = ApiClient.convertToType(data['evaluator_repo_tag'], 'String');
      if (data.hasOwnProperty('storage_capacity'))
        obj.storageCapacity = ApiClient.convertToType(data['storage_capacity'], 'String');
      if (data.hasOwnProperty('logs'))
        obj.logs = ApiClient.convertToType(data['logs'], Object);
      if (data.hasOwnProperty('meta'))
        obj.meta = ApiClient.convertToType(data['meta'], Object);
      if (data.hasOwnProperty('status'))
        obj.status = ApiClient.convertToType(data['status'], 'String');
      if (data.hasOwnProperty('user_id'))
        obj.userId = ApiClient.convertToType(data['user_id'], 'Number');
      if (data.hasOwnProperty('organisation_id'))
        obj.organisationId = ApiClient.convertToType(data['organisation_id'], 'Number');
    }
    return obj;
  }

  /**
   * ID
   * @member {Number} id
   */
  exports.prototype.id = undefined;

  /**
   * Creation time
   * @member {Date} created
   */
  exports.prototype.created = undefined;

  /**
   * Last updation time
   * @member {Date} updated
   */
  exports.prototype.updated = undefined;

  /**
   * S3 link of the Dataset
   * @member {String} datasetUrl
   */
  exports.prototype.datasetUrl = undefined;

  /**
   * Cluster to run the grader on
   * @member {Number} clusterId
   */
  exports.prototype.clusterId = undefined;

  /**
   * Argo workflow template spec
   * @member {Object} workflowSpec
   */
  exports.prototype.workflowSpec = undefined;

  /**
   * Git URL of the repository containing the code that will be used for the evaluation
   * @member {String} evaluatorRepo
   */
  exports.prototype.evaluatorRepo = undefined;

  /**
   * Git branch/tag that should be used with the evaluator repository.
   * @member {String} evaluatorRepoTag
   */
  exports.prototype.evaluatorRepoTag = undefined;

  /**
   * Size of the dataset partition to request. Please provide at least 2x of the size of the dataset.
   * @member {String} storageCapacity
   */
  exports.prototype.storageCapacity = undefined;

  /**
   * Logs from argo workflow
   * @member {Object} logs
   */
  exports.prototype.logs = undefined;

  /**
   * Additional meta data of the grader
   * @member {Object} meta
   */
  exports.prototype.meta = undefined;

  /**
   * Status of the grader - True if it ready, False otherwise
   * @member {String} status
   */
  exports.prototype.status = undefined;

  /**
   * User ID
   * @member {Number} userId
   */
  exports.prototype.userId = undefined;

  /**
   * Organisation ID
   * @member {Number} organisationId
   */
  exports.prototype.organisationId = undefined;

  return exports;

}));
