/*
 * Evaluations API
 * API to create and evaluate custom challenges
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GenericFeedback', 'model/GraderFeedback', 'model/SubmissionFeedback'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GenericFeedback'), require('../model/GraderFeedback'), require('../model/SubmissionFeedback'));
  } else {
    // Browser globals (root is window)
    if (!root.EvaluationsApi) {
      root.EvaluationsApi = {};
    }
    root.EvaluationsApi.ArgoApi = factory(root.EvaluationsApi.ApiClient, root.EvaluationsApi.GenericFeedback, root.EvaluationsApi.GraderFeedback, root.EvaluationsApi.SubmissionFeedback);
  }
}(this, function(ApiClient, GenericFeedback, GraderFeedback, SubmissionFeedback) {
  'use strict';

  /**
   * Argo service.
   * @module api/ArgoApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ArgoApi. 
   * @alias module:api/ArgoApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the postGenericFeedbackContract operation.
     * @callback module:api/ArgoApi~postGenericFeedbackContractCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the status of an object
     * @param {String} modelName 
     * @param {Number} objectId 
     * @param {module:model/GenericFeedback} payload 
     * @param {module:api/ArgoApi~postGenericFeedbackContractCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postGenericFeedbackContract = function(modelName, objectId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling postGenericFeedbackContract");
      }

      // verify the required parameter 'objectId' is set
      if (objectId === undefined || objectId === null) {
        throw new Error("Missing the required parameter 'objectId' when calling postGenericFeedbackContract");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postGenericFeedbackContract");
      }


      var pathParams = {
        'model_name': modelName,
        'object_id': objectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/argo/{model_name}/{object_id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postGraderFeedbackDao operation.
     * @callback module:api/ArgoApi~postGraderFeedbackDaoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the grader details
     * @param {Number} graderId 
     * @param {module:model/GraderFeedback} payload 
     * @param {module:api/ArgoApi~postGraderFeedbackDaoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postGraderFeedbackDao = function(graderId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'graderId' is set
      if (graderId === undefined || graderId === null) {
        throw new Error("Missing the required parameter 'graderId' when calling postGraderFeedbackDao");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postGraderFeedbackDao");
      }


      var pathParams = {
        'grader_id': graderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/argo/graders/{grader_id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postSubmissionFeedbackDao operation.
     * @callback module:api/ArgoApi~postSubmissionFeedbackDaoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the submission details
     * @param {Number} submissionId 
     * @param {module:model/SubmissionFeedback} payload 
     * @param {module:api/ArgoApi~postSubmissionFeedbackDaoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postSubmissionFeedbackDao = function(submissionId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'submissionId' is set
      if (submissionId === undefined || submissionId === null) {
        throw new Error("Missing the required parameter 'submissionId' when calling postSubmissionFeedbackDao");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postSubmissionFeedbackDao");
      }


      var pathParams = {
        'submission_id': submissionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/argo/submissions/{submission_id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
