/*
 * Evaluations API
 * API to create and evaluate custom challenges
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Submissions'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Submissions'));
  } else {
    // Browser globals (root is window)
    if (!root.EvaluationsApi) {
      root.EvaluationsApi = {};
    }
    root.EvaluationsApi.SubmissionsApi = factory(root.EvaluationsApi.ApiClient, root.EvaluationsApi.Submissions);
  }
}(this, function(ApiClient, Submissions) {
  'use strict';

  /**
   * Submissions service.
   * @module api/SubmissionsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new SubmissionsApi. 
   * @alias module:api/SubmissionsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteSubmissionDao operation.
     * @callback module:api/SubmissionsApi~deleteSubmissionDaoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop evaluation of a submission
     * @param {Number} submissionId 
     * @param {module:api/SubmissionsApi~deleteSubmissionDaoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSubmissionDao = function(submissionId, callback) {
      var postBody = null;

      // verify the required parameter 'submissionId' is set
      if (submissionId === undefined || submissionId === null) {
        throw new Error("Missing the required parameter 'submissionId' when calling deleteSubmissionDao");
      }


      var pathParams = {
        'submission_id': submissionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/submissions/{submission_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubmissionDao operation.
     * @callback module:api/SubmissionsApi~getSubmissionDaoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Submissions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details of a submission
     * @param {Number} submissionId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xFields An optional fields mask
     * @param {module:api/SubmissionsApi~getSubmissionDaoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Submissions}
     */
    this.getSubmissionDao = function(submissionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'submissionId' is set
      if (submissionId === undefined || submissionId === null) {
        throw new Error("Missing the required parameter 'submissionId' when calling getSubmissionDao");
      }


      var pathParams = {
        'submission_id': submissionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Fields': opts['xFields']
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Submissions;

      return this.apiClient.callApi(
        '/submissions/{submission_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubmissionListDao operation.
     * @callback module:api/SubmissionsApi~getSubmissionListDaoCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Submissions>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all submissions
     * @param {Object} opts Optional parameters
     * @param {String} opts.xFields An optional fields mask
     * @param {module:api/SubmissionsApi~getSubmissionListDaoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Submissions>}
     */
    this.getSubmissionListDao = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Fields': opts['xFields']
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Submissions];

      return this.apiClient.callApi(
        '/submissions/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postSubmissionListDao operation.
     * @callback module:api/SubmissionsApi~postSubmissionListDaoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Submissions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Make a new submission
     * @param {module:model/Submissions} payload 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xFields An optional fields mask
     * @param {module:api/SubmissionsApi~postSubmissionListDaoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Submissions}
     */
    this.postSubmissionListDao = function(payload, opts, callback) {
      opts = opts || {};
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postSubmissionListDao");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Fields': opts['xFields']
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Submissions;

      return this.apiClient.callApi(
        '/submissions/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
