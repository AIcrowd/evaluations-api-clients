/*
 * Evaluations API
 * API to create and evaluate custom challenges
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/AIcrowdEvaluations/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/AIcrowdEvaluations/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AicrowdEvaluations);
  }
}(this, function(expect, AicrowdEvaluations) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AicrowdEvaluations.OrganisationsApi();
  });

  describe('AIcrowdEvaluations', function() {
    describe('OrganisationsApi', function() {
      describe('deleteOrganisationDao', function() {
        it('should call deleteOrganisationDao successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOrganisationDao call
          /*
          var organisationId = 56;

          instance.deleteOrganisationDao(organisationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganisationDao', function() {
        it('should call getOrganisationDao successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganisationDao call and complete the assertions
          /*
          var organisationId = 56;
          var opts = {};
          opts.xFields = "xFields_example";

          instance.getOrganisationDao(organisationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AicrowdEvaluations.Organisation);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.pocEmail).to.be.a('string');
            expect(data.pocEmail).to.be("");
            expect(data.createdOn).to.be.a(Date);
            expect(data.createdOn).to.be(new Date());
            expect(data.totalQuota).to.be.a('number');
            expect(data.totalQuota).to.be(0);
            expect(data.quota).to.be.a('number');
            expect(data.quota).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganisationListDao', function() {
        it('should call getOrganisationListDao successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganisationListDao call and complete the assertions
          /*
          var opts = {};
          opts.xFields = "xFields_example";

          instance.getOrganisationListDao(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(AicrowdEvaluations.Organisation);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be(0);
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.pocEmail).to.be.a('string');
              expect(data.pocEmail).to.be("");
              expect(data.createdOn).to.be.a(Date);
              expect(data.createdOn).to.be(new Date());
              expect(data.totalQuota).to.be.a('number');
              expect(data.totalQuota).to.be(0);
              expect(data.quota).to.be.a('number');
              expect(data.quota).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postOrganisationListDao', function() {
        it('should call postOrganisationListDao successfully', function(done) {
          // TODO: uncomment, update parameter values for postOrganisationListDao call and complete the assertions
          /*
          var payload = new AicrowdEvaluations.Organisation();
          payload.name = "";
          payload.pocEmail = "";
          var opts = {};
          opts.xFields = "xFields_example";

          instance.postOrganisationListDao(payload, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AicrowdEvaluations.Organisation);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.pocEmail).to.be.a('string');
            expect(data.pocEmail).to.be("");
            expect(data.createdOn).to.be.a(Date);
            expect(data.createdOn).to.be(new Date());
            expect(data.totalQuota).to.be.a('number');
            expect(data.totalQuota).to.be(0);
            expect(data.quota).to.be.a('number');
            expect(data.quota).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('putOrganisationDao', function() {
        it('should call putOrganisationDao successfully', function(done) {
          // TODO: uncomment, update parameter values for putOrganisationDao call and complete the assertions
          /*
          var organisationId = 56;
          var payload = new AicrowdEvaluations.Organisation();
          payload.name = "";
          payload.pocEmail = "";
          var opts = {};
          opts.xFields = "xFields_example";

          instance.putOrganisationDao(organisationId, payload, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AicrowdEvaluations.Organisation);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.pocEmail).to.be.a('string');
            expect(data.pocEmail).to.be("");
            expect(data.createdOn).to.be.a(Date);
            expect(data.createdOn).to.be(new Date());
            expect(data.totalQuota).to.be.a('number');
            expect(data.totalQuota).to.be(0);
            expect(data.quota).to.be.a('number');
            expect(data.quota).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('putQuotaDao', function() {
        it('should call putQuotaDao successfully', function(done) {
          // TODO: uncomment, update parameter values for putQuotaDao call
          /*
          var organisationId = 56;
          var payload = new AicrowdEvaluations.OrganisationQuota();
          payload.quota = 0;

          instance.putQuotaDao(organisationId, payload, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
