/*
 * Evaluations API
 * API to create and evaluate custom challenges
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/AIcrowdEvaluations/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/AIcrowdEvaluations/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AicrowdEvaluations);
  }
}(this, function(expect, AicrowdEvaluations) {
  'use strict';

  var instance;

  describe('AIcrowdEvaluations', function() {
    describe('Grader', function() {
      beforeEach(function() {
        instance = new AicrowdEvaluations.Grader();
      });

      it('should create an instance of Grader', function() {
        // TODO: update the code to test Grader
        expect(instance).to.be.a(AicrowdEvaluations.Grader);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property created (base name: "created")', function() {
        // TODO: update the code to test the property created
        expect(instance).to.have.property('created');
        // expect(instance.created).to.be(expectedValueLiteral);
      });

      it('should have the property updated (base name: "updated")', function() {
        // TODO: update the code to test the property updated
        expect(instance).to.have.property('updated');
        // expect(instance.updated).to.be(expectedValueLiteral);
      });

      it('should have the property dataset (base name: "dataset")', function() {
        // TODO: update the code to test the property dataset
        expect(instance).to.have.property('dataset');
        // expect(instance.dataset).to.be(expectedValueLiteral);
      });

      it('should have the property clusterId (base name: "cluster_id")', function() {
        // TODO: update the code to test the property clusterId
        expect(instance).to.have.property('clusterId');
        // expect(instance.clusterId).to.be(expectedValueLiteral);
      });

      it('should have the property workflowSpec (base name: "workflow_spec")', function() {
        // TODO: update the code to test the property workflowSpec
        expect(instance).to.have.property('workflowSpec');
        // expect(instance.workflowSpec).to.be(expectedValueLiteral);
      });

      it('should have the property evaluatorRepo (base name: "evaluator_repo")', function() {
        // TODO: update the code to test the property evaluatorRepo
        expect(instance).to.have.property('evaluatorRepo');
        // expect(instance.evaluatorRepo).to.be(expectedValueLiteral);
      });

      it('should have the property evaluatorRepoTag (base name: "evaluator_repo_tag")', function() {
        // TODO: update the code to test the property evaluatorRepoTag
        expect(instance).to.have.property('evaluatorRepoTag');
        // expect(instance.evaluatorRepoTag).to.be(expectedValueLiteral);
      });

      it('should have the property logs (base name: "logs")', function() {
        // TODO: update the code to test the property logs
        expect(instance).to.have.property('logs');
        // expect(instance.logs).to.be(expectedValueLiteral);
      });

      it('should have the property meta (base name: "meta")', function() {
        // TODO: update the code to test the property meta
        expect(instance).to.have.property('meta');
        // expect(instance.meta).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property submissionTypes (base name: "submission_types")', function() {
        // TODO: update the code to test the property submissionTypes
        expect(instance).to.have.property('submissionTypes');
        // expect(instance.submissionTypes).to.be(expectedValueLiteral);
      });

      it('should have the property userId (base name: "user_id")', function() {
        // TODO: update the code to test the property userId
        expect(instance).to.have.property('userId');
        // expect(instance.userId).to.be(expectedValueLiteral);
      });

      it('should have the property organisationId (base name: "organisation_id")', function() {
        // TODO: update the code to test the property organisationId
        expect(instance).to.have.property('organisationId');
        // expect(instance.organisationId).to.be(expectedValueLiteral);
      });

    });
  });

}));
