/*
 * Evaluations API
 * API to create and evaluate custom challenges
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EvaluationsApi);
  }
}(this, function(expect, EvaluationsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EvaluationsApi.GradersApi();
  });

  describe('(package)', function() {
    describe('GradersApi', function() {
      describe('deleteGraderDao', function() {
        it('should call deleteGraderDao successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteGraderDao call
          /*
          var graderId = 56;

          instance.deleteGraderDao(graderId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getGraderDao', function() {
        it('should call getGraderDao successfully', function(done) {
          // TODO: uncomment, update parameter values for getGraderDao call and complete the assertions
          /*
          var graderId = 56;
          var opts = {};
          opts.xFields = "xFields_example";

          instance.getGraderDao(graderId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EvaluationsApi.Grader);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.updated).to.be.a(Date);
            expect(data.updated).to.be(new Date());
            expect(data.datasetUrl).to.be.a('string');
            expect(data.datasetUrl).to.be("");
            expect(data.codeAccessMode).to.be.a('string');
            expect(data.codeAccessMode).to.be("");
            expect(data.clusterId).to.be.a('number');
            expect(data.clusterId).to.be(0);
            expect(data.dockerUsername).to.be.a('string');
            expect(data.dockerUsername).to.be("");
            expect(data.dockerPassword).to.be.a('string');
            expect(data.dockerPassword).to.be("");
            expect(data.dockerRegistry).to.be.a('string');
            expect(data.dockerRegistry).to.be("");
            expect(data.workflowSpec).to.be.a(Object);
            expect(data.workflowSpec).to.be();
            expect(data.evaluationCode).to.be.a('string');
            expect(data.evaluationCode).to.be("");
            expect(data.storageCapacity).to.be.a('string');
            expect(data.storageCapacity).to.be("");
            expect(data.logs).to.be.a(Object);
            expect(data.logs).to.be();
            expect(data.meta).to.be.a(Object);
            expect(data.meta).to.be();
            expect(data.status).to.be.a('boolean');
            expect(data.status).to.be(false);
            expect(data.userId).to.be.a('number');
            expect(data.userId).to.be(0);
            expect(data.organisationId).to.be.a('number');
            expect(data.organisationId).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getGraderListDao', function() {
        it('should call getGraderListDao successfully', function(done) {
          // TODO: uncomment, update parameter values for getGraderListDao call and complete the assertions
          /*
          var opts = {};
          opts.xFields = "xFields_example";

          instance.getGraderListDao(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EvaluationsApi.Grader);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be(0);
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.updated).to.be.a(Date);
              expect(data.updated).to.be(new Date());
              expect(data.datasetUrl).to.be.a('string');
              expect(data.datasetUrl).to.be("");
              expect(data.codeAccessMode).to.be.a('string');
              expect(data.codeAccessMode).to.be("");
              expect(data.clusterId).to.be.a('number');
              expect(data.clusterId).to.be(0);
              expect(data.dockerUsername).to.be.a('string');
              expect(data.dockerUsername).to.be("");
              expect(data.dockerPassword).to.be.a('string');
              expect(data.dockerPassword).to.be("");
              expect(data.dockerRegistry).to.be.a('string');
              expect(data.dockerRegistry).to.be("");
              expect(data.workflowSpec).to.be.a(Object);
              expect(data.workflowSpec).to.be();
              expect(data.evaluationCode).to.be.a('string');
              expect(data.evaluationCode).to.be("");
              expect(data.storageCapacity).to.be.a('string');
              expect(data.storageCapacity).to.be("");
              expect(data.logs).to.be.a(Object);
              expect(data.logs).to.be();
              expect(data.meta).to.be.a(Object);
              expect(data.meta).to.be();
              expect(data.status).to.be.a('boolean');
              expect(data.status).to.be(false);
              expect(data.userId).to.be.a('number');
              expect(data.userId).to.be(0);
              expect(data.organisationId).to.be.a('number');
              expect(data.organisationId).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postGraderListDao', function() {
        it('should call postGraderListDao successfully', function(done) {
          // TODO: uncomment, update parameter values for postGraderListDao call and complete the assertions
          /*
          var payload = new EvaluationsApi.Grader();
          payload.datasetUrl = "";
          payload.codeAccessMode = "";
          payload.clusterId = 0;
          payload.dockerUsername = "";
          payload.dockerPassword = "";
          payload.dockerRegistry = "";
          payload.evaluationCode = "";
          payload.storageCapacity = "";
          var opts = {};
          opts.xFields = "xFields_example";

          instance.postGraderListDao(payload, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EvaluationsApi.Grader);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.updated).to.be.a(Date);
            expect(data.updated).to.be(new Date());
            expect(data.datasetUrl).to.be.a('string');
            expect(data.datasetUrl).to.be("");
            expect(data.codeAccessMode).to.be.a('string');
            expect(data.codeAccessMode).to.be("");
            expect(data.clusterId).to.be.a('number');
            expect(data.clusterId).to.be(0);
            expect(data.dockerUsername).to.be.a('string');
            expect(data.dockerUsername).to.be("");
            expect(data.dockerPassword).to.be.a('string');
            expect(data.dockerPassword).to.be("");
            expect(data.dockerRegistry).to.be.a('string');
            expect(data.dockerRegistry).to.be("");
            expect(data.workflowSpec).to.be.a(Object);
            expect(data.workflowSpec).to.be();
            expect(data.evaluationCode).to.be.a('string');
            expect(data.evaluationCode).to.be("");
            expect(data.storageCapacity).to.be.a('string');
            expect(data.storageCapacity).to.be("");
            expect(data.logs).to.be.a(Object);
            expect(data.logs).to.be();
            expect(data.meta).to.be.a(Object);
            expect(data.meta).to.be();
            expect(data.status).to.be.a('boolean');
            expect(data.status).to.be(false);
            expect(data.userId).to.be.a('number');
            expect(data.userId).to.be(0);
            expect(data.organisationId).to.be.a('number');
            expect(data.organisationId).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('putGraderDao', function() {
        it('should call putGraderDao successfully', function(done) {
          // TODO: uncomment, update parameter values for putGraderDao call and complete the assertions
          /*
          var graderId = 56;
          var payload = new EvaluationsApi.Grader();
          payload.datasetUrl = "";
          payload.codeAccessMode = "";
          payload.clusterId = 0;
          payload.dockerUsername = "";
          payload.dockerPassword = "";
          payload.dockerRegistry = "";
          payload.evaluationCode = "";
          payload.storageCapacity = "";
          var opts = {};
          opts.xFields = "xFields_example";

          instance.putGraderDao(graderId, payload, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EvaluationsApi.Grader);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.updated).to.be.a(Date);
            expect(data.updated).to.be(new Date());
            expect(data.datasetUrl).to.be.a('string');
            expect(data.datasetUrl).to.be("");
            expect(data.codeAccessMode).to.be.a('string');
            expect(data.codeAccessMode).to.be("");
            expect(data.clusterId).to.be.a('number');
            expect(data.clusterId).to.be(0);
            expect(data.dockerUsername).to.be.a('string');
            expect(data.dockerUsername).to.be("");
            expect(data.dockerPassword).to.be.a('string');
            expect(data.dockerPassword).to.be("");
            expect(data.dockerRegistry).to.be.a('string');
            expect(data.dockerRegistry).to.be("");
            expect(data.workflowSpec).to.be.a(Object);
            expect(data.workflowSpec).to.be();
            expect(data.evaluationCode).to.be.a('string');
            expect(data.evaluationCode).to.be("");
            expect(data.storageCapacity).to.be.a('string');
            expect(data.storageCapacity).to.be("");
            expect(data.logs).to.be.a(Object);
            expect(data.logs).to.be();
            expect(data.meta).to.be.a(Object);
            expect(data.meta).to.be();
            expect(data.status).to.be.a('boolean');
            expect(data.status).to.be(false);
            expect(data.userId).to.be.a('number');
            expect(data.userId).to.be(0);
            expect(data.organisationId).to.be.a('number');
            expect(data.organisationId).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
