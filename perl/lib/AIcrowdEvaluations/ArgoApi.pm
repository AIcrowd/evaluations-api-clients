=begin comment

Evaluations API

API to create and evaluate custom challenges

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package AIcrowdEvaluations::ArgoApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use AIcrowdEvaluations::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'AIcrowdEvaluations::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = AIcrowdEvaluations::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# post_generic_feedback_contract
#
# 
# 
# @param string $model_name  (required)
# @param int $object_id  (required)
# @param GenericFeedback $payload  (required)
{
    my $params = {
    'model_name' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'object_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'payload' => {
        data_type => 'GenericFeedback',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'post_generic_feedback_contract' } = { 
    	summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub post_generic_feedback_contract {
    my ($self, %args) = @_;

    # verify the required parameter 'model_name' is set
    unless (exists $args{'model_name'}) {
      croak("Missing the required parameter 'model_name' when calling post_generic_feedback_contract");
    }

    # verify the required parameter 'object_id' is set
    unless (exists $args{'object_id'}) {
      croak("Missing the required parameter 'object_id' when calling post_generic_feedback_contract");
    }

    # verify the required parameter 'payload' is set
    unless (exists $args{'payload'}) {
      croak("Missing the required parameter 'payload' when calling post_generic_feedback_contract");
    }

    # parse inputs
    my $_resource_path = '/argo/{model_name}/{object_id}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'model_name'}) {
        my $_base_variable = "{" . "model_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'model_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'object_id'}) {
        my $_base_variable = "{" . "object_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'payload'}) {
        $_body_data = $args{'payload'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(api_key )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# post_grader_feedback_dao
#
# 
# 
# @param int $grader_id  (required)
# @param GraderFeedback $payload  (required)
{
    my $params = {
    'grader_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'payload' => {
        data_type => 'GraderFeedback',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'post_grader_feedback_dao' } = { 
    	summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub post_grader_feedback_dao {
    my ($self, %args) = @_;

    # verify the required parameter 'grader_id' is set
    unless (exists $args{'grader_id'}) {
      croak("Missing the required parameter 'grader_id' when calling post_grader_feedback_dao");
    }

    # verify the required parameter 'payload' is set
    unless (exists $args{'payload'}) {
      croak("Missing the required parameter 'payload' when calling post_grader_feedback_dao");
    }

    # parse inputs
    my $_resource_path = '/argo/graders/{grader_id}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'grader_id'}) {
        my $_base_variable = "{" . "grader_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'grader_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'payload'}) {
        $_body_data = $args{'payload'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(api_key )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# post_submission_feedback_dao
#
# 
# 
# @param int $submission_id  (required)
# @param SubmissionFeedback $payload  (required)
{
    my $params = {
    'submission_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'payload' => {
        data_type => 'SubmissionFeedback',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'post_submission_feedback_dao' } = { 
    	summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub post_submission_feedback_dao {
    my ($self, %args) = @_;

    # verify the required parameter 'submission_id' is set
    unless (exists $args{'submission_id'}) {
      croak("Missing the required parameter 'submission_id' when calling post_submission_feedback_dao");
    }

    # verify the required parameter 'payload' is set
    unless (exists $args{'payload'}) {
      croak("Missing the required parameter 'payload' when calling post_submission_feedback_dao");
    }

    # parse inputs
    my $_resource_path = '/argo/submissions/{submission_id}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'submission_id'}) {
        my $_base_variable = "{" . "submission_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'submission_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'payload'}) {
        $_body_data = $args{'payload'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(api_key )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
