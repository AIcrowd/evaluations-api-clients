<?php
/**
 * Grader
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Evaluations API
 *
 * API to create and evaluate custom challenges
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Grader Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Grader implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Grader';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'created' => '\DateTime',
        'updated' => '\DateTime',
        'dataset_url' => 'string',
        'code_access_mode' => 'string',
        'cluster_id' => 'int',
        'docker_username' => 'string',
        'docker_password' => 'string',
        'docker_registry' => 'string',
        'workflow_spec' => 'object',
        'evaluation_code' => 'string',
        'storage_capacity' => 'string',
        'logs' => 'object',
        'meta' => 'object',
        'status' => 'bool',
        'user_id' => 'int',
        'organisation_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'created' => 'date-time',
        'updated' => 'date-time',
        'dataset_url' => null,
        'code_access_mode' => null,
        'cluster_id' => null,
        'docker_username' => null,
        'docker_password' => null,
        'docker_registry' => null,
        'workflow_spec' => null,
        'evaluation_code' => null,
        'storage_capacity' => null,
        'logs' => null,
        'meta' => null,
        'status' => null,
        'user_id' => null,
        'organisation_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created' => 'created',
        'updated' => 'updated',
        'dataset_url' => 'dataset_url',
        'code_access_mode' => 'code_access_mode',
        'cluster_id' => 'cluster_id',
        'docker_username' => 'docker_username',
        'docker_password' => 'docker_password',
        'docker_registry' => 'docker_registry',
        'workflow_spec' => 'workflow_spec',
        'evaluation_code' => 'evaluation_code',
        'storage_capacity' => 'storage_capacity',
        'logs' => 'logs',
        'meta' => 'meta',
        'status' => 'status',
        'user_id' => 'user_id',
        'organisation_id' => 'organisation_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created' => 'setCreated',
        'updated' => 'setUpdated',
        'dataset_url' => 'setDatasetUrl',
        'code_access_mode' => 'setCodeAccessMode',
        'cluster_id' => 'setClusterId',
        'docker_username' => 'setDockerUsername',
        'docker_password' => 'setDockerPassword',
        'docker_registry' => 'setDockerRegistry',
        'workflow_spec' => 'setWorkflowSpec',
        'evaluation_code' => 'setEvaluationCode',
        'storage_capacity' => 'setStorageCapacity',
        'logs' => 'setLogs',
        'meta' => 'setMeta',
        'status' => 'setStatus',
        'user_id' => 'setUserId',
        'organisation_id' => 'setOrganisationId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created' => 'getCreated',
        'updated' => 'getUpdated',
        'dataset_url' => 'getDatasetUrl',
        'code_access_mode' => 'getCodeAccessMode',
        'cluster_id' => 'getClusterId',
        'docker_username' => 'getDockerUsername',
        'docker_password' => 'getDockerPassword',
        'docker_registry' => 'getDockerRegistry',
        'workflow_spec' => 'getWorkflowSpec',
        'evaluation_code' => 'getEvaluationCode',
        'storage_capacity' => 'getStorageCapacity',
        'logs' => 'getLogs',
        'meta' => 'getMeta',
        'status' => 'getStatus',
        'user_id' => 'getUserId',
        'organisation_id' => 'getOrganisationId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['dataset_url'] = isset($data['dataset_url']) ? $data['dataset_url'] : null;
        $this->container['code_access_mode'] = isset($data['code_access_mode']) ? $data['code_access_mode'] : null;
        $this->container['cluster_id'] = isset($data['cluster_id']) ? $data['cluster_id'] : null;
        $this->container['docker_username'] = isset($data['docker_username']) ? $data['docker_username'] : null;
        $this->container['docker_password'] = isset($data['docker_password']) ? $data['docker_password'] : null;
        $this->container['docker_registry'] = isset($data['docker_registry']) ? $data['docker_registry'] : null;
        $this->container['workflow_spec'] = isset($data['workflow_spec']) ? $data['workflow_spec'] : null;
        $this->container['evaluation_code'] = isset($data['evaluation_code']) ? $data['evaluation_code'] : null;
        $this->container['storage_capacity'] = isset($data['storage_capacity']) ? $data['storage_capacity'] : null;
        $this->container['logs'] = isset($data['logs']) ? $data['logs'] : null;
        $this->container['meta'] = isset($data['meta']) ? $data['meta'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['organisation_id'] = isset($data['organisation_id']) ? $data['organisation_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['code_access_mode'] === null) {
            $invalidProperties[] = "'code_access_mode' can't be null";
        }
        if ($this->container['docker_username'] === null) {
            $invalidProperties[] = "'docker_username' can't be null";
        }
        if ($this->container['docker_password'] === null) {
            $invalidProperties[] = "'docker_password' can't be null";
        }
        if ($this->container['evaluation_code'] === null) {
            $invalidProperties[] = "'evaluation_code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Creation time
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated Last updation time
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets dataset_url
     *
     * @return string
     */
    public function getDatasetUrl()
    {
        return $this->container['dataset_url'];
    }

    /**
     * Sets dataset_url
     *
     * @param string $dataset_url S3 link of the Dataset
     *
     * @return $this
     */
    public function setDatasetUrl($dataset_url)
    {
        $this->container['dataset_url'] = $dataset_url;

        return $this;
    }

    /**
     * Gets code_access_mode
     *
     * @return string
     */
    public function getCodeAccessMode()
    {
        return $this->container['code_access_mode'];
    }

    /**
     * Sets code_access_mode
     *
     * @param string $code_access_mode git/http
     *
     * @return $this
     */
    public function setCodeAccessMode($code_access_mode)
    {
        $this->container['code_access_mode'] = $code_access_mode;

        return $this;
    }

    /**
     * Gets cluster_id
     *
     * @return int
     */
    public function getClusterId()
    {
        return $this->container['cluster_id'];
    }

    /**
     * Sets cluster_id
     *
     * @param int $cluster_id Cluster to run the grader on
     *
     * @return $this
     */
    public function setClusterId($cluster_id)
    {
        $this->container['cluster_id'] = $cluster_id;

        return $this;
    }

    /**
     * Gets docker_username
     *
     * @return string
     */
    public function getDockerUsername()
    {
        return $this->container['docker_username'];
    }

    /**
     * Sets docker_username
     *
     * @param string $docker_username Docker registry username
     *
     * @return $this
     */
    public function setDockerUsername($docker_username)
    {
        $this->container['docker_username'] = $docker_username;

        return $this;
    }

    /**
     * Gets docker_password
     *
     * @return string
     */
    public function getDockerPassword()
    {
        return $this->container['docker_password'];
    }

    /**
     * Sets docker_password
     *
     * @param string $docker_password Docker registry password
     *
     * @return $this
     */
    public function setDockerPassword($docker_password)
    {
        $this->container['docker_password'] = $docker_password;

        return $this;
    }

    /**
     * Gets docker_registry
     *
     * @return string
     */
    public function getDockerRegistry()
    {
        return $this->container['docker_registry'];
    }

    /**
     * Sets docker_registry
     *
     * @param string $docker_registry Docker registry URL. Dockerhub is used by default.
     *
     * @return $this
     */
    public function setDockerRegistry($docker_registry)
    {
        $this->container['docker_registry'] = $docker_registry;

        return $this;
    }

    /**
     * Gets workflow_spec
     *
     * @return object
     */
    public function getWorkflowSpec()
    {
        return $this->container['workflow_spec'];
    }

    /**
     * Sets workflow_spec
     *
     * @param object $workflow_spec Argo workflow template spec
     *
     * @return $this
     */
    public function setWorkflowSpec($workflow_spec)
    {
        $this->container['workflow_spec'] = $workflow_spec;

        return $this;
    }

    /**
     * Gets evaluation_code
     *
     * @return string
     */
    public function getEvaluationCode()
    {
        return $this->container['evaluation_code'];
    }

    /**
     * Sets evaluation_code
     *
     * @param string $evaluation_code S3 link to the zip file containing the code that will be used for the evaluation
     *
     * @return $this
     */
    public function setEvaluationCode($evaluation_code)
    {
        $this->container['evaluation_code'] = $evaluation_code;

        return $this;
    }

    /**
     * Gets storage_capacity
     *
     * @return string
     */
    public function getStorageCapacity()
    {
        return $this->container['storage_capacity'];
    }

    /**
     * Sets storage_capacity
     *
     * @param string $storage_capacity Size of the dataset partition to request. Please provide at least 2x of the size of the dataset.
     *
     * @return $this
     */
    public function setStorageCapacity($storage_capacity)
    {
        $this->container['storage_capacity'] = $storage_capacity;

        return $this;
    }

    /**
     * Gets logs
     *
     * @return object
     */
    public function getLogs()
    {
        return $this->container['logs'];
    }

    /**
     * Sets logs
     *
     * @param object $logs Logs from argo workflow
     *
     * @return $this
     */
    public function setLogs($logs)
    {
        $this->container['logs'] = $logs;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return object
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param object $meta Additional meta data of the grader
     *
     * @return $this
     */
    public function setMeta($meta)
    {
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets status
     *
     * @return bool
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param bool $status Status of the grader - True if it ready, False otherwise
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id User ID
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets organisation_id
     *
     * @return int
     */
    public function getOrganisationId()
    {
        return $this->container['organisation_id'];
    }

    /**
     * Sets organisation_id
     *
     * @param int $organisation_id Organisation ID
     *
     * @return $this
     */
    public function setOrganisationId($organisation_id)
    {
        $this->container['organisation_id'] = $organisation_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


