# coding: utf-8

"""
    Evaluations API

    API to create and evaluate custom challenges  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from aicrowd_evaluations.api_client import ApiClient


class ArgoApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def post_generic_feedback_contract(self, model_name, object_id, payload, **kwargs):  # noqa: E501
        """post_generic_feedback_contract  # noqa: E501

        Update the status of an object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generic_feedback_contract(model_name, object_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model_name: (required)
        :param int object_id: (required)
        :param GenericFeedback payload: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_generic_feedback_contract_with_http_info(model_name, object_id, payload, **kwargs)  # noqa: E501
        else:
            (data) = self.post_generic_feedback_contract_with_http_info(model_name, object_id, payload, **kwargs)  # noqa: E501
            return data

    def post_generic_feedback_contract_with_http_info(self, model_name, object_id, payload, **kwargs):  # noqa: E501
        """post_generic_feedback_contract  # noqa: E501

        Update the status of an object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generic_feedback_contract_with_http_info(model_name, object_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model_name: (required)
        :param int object_id: (required)
        :param GenericFeedback payload: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model_name', 'object_id', 'payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_generic_feedback_contract" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model_name' is set
        if ('model_name' not in params or
                params['model_name'] is None):
            raise ValueError("Missing the required parameter `model_name` when calling `post_generic_feedback_contract`")  # noqa: E501
        # verify the required parameter 'object_id' is set
        if ('object_id' not in params or
                params['object_id'] is None):
            raise ValueError("Missing the required parameter `object_id` when calling `post_generic_feedback_contract`")  # noqa: E501
        # verify the required parameter 'payload' is set
        if ('payload' not in params or
                params['payload'] is None):
            raise ValueError("Missing the required parameter `payload` when calling `post_generic_feedback_contract`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model_name' in params:
            path_params['model_name'] = params['model_name']  # noqa: E501
        if 'object_id' in params:
            path_params['object_id'] = params['object_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/argo/{model_name}/{object_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_grader_feedback_dao(self, grader_id, payload, **kwargs):  # noqa: E501
        """post_grader_feedback_dao  # noqa: E501

        Update the grader details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_grader_feedback_dao(grader_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int grader_id: (required)
        :param GraderFeedback payload: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_grader_feedback_dao_with_http_info(grader_id, payload, **kwargs)  # noqa: E501
        else:
            (data) = self.post_grader_feedback_dao_with_http_info(grader_id, payload, **kwargs)  # noqa: E501
            return data

    def post_grader_feedback_dao_with_http_info(self, grader_id, payload, **kwargs):  # noqa: E501
        """post_grader_feedback_dao  # noqa: E501

        Update the grader details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_grader_feedback_dao_with_http_info(grader_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int grader_id: (required)
        :param GraderFeedback payload: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['grader_id', 'payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_grader_feedback_dao" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'grader_id' is set
        if ('grader_id' not in params or
                params['grader_id'] is None):
            raise ValueError("Missing the required parameter `grader_id` when calling `post_grader_feedback_dao`")  # noqa: E501
        # verify the required parameter 'payload' is set
        if ('payload' not in params or
                params['payload'] is None):
            raise ValueError("Missing the required parameter `payload` when calling `post_grader_feedback_dao`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'grader_id' in params:
            path_params['grader_id'] = params['grader_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/argo/graders/{grader_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_submission_feedback_dao(self, submission_id, payload, **kwargs):  # noqa: E501
        """post_submission_feedback_dao  # noqa: E501

        Update the submission details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_submission_feedback_dao(submission_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int submission_id: (required)
        :param SubmissionFeedback payload: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_submission_feedback_dao_with_http_info(submission_id, payload, **kwargs)  # noqa: E501
        else:
            (data) = self.post_submission_feedback_dao_with_http_info(submission_id, payload, **kwargs)  # noqa: E501
            return data

    def post_submission_feedback_dao_with_http_info(self, submission_id, payload, **kwargs):  # noqa: E501
        """post_submission_feedback_dao  # noqa: E501

        Update the submission details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_submission_feedback_dao_with_http_info(submission_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int submission_id: (required)
        :param SubmissionFeedback payload: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['submission_id', 'payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_submission_feedback_dao" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in params or
                params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `post_submission_feedback_dao`")  # noqa: E501
        # verify the required parameter 'payload' is set
        if ('payload' not in params or
                params['payload'] is None):
            raise ValueError("Missing the required parameter `payload` when calling `post_submission_feedback_dao`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'submission_id' in params:
            path_params['submission_id'] = params['submission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/argo/submissions/{submission_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
