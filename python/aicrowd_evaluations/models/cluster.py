# coding: utf-8

"""
    AIcrowd Evaluations API

    API to create and evaluate custom challenges on AIcrowd!  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Cluster(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created': 'datetime',
        'updated': 'datetime',
        'remote_address': 'str',
        'auth_token': 'str',
        'docker_username': 'str',
        'docker_password': 'str',
        'docker_registry': 'str',
        'storage_class': 'str',
        'status': 'bool',
        'meta': 'object',
        'user_id': 'int',
        'organisation_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'updated': 'updated',
        'remote_address': 'remote_address',
        'auth_token': 'auth_token',
        'docker_username': 'docker_username',
        'docker_password': 'docker_password',
        'docker_registry': 'docker_registry',
        'storage_class': 'storage_class',
        'status': 'status',
        'meta': 'meta',
        'user_id': 'user_id',
        'organisation_id': 'organisation_id'
    }

    def __init__(self, id=None, created=None, updated=None, remote_address=None, auth_token=None, docker_username=None, docker_password=None, docker_registry=None, storage_class=None, status=None, meta=None, user_id=None, organisation_id=None):  # noqa: E501
        """Cluster - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._created = None
        self._updated = None
        self._remote_address = None
        self._auth_token = None
        self._docker_username = None
        self._docker_password = None
        self._docker_registry = None
        self._storage_class = None
        self._status = None
        self._meta = None
        self._user_id = None
        self._organisation_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created is not None:
            self.created = created
        if updated is not None:
            self.updated = updated
        self.remote_address = remote_address
        self.auth_token = auth_token
        self.docker_username = docker_username
        self.docker_password = docker_password
        if docker_registry is not None:
            self.docker_registry = docker_registry
        if storage_class is not None:
            self.storage_class = storage_class
        if status is not None:
            self.status = status
        if meta is not None:
            self.meta = meta
        if user_id is not None:
            self.user_id = user_id
        if organisation_id is not None:
            self.organisation_id = organisation_id

    @property
    def id(self):
        """Gets the id of this Cluster.  # noqa: E501

        ID  # noqa: E501

        :return: The id of this Cluster.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Cluster.

        ID  # noqa: E501

        :param id: The id of this Cluster.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created(self):
        """Gets the created of this Cluster.  # noqa: E501

        Creation time  # noqa: E501

        :return: The created of this Cluster.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Cluster.

        Creation time  # noqa: E501

        :param created: The created of this Cluster.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this Cluster.  # noqa: E501

        Last updation time  # noqa: E501

        :return: The updated of this Cluster.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Cluster.

        Last updation time  # noqa: E501

        :param updated: The updated of this Cluster.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def remote_address(self):
        """Gets the remote_address of this Cluster.  # noqa: E501

        Remote address used to connect to the cluster  # noqa: E501

        :return: The remote_address of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._remote_address

    @remote_address.setter
    def remote_address(self, remote_address):
        """Sets the remote_address of this Cluster.

        Remote address used to connect to the cluster  # noqa: E501

        :param remote_address: The remote_address of this Cluster.  # noqa: E501
        :type: str
        """
        if remote_address is None:
            raise ValueError("Invalid value for `remote_address`, must not be `None`")  # noqa: E501

        self._remote_address = remote_address

    @property
    def auth_token(self):
        """Gets the auth_token of this Cluster.  # noqa: E501

        Authentication needed for the cluster  # noqa: E501

        :return: The auth_token of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._auth_token

    @auth_token.setter
    def auth_token(self, auth_token):
        """Sets the auth_token of this Cluster.

        Authentication needed for the cluster  # noqa: E501

        :param auth_token: The auth_token of this Cluster.  # noqa: E501
        :type: str
        """
        if auth_token is None:
            raise ValueError("Invalid value for `auth_token`, must not be `None`")  # noqa: E501

        self._auth_token = auth_token

    @property
    def docker_username(self):
        """Gets the docker_username of this Cluster.  # noqa: E501

        Docker registry username  # noqa: E501

        :return: The docker_username of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._docker_username

    @docker_username.setter
    def docker_username(self, docker_username):
        """Sets the docker_username of this Cluster.

        Docker registry username  # noqa: E501

        :param docker_username: The docker_username of this Cluster.  # noqa: E501
        :type: str
        """
        if docker_username is None:
            raise ValueError("Invalid value for `docker_username`, must not be `None`")  # noqa: E501

        self._docker_username = docker_username

    @property
    def docker_password(self):
        """Gets the docker_password of this Cluster.  # noqa: E501

        Docker registry password  # noqa: E501

        :return: The docker_password of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._docker_password

    @docker_password.setter
    def docker_password(self, docker_password):
        """Sets the docker_password of this Cluster.

        Docker registry password  # noqa: E501

        :param docker_password: The docker_password of this Cluster.  # noqa: E501
        :type: str
        """
        if docker_password is None:
            raise ValueError("Invalid value for `docker_password`, must not be `None`")  # noqa: E501

        self._docker_password = docker_password

    @property
    def docker_registry(self):
        """Gets the docker_registry of this Cluster.  # noqa: E501

        Docker registry URL. Dockerhub is used by default.  # noqa: E501

        :return: The docker_registry of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._docker_registry

    @docker_registry.setter
    def docker_registry(self, docker_registry):
        """Sets the docker_registry of this Cluster.

        Docker registry URL. Dockerhub is used by default.  # noqa: E501

        :param docker_registry: The docker_registry of this Cluster.  # noqa: E501
        :type: str
        """

        self._docker_registry = docker_registry

    @property
    def storage_class(self):
        """Gets the storage_class of this Cluster.  # noqa: E501

        Storage class to use for datasets  # noqa: E501

        :return: The storage_class of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._storage_class

    @storage_class.setter
    def storage_class(self, storage_class):
        """Sets the storage_class of this Cluster.

        Storage class to use for datasets  # noqa: E501

        :param storage_class: The storage_class of this Cluster.  # noqa: E501
        :type: str
        """

        self._storage_class = storage_class

    @property
    def status(self):
        """Gets the status of this Cluster.  # noqa: E501

        Readiness of the cluster  # noqa: E501

        :return: The status of this Cluster.  # noqa: E501
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Cluster.

        Readiness of the cluster  # noqa: E501

        :param status: The status of this Cluster.  # noqa: E501
        :type: bool
        """

        self._status = status

    @property
    def meta(self):
        """Gets the meta of this Cluster.  # noqa: E501

        Additional metadata  # noqa: E501

        :return: The meta of this Cluster.  # noqa: E501
        :rtype: object
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this Cluster.

        Additional metadata  # noqa: E501

        :param meta: The meta of this Cluster.  # noqa: E501
        :type: object
        """

        self._meta = meta

    @property
    def user_id(self):
        """Gets the user_id of this Cluster.  # noqa: E501

        User ID  # noqa: E501

        :return: The user_id of this Cluster.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Cluster.

        User ID  # noqa: E501

        :param user_id: The user_id of this Cluster.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def organisation_id(self):
        """Gets the organisation_id of this Cluster.  # noqa: E501

        Organisation ID  # noqa: E501

        :return: The organisation_id of this Cluster.  # noqa: E501
        :rtype: int
        """
        return self._organisation_id

    @organisation_id.setter
    def organisation_id(self, organisation_id):
        """Sets the organisation_id of this Cluster.

        Organisation ID  # noqa: E501

        :param organisation_id: The organisation_id of this Cluster.  # noqa: E501
        :type: int
        """

        self._organisation_id = organisation_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Cluster, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Cluster):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
