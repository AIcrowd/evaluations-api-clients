# coding: utf-8

"""
    AIcrowd Evaluations API

    API to create and evaluate custom challenges on AIcrowd!  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GraderFeedback(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataset': 'str',
        'status': 'bool',
        'notifications': 'str',
        'workflow_spec': 'str',
        'submission_types': 'str'
    }

    attribute_map = {
        'dataset': 'dataset',
        'status': 'status',
        'notifications': 'notifications',
        'workflow_spec': 'workflow_spec',
        'submission_types': 'submission_types'
    }

    def __init__(self, dataset=None, status=None, notifications=None, workflow_spec=None, submission_types=None):  # noqa: E501
        """GraderFeedback - a model defined in Swagger"""  # noqa: E501

        self._dataset = None
        self._status = None
        self._notifications = None
        self._workflow_spec = None
        self._submission_types = None
        self.discriminator = None

        self.dataset = dataset
        self.status = status
        self.notifications = notifications
        self.workflow_spec = workflow_spec
        self.submission_types = submission_types

    @property
    def dataset(self):
        """Gets the dataset of this GraderFeedback.  # noqa: E501

        Serialized JSON for dataset metadata  # noqa: E501

        :return: The dataset of this GraderFeedback.  # noqa: E501
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this GraderFeedback.

        Serialized JSON for dataset metadata  # noqa: E501

        :param dataset: The dataset of this GraderFeedback.  # noqa: E501
        :type: str
        """
        if dataset is None:
            raise ValueError("Invalid value for `dataset`, must not be `None`")  # noqa: E501

        self._dataset = dataset

    @property
    def status(self):
        """Gets the status of this GraderFeedback.  # noqa: E501

        Status of the grader  # noqa: E501

        :return: The status of this GraderFeedback.  # noqa: E501
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GraderFeedback.

        Status of the grader  # noqa: E501

        :param status: The status of this GraderFeedback.  # noqa: E501
        :type: bool
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def notifications(self):
        """Gets the notifications of this GraderFeedback.  # noqa: E501

        Serialized JSON containing available notifications for the grader  # noqa: E501

        :return: The notifications of this GraderFeedback.  # noqa: E501
        :rtype: str
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this GraderFeedback.

        Serialized JSON containing available notifications for the grader  # noqa: E501

        :param notifications: The notifications of this GraderFeedback.  # noqa: E501
        :type: str
        """
        if notifications is None:
            raise ValueError("Invalid value for `notifications`, must not be `None`")  # noqa: E501

        self._notifications = notifications

    @property
    def workflow_spec(self):
        """Gets the workflow_spec of this GraderFeedback.  # noqa: E501

        Serialized YAML workflow spec  # noqa: E501

        :return: The workflow_spec of this GraderFeedback.  # noqa: E501
        :rtype: str
        """
        return self._workflow_spec

    @workflow_spec.setter
    def workflow_spec(self, workflow_spec):
        """Sets the workflow_spec of this GraderFeedback.

        Serialized YAML workflow spec  # noqa: E501

        :param workflow_spec: The workflow_spec of this GraderFeedback.  # noqa: E501
        :type: str
        """
        if workflow_spec is None:
            raise ValueError("Invalid value for `workflow_spec`, must not be `None`")  # noqa: E501

        self._workflow_spec = workflow_spec

    @property
    def submission_types(self):
        """Gets the submission_types of this GraderFeedback.  # noqa: E501

        Serialized JSON of submissions accepted by the grader  # noqa: E501

        :return: The submission_types of this GraderFeedback.  # noqa: E501
        :rtype: str
        """
        return self._submission_types

    @submission_types.setter
    def submission_types(self, submission_types):
        """Sets the submission_types of this GraderFeedback.

        Serialized JSON of submissions accepted by the grader  # noqa: E501

        :param submission_types: The submission_types of this GraderFeedback.  # noqa: E501
        :type: str
        """
        if submission_types is None:
            raise ValueError("Invalid value for `submission_types`, must not be `None`")  # noqa: E501

        self._submission_types = submission_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GraderFeedback, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GraderFeedback):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
