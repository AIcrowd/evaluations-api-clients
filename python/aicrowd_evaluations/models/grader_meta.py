# coding: utf-8

"""
    AIcrowd Evaluations API

    API to create and evaluate custom challenges on AIcrowd!  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from aicrowd_evaluations.configuration import Configuration


class GraderMeta(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataset': 'object',
        'notifications': 'object',
        'name': 'str',
        'description': 'str',
        'cluster_id': 'int',
        'meta': 'str'
    }

    attribute_map = {
        'dataset': 'dataset',
        'notifications': 'notifications',
        'name': 'name',
        'description': 'description',
        'cluster_id': 'cluster_id',
        'meta': 'meta'
    }

    def __init__(self, dataset=None, notifications=None, name=None, description=None, cluster_id=None, meta=None, _configuration=None):  # noqa: E501
        """GraderMeta - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._dataset = None
        self._notifications = None
        self._name = None
        self._description = None
        self._cluster_id = None
        self._meta = None
        self.discriminator = None

        if dataset is not None:
            self.dataset = dataset
        if notifications is not None:
            self.notifications = notifications
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if meta is not None:
            self.meta = meta

    @property
    def dataset(self):
        """Gets the dataset of this GraderMeta.  # noqa: E501

        Dataset metadata  # noqa: E501

        :return: The dataset of this GraderMeta.  # noqa: E501
        :rtype: object
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this GraderMeta.

        Dataset metadata  # noqa: E501

        :param dataset: The dataset of this GraderMeta.  # noqa: E501
        :type: object
        """

        self._dataset = dataset

    @property
    def notifications(self):
        """Gets the notifications of this GraderMeta.  # noqa: E501

        Notifications available for the grader  # noqa: E501

        :return: The notifications of this GraderMeta.  # noqa: E501
        :rtype: object
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this GraderMeta.

        Notifications available for the grader  # noqa: E501

        :param notifications: The notifications of this GraderMeta.  # noqa: E501
        :type: object
        """

        self._notifications = notifications

    @property
    def name(self):
        """Gets the name of this GraderMeta.  # noqa: E501

        Name of the grader  # noqa: E501

        :return: The name of this GraderMeta.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GraderMeta.

        Name of the grader  # noqa: E501

        :param name: The name of this GraderMeta.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this GraderMeta.  # noqa: E501

        Description of the grader  # noqa: E501

        :return: The description of this GraderMeta.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GraderMeta.

        Description of the grader  # noqa: E501

        :param description: The description of this GraderMeta.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def cluster_id(self):
        """Gets the cluster_id of this GraderMeta.  # noqa: E501

        Cluster to run the grader on  # noqa: E501

        :return: The cluster_id of this GraderMeta.  # noqa: E501
        :rtype: int
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this GraderMeta.

        Cluster to run the grader on  # noqa: E501

        :param cluster_id: The cluster_id of this GraderMeta.  # noqa: E501
        :type: int
        """

        self._cluster_id = cluster_id

    @property
    def meta(self):
        """Gets the meta of this GraderMeta.  # noqa: E501

        Additional meta data of the grader  # noqa: E501

        :return: The meta of this GraderMeta.  # noqa: E501
        :rtype: str
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this GraderMeta.

        Additional meta data of the grader  # noqa: E501

        :param meta: The meta of this GraderMeta.  # noqa: E501
        :type: str
        """

        self._meta = meta

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GraderMeta, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GraderMeta):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GraderMeta):
            return True

        return self.to_dict() != other.to_dict()
