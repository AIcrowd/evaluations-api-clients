# coding: utf-8

"""
    AIcrowd Evaluations API

    API to create and evaluate custom challenges on AIcrowd!  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Organisation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'poc_email': 'str',
        'created_on': 'datetime',
        'total_quota': 'int',
        'quota': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'poc_email': 'poc_email',
        'created_on': 'created_on',
        'total_quota': 'total_quota',
        'quota': 'quota'
    }

    def __init__(self, id=None, name=None, poc_email=None, created_on=None, total_quota=None, quota=None):  # noqa: E501
        """Organisation - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._poc_email = None
        self._created_on = None
        self._total_quota = None
        self._quota = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.poc_email = poc_email
        if created_on is not None:
            self.created_on = created_on
        if total_quota is not None:
            self.total_quota = total_quota
        if quota is not None:
            self.quota = quota

    @property
    def id(self):
        """Gets the id of this Organisation.  # noqa: E501

        ID  # noqa: E501

        :return: The id of this Organisation.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Organisation.

        ID  # noqa: E501

        :param id: The id of this Organisation.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Organisation.  # noqa: E501

        Organisation Name  # noqa: E501

        :return: The name of this Organisation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organisation.

        Organisation Name  # noqa: E501

        :param name: The name of this Organisation.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def poc_email(self):
        """Gets the poc_email of this Organisation.  # noqa: E501

        Point of contact email  # noqa: E501

        :return: The poc_email of this Organisation.  # noqa: E501
        :rtype: str
        """
        return self._poc_email

    @poc_email.setter
    def poc_email(self, poc_email):
        """Sets the poc_email of this Organisation.

        Point of contact email  # noqa: E501

        :param poc_email: The poc_email of this Organisation.  # noqa: E501
        :type: str
        """
        if poc_email is None:
            raise ValueError("Invalid value for `poc_email`, must not be `None`")  # noqa: E501

        self._poc_email = poc_email

    @property
    def created_on(self):
        """Gets the created_on of this Organisation.  # noqa: E501

        Creation Time  # noqa: E501

        :return: The created_on of this Organisation.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Organisation.

        Creation Time  # noqa: E501

        :param created_on: The created_on of this Organisation.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def total_quota(self):
        """Gets the total_quota of this Organisation.  # noqa: E501

        Total assigned evaluation quota  # noqa: E501

        :return: The total_quota of this Organisation.  # noqa: E501
        :rtype: int
        """
        return self._total_quota

    @total_quota.setter
    def total_quota(self, total_quota):
        """Sets the total_quota of this Organisation.

        Total assigned evaluation quota  # noqa: E501

        :param total_quota: The total_quota of this Organisation.  # noqa: E501
        :type: int
        """

        self._total_quota = total_quota

    @property
    def quota(self):
        """Gets the quota of this Organisation.  # noqa: E501

        Available evaluation quota  # noqa: E501

        :return: The quota of this Organisation.  # noqa: E501
        :rtype: int
        """
        return self._quota

    @quota.setter
    def quota(self, quota):
        """Sets the quota of this Organisation.

        Available evaluation quota  # noqa: E501

        :param quota: The quota of this Organisation.  # noqa: E501
        :type: int
        """

        self._quota = quota

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Organisation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organisation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
