=begin
#Evaluations API

#API to create and evaluate custom challenges

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'uri'

module AIcrowdEvaluations
  class ArgoApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Update the status of an object
    # @param model_name 
    # @param object_id 
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_generic_feedback_contract(model_name, object_id, payload, opts = {})
      post_generic_feedback_contract_with_http_info(model_name, object_id, payload, opts)
      nil
    end

    # Update the status of an object
    # @param model_name 
    # @param object_id 
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_generic_feedback_contract_with_http_info(model_name, object_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ArgoApi.post_generic_feedback_contract ...'
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling ArgoApi.post_generic_feedback_contract"
      end
      # verify the required parameter 'object_id' is set
      if @api_client.config.client_side_validation && object_id.nil?
        fail ArgumentError, "Missing the required parameter 'object_id' when calling ArgoApi.post_generic_feedback_contract"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ArgoApi.post_generic_feedback_contract"
      end
      # resource path
      local_var_path = '/argo/{model_name}/{object_id}'.sub('{' + 'model_name' + '}', model_name.to_s).sub('{' + 'object_id' + '}', object_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArgoApi#post_generic_feedback_contract\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the grader details
    # @param grader_id 
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_grader_feedback_dao(grader_id, payload, opts = {})
      post_grader_feedback_dao_with_http_info(grader_id, payload, opts)
      nil
    end

    # Update the grader details
    # @param grader_id 
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_grader_feedback_dao_with_http_info(grader_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ArgoApi.post_grader_feedback_dao ...'
      end
      # verify the required parameter 'grader_id' is set
      if @api_client.config.client_side_validation && grader_id.nil?
        fail ArgumentError, "Missing the required parameter 'grader_id' when calling ArgoApi.post_grader_feedback_dao"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ArgoApi.post_grader_feedback_dao"
      end
      # resource path
      local_var_path = '/argo/graders/{grader_id}'.sub('{' + 'grader_id' + '}', grader_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArgoApi#post_grader_feedback_dao\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the submission details
    # @param submission_id 
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_submission_feedback_dao(submission_id, payload, opts = {})
      post_submission_feedback_dao_with_http_info(submission_id, payload, opts)
      nil
    end

    # Update the submission details
    # @param submission_id 
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_submission_feedback_dao_with_http_info(submission_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ArgoApi.post_submission_feedback_dao ...'
      end
      # verify the required parameter 'submission_id' is set
      if @api_client.config.client_side_validation && submission_id.nil?
        fail ArgumentError, "Missing the required parameter 'submission_id' when calling ArgoApi.post_submission_feedback_dao"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ArgoApi.post_submission_feedback_dao"
      end
      # resource path
      local_var_path = '/argo/submissions/{submission_id}'.sub('{' + 'submission_id' + '}', submission_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArgoApi#post_submission_feedback_dao\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
