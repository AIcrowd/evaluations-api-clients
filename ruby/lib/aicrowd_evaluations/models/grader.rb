=begin
#AIcrowd Evaluations API

#API to create and evaluate custom challenges on AIcrowd!

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.27

=end

require 'date'

module AIcrowdEvaluations
  class Grader
    # ID
    attr_accessor :id

    # Creation time
    attr_accessor :created

    # Last updation time
    attr_accessor :updated

    # Grader archival status
    attr_accessor :archived

    # Dataset metadata
    attr_accessor :dataset

    # Cluster to run the grader on
    attr_accessor :cluster_id

    # Description of the grader
    attr_accessor :description

    # Argo workflow template spec
    attr_accessor :workflow_spec

    # Git URL of the repository containing the code that will be used for the evaluation
    attr_accessor :evaluator_repo

    # Git branch/tag that should be used with the evaluator repository.
    attr_accessor :evaluator_repo_tag

    # Name of the grader
    attr_accessor :name

    # Notifications available for the grader.
    attr_accessor :notifications

    # Logs from argo workflow
    attr_accessor :logs

    # Additional meta data of the grader
    attr_accessor :meta

    # Status of the grader - True if it ready, False otherwise
    attr_accessor :status

    # List of key:value pair of secrets that will be replace `{key}` in aicrowd.yaml
    attr_accessor :secrets

    # Name of the workflow used to setup grader
    attr_accessor :wf_name

    # Allowed extensions for the grader
    attr_accessor :allowed_extensions

    # Workflow priority to assign
    attr_accessor :workflow_priority

    # Path to grader configuration (default: aicrowd.yaml)
    attr_accessor :config_path

    # Docker repo to use for grader images
    attr_accessor :docker_repo

    # User ID
    attr_accessor :user_id

    # Organisation ID
    attr_accessor :organisation_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'created' => :'created',
        :'updated' => :'updated',
        :'archived' => :'archived',
        :'dataset' => :'dataset',
        :'cluster_id' => :'cluster_id',
        :'description' => :'description',
        :'workflow_spec' => :'workflow_spec',
        :'evaluator_repo' => :'evaluator_repo',
        :'evaluator_repo_tag' => :'evaluator_repo_tag',
        :'name' => :'name',
        :'notifications' => :'notifications',
        :'logs' => :'logs',
        :'meta' => :'meta',
        :'status' => :'status',
        :'secrets' => :'secrets',
        :'wf_name' => :'wf_name',
        :'allowed_extensions' => :'allowed_extensions',
        :'workflow_priority' => :'workflow_priority',
        :'config_path' => :'config_path',
        :'docker_repo' => :'docker_repo',
        :'user_id' => :'user_id',
        :'organisation_id' => :'organisation_id'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'created' => :'DateTime',
        :'updated' => :'DateTime',
        :'archived' => :'BOOLEAN',
        :'dataset' => :'Object',
        :'cluster_id' => :'Integer',
        :'description' => :'String',
        :'workflow_spec' => :'Object',
        :'evaluator_repo' => :'String',
        :'evaluator_repo_tag' => :'String',
        :'name' => :'String',
        :'notifications' => :'String',
        :'logs' => :'String',
        :'meta' => :'String',
        :'status' => :'String',
        :'secrets' => :'Object',
        :'wf_name' => :'String',
        :'allowed_extensions' => :'Object',
        :'workflow_priority' => :'Integer',
        :'config_path' => :'String',
        :'docker_repo' => :'String',
        :'user_id' => :'Integer',
        :'organisation_id' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'updated')
        self.updated = attributes[:'updated']
      end

      if attributes.has_key?(:'archived')
        self.archived = attributes[:'archived']
      end

      if attributes.has_key?(:'dataset')
        self.dataset = attributes[:'dataset']
      end

      if attributes.has_key?(:'cluster_id')
        self.cluster_id = attributes[:'cluster_id']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'workflow_spec')
        self.workflow_spec = attributes[:'workflow_spec']
      end

      if attributes.has_key?(:'evaluator_repo')
        self.evaluator_repo = attributes[:'evaluator_repo']
      end

      if attributes.has_key?(:'evaluator_repo_tag')
        self.evaluator_repo_tag = attributes[:'evaluator_repo_tag']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'notifications')
        self.notifications = attributes[:'notifications']
      end

      if attributes.has_key?(:'logs')
        self.logs = attributes[:'logs']
      end

      if attributes.has_key?(:'meta')
        self.meta = attributes[:'meta']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'secrets')
        self.secrets = attributes[:'secrets']
      end

      if attributes.has_key?(:'wf_name')
        self.wf_name = attributes[:'wf_name']
      end

      if attributes.has_key?(:'allowed_extensions')
        self.allowed_extensions = attributes[:'allowed_extensions']
      end

      if attributes.has_key?(:'workflow_priority')
        self.workflow_priority = attributes[:'workflow_priority']
      end

      if attributes.has_key?(:'config_path')
        self.config_path = attributes[:'config_path']
      end

      if attributes.has_key?(:'docker_repo')
        self.docker_repo = attributes[:'docker_repo']
      end

      if attributes.has_key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.has_key?(:'organisation_id')
        self.organisation_id = attributes[:'organisation_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @evaluator_repo.nil?
        invalid_properties.push('invalid value for "evaluator_repo", evaluator_repo cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @evaluator_repo.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          created == o.created &&
          updated == o.updated &&
          archived == o.archived &&
          dataset == o.dataset &&
          cluster_id == o.cluster_id &&
          description == o.description &&
          workflow_spec == o.workflow_spec &&
          evaluator_repo == o.evaluator_repo &&
          evaluator_repo_tag == o.evaluator_repo_tag &&
          name == o.name &&
          notifications == o.notifications &&
          logs == o.logs &&
          meta == o.meta &&
          status == o.status &&
          secrets == o.secrets &&
          wf_name == o.wf_name &&
          allowed_extensions == o.allowed_extensions &&
          workflow_priority == o.workflow_priority &&
          config_path == o.config_path &&
          docker_repo == o.docker_repo &&
          user_id == o.user_id &&
          organisation_id == o.organisation_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, created, updated, archived, dataset, cluster_id, description, workflow_spec, evaluator_repo, evaluator_repo_tag, name, notifications, logs, meta, status, secrets, wf_name, allowed_extensions, workflow_priority, config_path, docker_repo, user_id, organisation_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AIcrowdEvaluations.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
