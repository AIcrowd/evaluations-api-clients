=begin
#Evaluations API

#API to create and evaluate custom challenges

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'date'

module SwaggerClient
  class Grader
    # ID
    attr_accessor :id

    # Creation time
    attr_accessor :created

    # Last updation time
    attr_accessor :updated

    # S3 link of the Dataset
    attr_accessor :dataset_url

    # git/http
    attr_accessor :code_access_mode

    # Cluster to run the grader on
    attr_accessor :cluster_id

    # Docker registry username
    attr_accessor :docker_username

    # Docker registry password
    attr_accessor :docker_password

    # Docker registry URL. Dockerhub is used by default.
    attr_accessor :docker_registry

    # Argo workflow template spec
    attr_accessor :workflow_spec

    # S3 link to the zip file containing the code that will be used for the evaluation
    attr_accessor :evaluation_code

    # Size of the dataset partition to request. Please provide at least 2x of the size of the dataset.
    attr_accessor :storage_capacity

    # Logs from argo workflow
    attr_accessor :logs

    # Additional meta data of the grader
    attr_accessor :meta

    # Status of the grader - True if it ready, False otherwise
    attr_accessor :status

    # User ID
    attr_accessor :user_id

    # Organisation ID
    attr_accessor :organisation_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'created' => :'created',
        :'updated' => :'updated',
        :'dataset_url' => :'dataset_url',
        :'code_access_mode' => :'code_access_mode',
        :'cluster_id' => :'cluster_id',
        :'docker_username' => :'docker_username',
        :'docker_password' => :'docker_password',
        :'docker_registry' => :'docker_registry',
        :'workflow_spec' => :'workflow_spec',
        :'evaluation_code' => :'evaluation_code',
        :'storage_capacity' => :'storage_capacity',
        :'logs' => :'logs',
        :'meta' => :'meta',
        :'status' => :'status',
        :'user_id' => :'user_id',
        :'organisation_id' => :'organisation_id'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'created' => :'DateTime',
        :'updated' => :'DateTime',
        :'dataset_url' => :'String',
        :'code_access_mode' => :'String',
        :'cluster_id' => :'Integer',
        :'docker_username' => :'String',
        :'docker_password' => :'String',
        :'docker_registry' => :'String',
        :'workflow_spec' => :'Object',
        :'evaluation_code' => :'String',
        :'storage_capacity' => :'String',
        :'logs' => :'Object',
        :'meta' => :'Object',
        :'status' => :'BOOLEAN',
        :'user_id' => :'Integer',
        :'organisation_id' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'updated')
        self.updated = attributes[:'updated']
      end

      if attributes.has_key?(:'dataset_url')
        self.dataset_url = attributes[:'dataset_url']
      end

      if attributes.has_key?(:'code_access_mode')
        self.code_access_mode = attributes[:'code_access_mode']
      end

      if attributes.has_key?(:'cluster_id')
        self.cluster_id = attributes[:'cluster_id']
      end

      if attributes.has_key?(:'docker_username')
        self.docker_username = attributes[:'docker_username']
      end

      if attributes.has_key?(:'docker_password')
        self.docker_password = attributes[:'docker_password']
      end

      if attributes.has_key?(:'docker_registry')
        self.docker_registry = attributes[:'docker_registry']
      end

      if attributes.has_key?(:'workflow_spec')
        self.workflow_spec = attributes[:'workflow_spec']
      end

      if attributes.has_key?(:'evaluation_code')
        self.evaluation_code = attributes[:'evaluation_code']
      end

      if attributes.has_key?(:'storage_capacity')
        self.storage_capacity = attributes[:'storage_capacity']
      end

      if attributes.has_key?(:'logs')
        self.logs = attributes[:'logs']
      end

      if attributes.has_key?(:'meta')
        self.meta = attributes[:'meta']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.has_key?(:'organisation_id')
        self.organisation_id = attributes[:'organisation_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @code_access_mode.nil?
        invalid_properties.push('invalid value for "code_access_mode", code_access_mode cannot be nil.')
      end

      if @docker_username.nil?
        invalid_properties.push('invalid value for "docker_username", docker_username cannot be nil.')
      end

      if @docker_password.nil?
        invalid_properties.push('invalid value for "docker_password", docker_password cannot be nil.')
      end

      if @evaluation_code.nil?
        invalid_properties.push('invalid value for "evaluation_code", evaluation_code cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @code_access_mode.nil?
      return false if @docker_username.nil?
      return false if @docker_password.nil?
      return false if @evaluation_code.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          created == o.created &&
          updated == o.updated &&
          dataset_url == o.dataset_url &&
          code_access_mode == o.code_access_mode &&
          cluster_id == o.cluster_id &&
          docker_username == o.docker_username &&
          docker_password == o.docker_password &&
          docker_registry == o.docker_registry &&
          workflow_spec == o.workflow_spec &&
          evaluation_code == o.evaluation_code &&
          storage_capacity == o.storage_capacity &&
          logs == o.logs &&
          meta == o.meta &&
          status == o.status &&
          user_id == o.user_id &&
          organisation_id == o.organisation_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, created, updated, dataset_url, code_access_mode, cluster_id, docker_username, docker_password, docker_registry, workflow_spec, evaluation_code, storage_capacity, logs, meta, status, user_id, organisation_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
