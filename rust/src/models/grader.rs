/* 
 * Evaluations API
 *
 * API to create and evaluate custom challenges
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Grader {
  /// ID
  #[serde(rename = "id")]
  id: Option<i32>,
  /// Creation time
  #[serde(rename = "created")]
  created: Option<String>,
  /// Last updation time
  #[serde(rename = "updated")]
  updated: Option<String>,
  /// Dataset metadata
  #[serde(rename = "dataset")]
  dataset: Option<Value>,
  /// Cluster to run the grader on
  #[serde(rename = "cluster_id")]
  cluster_id: Option<i32>,
  /// Argo workflow template spec
  #[serde(rename = "workflow_spec")]
  workflow_spec: Option<Value>,
  /// Git URL of the repository containing the code that will be used for the evaluation
  #[serde(rename = "evaluator_repo")]
  evaluator_repo: String,
  /// Git branch/tag that should be used with the evaluator repository.
  #[serde(rename = "evaluator_repo_tag")]
  evaluator_repo_tag: Option<String>,
  /// Logs from argo workflow
  #[serde(rename = "logs")]
  logs: Option<Value>,
  /// Additional meta data of the grader
  #[serde(rename = "meta")]
  meta: Option<Value>,
  /// Status of the grader - True if it ready, False otherwise
  #[serde(rename = "status")]
  status: Option<String>,
  /// Type of submissions allowed on the grader
  #[serde(rename = "submission_types")]
  submission_types: Option<Value>,
  /// User ID
  #[serde(rename = "user_id")]
  user_id: Option<i32>,
  /// Organisation ID
  #[serde(rename = "organisation_id")]
  organisation_id: Option<i32>
}

impl Grader {
  pub fn new(evaluator_repo: String) -> Grader {
    Grader {
      id: None,
      created: None,
      updated: None,
      dataset: None,
      cluster_id: None,
      workflow_spec: None,
      evaluator_repo: evaluator_repo,
      evaluator_repo_tag: None,
      logs: None,
      meta: None,
      status: None,
      submission_types: None,
      user_id: None,
      organisation_id: None
    }
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> Grader {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_created(&mut self, created: String) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: String) -> Grader {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&String> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_updated(&mut self, updated: String) {
    self.updated = Some(updated);
  }

  pub fn with_updated(mut self, updated: String) -> Grader {
    self.updated = Some(updated);
    self
  }

  pub fn updated(&self) -> Option<&String> {
    self.updated.as_ref()
  }

  pub fn reset_updated(&mut self) {
    self.updated = None;
  }

  pub fn set_dataset(&mut self, dataset: Value) {
    self.dataset = Some(dataset);
  }

  pub fn with_dataset(mut self, dataset: Value) -> Grader {
    self.dataset = Some(dataset);
    self
  }

  pub fn dataset(&self) -> Option<&Value> {
    self.dataset.as_ref()
  }

  pub fn reset_dataset(&mut self) {
    self.dataset = None;
  }

  pub fn set_cluster_id(&mut self, cluster_id: i32) {
    self.cluster_id = Some(cluster_id);
  }

  pub fn with_cluster_id(mut self, cluster_id: i32) -> Grader {
    self.cluster_id = Some(cluster_id);
    self
  }

  pub fn cluster_id(&self) -> Option<&i32> {
    self.cluster_id.as_ref()
  }

  pub fn reset_cluster_id(&mut self) {
    self.cluster_id = None;
  }

  pub fn set_workflow_spec(&mut self, workflow_spec: Value) {
    self.workflow_spec = Some(workflow_spec);
  }

  pub fn with_workflow_spec(mut self, workflow_spec: Value) -> Grader {
    self.workflow_spec = Some(workflow_spec);
    self
  }

  pub fn workflow_spec(&self) -> Option<&Value> {
    self.workflow_spec.as_ref()
  }

  pub fn reset_workflow_spec(&mut self) {
    self.workflow_spec = None;
  }

  pub fn set_evaluator_repo(&mut self, evaluator_repo: String) {
    self.evaluator_repo = evaluator_repo;
  }

  pub fn with_evaluator_repo(mut self, evaluator_repo: String) -> Grader {
    self.evaluator_repo = evaluator_repo;
    self
  }

  pub fn evaluator_repo(&self) -> &String {
    &self.evaluator_repo
  }


  pub fn set_evaluator_repo_tag(&mut self, evaluator_repo_tag: String) {
    self.evaluator_repo_tag = Some(evaluator_repo_tag);
  }

  pub fn with_evaluator_repo_tag(mut self, evaluator_repo_tag: String) -> Grader {
    self.evaluator_repo_tag = Some(evaluator_repo_tag);
    self
  }

  pub fn evaluator_repo_tag(&self) -> Option<&String> {
    self.evaluator_repo_tag.as_ref()
  }

  pub fn reset_evaluator_repo_tag(&mut self) {
    self.evaluator_repo_tag = None;
  }

  pub fn set_logs(&mut self, logs: Value) {
    self.logs = Some(logs);
  }

  pub fn with_logs(mut self, logs: Value) -> Grader {
    self.logs = Some(logs);
    self
  }

  pub fn logs(&self) -> Option<&Value> {
    self.logs.as_ref()
  }

  pub fn reset_logs(&mut self) {
    self.logs = None;
  }

  pub fn set_meta(&mut self, meta: Value) {
    self.meta = Some(meta);
  }

  pub fn with_meta(mut self, meta: Value) -> Grader {
    self.meta = Some(meta);
    self
  }

  pub fn meta(&self) -> Option<&Value> {
    self.meta.as_ref()
  }

  pub fn reset_meta(&mut self) {
    self.meta = None;
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> Grader {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_submission_types(&mut self, submission_types: Value) {
    self.submission_types = Some(submission_types);
  }

  pub fn with_submission_types(mut self, submission_types: Value) -> Grader {
    self.submission_types = Some(submission_types);
    self
  }

  pub fn submission_types(&self) -> Option<&Value> {
    self.submission_types.as_ref()
  }

  pub fn reset_submission_types(&mut self) {
    self.submission_types = None;
  }

  pub fn set_user_id(&mut self, user_id: i32) {
    self.user_id = Some(user_id);
  }

  pub fn with_user_id(mut self, user_id: i32) -> Grader {
    self.user_id = Some(user_id);
    self
  }

  pub fn user_id(&self) -> Option<&i32> {
    self.user_id.as_ref()
  }

  pub fn reset_user_id(&mut self) {
    self.user_id = None;
  }

  pub fn set_organisation_id(&mut self, organisation_id: i32) {
    self.organisation_id = Some(organisation_id);
  }

  pub fn with_organisation_id(mut self, organisation_id: i32) -> Grader {
    self.organisation_id = Some(organisation_id);
    self
  }

  pub fn organisation_id(&self) -> Option<&i32> {
    self.organisation_id.as_ref()
  }

  pub fn reset_organisation_id(&mut self) {
    self.organisation_id = None;
  }

}



