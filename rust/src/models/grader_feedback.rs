/* 
 * Evaluations API
 *
 * API to create and evaluate custom challenges
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GraderFeedback {
  /// Serialized JSON for dataset metadata
  #[serde(rename = "dataset")]
  dataset: String,
  /// Status of the grader
  #[serde(rename = "status")]
  status: bool,
  /// Serialized YAML workflow spec
  #[serde(rename = "workflow_spec")]
  workflow_spec: String,
  /// Serialized JSON of submissions accepted by the grader
  #[serde(rename = "submission_types")]
  submission_types: String
}

impl GraderFeedback {
  pub fn new(dataset: String, status: bool, workflow_spec: String, submission_types: String) -> GraderFeedback {
    GraderFeedback {
      dataset: dataset,
      status: status,
      workflow_spec: workflow_spec,
      submission_types: submission_types
    }
  }

  pub fn set_dataset(&mut self, dataset: String) {
    self.dataset = dataset;
  }

  pub fn with_dataset(mut self, dataset: String) -> GraderFeedback {
    self.dataset = dataset;
    self
  }

  pub fn dataset(&self) -> &String {
    &self.dataset
  }


  pub fn set_status(&mut self, status: bool) {
    self.status = status;
  }

  pub fn with_status(mut self, status: bool) -> GraderFeedback {
    self.status = status;
    self
  }

  pub fn status(&self) -> &bool {
    &self.status
  }


  pub fn set_workflow_spec(&mut self, workflow_spec: String) {
    self.workflow_spec = workflow_spec;
  }

  pub fn with_workflow_spec(mut self, workflow_spec: String) -> GraderFeedback {
    self.workflow_spec = workflow_spec;
    self
  }

  pub fn workflow_spec(&self) -> &String {
    &self.workflow_spec
  }


  pub fn set_submission_types(&mut self, submission_types: String) {
    self.submission_types = submission_types;
  }

  pub fn with_submission_types(mut self, submission_types: String) -> GraderFeedback {
    self.submission_types = submission_types;
    self
  }

  pub fn submission_types(&self) -> &String {
    &self.submission_types
  }


}



