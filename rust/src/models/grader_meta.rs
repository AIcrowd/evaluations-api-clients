/* 
 * AIcrowd Evaluations API
 *
 * API to create and evaluate custom challenges on AIcrowd!
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GraderMeta {
  /// Dataset metadata
  #[serde(rename = "dataset")]
  dataset: Option<Value>,
  /// Notifications available for the grader
  #[serde(rename = "notifications")]
  notifications: Option<Value>,
  /// Name of the grader
  #[serde(rename = "name")]
  name: Option<String>,
  /// Description of the grader
  #[serde(rename = "description")]
  description: Option<String>,
  /// Cluster to run the grader on
  #[serde(rename = "cluster_id")]
  cluster_id: Option<i32>,
  /// Additional meta data of the grader
  #[serde(rename = "meta")]
  meta: Option<String>
}

impl GraderMeta {
  pub fn new() -> GraderMeta {
    GraderMeta {
      dataset: None,
      notifications: None,
      name: None,
      description: None,
      cluster_id: None,
      meta: None
    }
  }

  pub fn set_dataset(&mut self, dataset: Value) {
    self.dataset = Some(dataset);
  }

  pub fn with_dataset(mut self, dataset: Value) -> GraderMeta {
    self.dataset = Some(dataset);
    self
  }

  pub fn dataset(&self) -> Option<&Value> {
    self.dataset.as_ref()
  }

  pub fn reset_dataset(&mut self) {
    self.dataset = None;
  }

  pub fn set_notifications(&mut self, notifications: Value) {
    self.notifications = Some(notifications);
  }

  pub fn with_notifications(mut self, notifications: Value) -> GraderMeta {
    self.notifications = Some(notifications);
    self
  }

  pub fn notifications(&self) -> Option<&Value> {
    self.notifications.as_ref()
  }

  pub fn reset_notifications(&mut self) {
    self.notifications = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> GraderMeta {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> GraderMeta {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_cluster_id(&mut self, cluster_id: i32) {
    self.cluster_id = Some(cluster_id);
  }

  pub fn with_cluster_id(mut self, cluster_id: i32) -> GraderMeta {
    self.cluster_id = Some(cluster_id);
    self
  }

  pub fn cluster_id(&self) -> Option<&i32> {
    self.cluster_id.as_ref()
  }

  pub fn reset_cluster_id(&mut self) {
    self.cluster_id = None;
  }

  pub fn set_meta(&mut self, meta: String) {
    self.meta = Some(meta);
  }

  pub fn with_meta(mut self, meta: String) -> GraderMeta {
    self.meta = Some(meta);
    self
  }

  pub fn meta(&self) -> Option<&String> {
    self.meta.as_ref()
  }

  pub fn reset_meta(&mut self) {
    self.meta = None;
  }

}



