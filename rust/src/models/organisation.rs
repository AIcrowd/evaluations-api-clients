/* 
 * AIcrowd Evaluations API
 *
 * API to create and evaluate custom challenges on AIcrowd!
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Organisation {
  /// ID
  #[serde(rename = "id")]
  id: Option<i32>,
  /// Organisation Name
  #[serde(rename = "name")]
  name: String,
  /// Point of contact email
  #[serde(rename = "poc_email")]
  poc_email: String,
  /// Creation Time
  #[serde(rename = "created_on")]
  created_on: Option<String>,
  /// Total assigned evaluation quota
  #[serde(rename = "total_quota")]
  total_quota: Option<i32>,
  /// Available evaluation quota
  #[serde(rename = "quota")]
  quota: Option<i32>
}

impl Organisation {
  pub fn new(name: String, poc_email: String) -> Organisation {
    Organisation {
      id: None,
      name: name,
      poc_email: poc_email,
      created_on: None,
      total_quota: None,
      quota: None
    }
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> Organisation {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> Organisation {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_poc_email(&mut self, poc_email: String) {
    self.poc_email = poc_email;
  }

  pub fn with_poc_email(mut self, poc_email: String) -> Organisation {
    self.poc_email = poc_email;
    self
  }

  pub fn poc_email(&self) -> &String {
    &self.poc_email
  }


  pub fn set_created_on(&mut self, created_on: String) {
    self.created_on = Some(created_on);
  }

  pub fn with_created_on(mut self, created_on: String) -> Organisation {
    self.created_on = Some(created_on);
    self
  }

  pub fn created_on(&self) -> Option<&String> {
    self.created_on.as_ref()
  }

  pub fn reset_created_on(&mut self) {
    self.created_on = None;
  }

  pub fn set_total_quota(&mut self, total_quota: i32) {
    self.total_quota = Some(total_quota);
  }

  pub fn with_total_quota(mut self, total_quota: i32) -> Organisation {
    self.total_quota = Some(total_quota);
    self
  }

  pub fn total_quota(&self) -> Option<&i32> {
    self.total_quota.as_ref()
  }

  pub fn reset_total_quota(&mut self) {
    self.total_quota = None;
  }

  pub fn set_quota(&mut self, quota: i32) {
    self.quota = Some(quota);
  }

  pub fn with_quota(mut self, quota: i32) -> Organisation {
    self.quota = Some(quota);
    self
  }

  pub fn quota(&self) -> Option<&i32> {
    self.quota.as_ref()
  }

  pub fn reset_quota(&mut self) {
    self.quota = None;
  }

}



