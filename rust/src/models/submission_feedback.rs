/* 
 * AIcrowd Evaluations API
 *
 * API to create and evaluate custom challenges on AIcrowd!
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SubmissionFeedback {
  /// Status of the submission
  #[serde(rename = "status")]
  status: String,
  /// S3 link of the outputs
  #[serde(rename = "outputs")]
  outputs: String,
  /// Additional outputs
  #[serde(rename = "score")]
  score: f32,
  /// Output on stdout for run-evaluator.run-submitted-code step
  #[serde(rename = "logs")]
  logs: String
}

impl SubmissionFeedback {
  pub fn new(status: String, outputs: String, score: f32, logs: String) -> SubmissionFeedback {
    SubmissionFeedback {
      status: status,
      outputs: outputs,
      score: score,
      logs: logs
    }
  }

  pub fn set_status(&mut self, status: String) {
    self.status = status;
  }

  pub fn with_status(mut self, status: String) -> SubmissionFeedback {
    self.status = status;
    self
  }

  pub fn status(&self) -> &String {
    &self.status
  }


  pub fn set_outputs(&mut self, outputs: String) {
    self.outputs = outputs;
  }

  pub fn with_outputs(mut self, outputs: String) -> SubmissionFeedback {
    self.outputs = outputs;
    self
  }

  pub fn outputs(&self) -> &String {
    &self.outputs
  }


  pub fn set_score(&mut self, score: f32) {
    self.score = score;
  }

  pub fn with_score(mut self, score: f32) -> SubmissionFeedback {
    self.score = score;
    self
  }

  pub fn score(&self) -> &f32 {
    &self.score
  }


  pub fn set_logs(&mut self, logs: String) {
    self.logs = logs;
  }

  pub fn with_logs(mut self, logs: String) -> SubmissionFeedback {
    self.logs = logs;
    self
  }

  pub fn logs(&self) -> &String {
    &self.logs
  }


}



