/* 
 * AIcrowd Evaluations API
 *
 * API to create and evaluate custom challenges on AIcrowd!
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SubmissionRetry {
  /// List of submission IDs queued for evaluation
  #[serde(rename = "queued")]
  queued: Option<Value>,
  /// List of submission IDs failed to get queued
  #[serde(rename = "failed")]
  failed: Option<Vec<i32>>
}

impl SubmissionRetry {
  pub fn new() -> SubmissionRetry {
    SubmissionRetry {
      queued: None,
      failed: None
    }
  }

  pub fn set_queued(&mut self, queued: Value) {
    self.queued = Some(queued);
  }

  pub fn with_queued(mut self, queued: Value) -> SubmissionRetry {
    self.queued = Some(queued);
    self
  }

  pub fn queued(&self) -> Option<&Value> {
    self.queued.as_ref()
  }

  pub fn reset_queued(&mut self) {
    self.queued = None;
  }

  pub fn set_failed(&mut self, failed: Vec<i32>) {
    self.failed = Some(failed);
  }

  pub fn with_failed(mut self, failed: Vec<i32>) -> SubmissionRetry {
    self.failed = Some(failed);
    self
  }

  pub fn failed(&self) -> Option<&Vec<i32>> {
    self.failed.as_ref()
  }

  pub fn reset_failed(&mut self) {
    self.failed = None;
  }

}



