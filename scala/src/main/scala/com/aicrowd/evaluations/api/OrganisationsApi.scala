/**
 * AIcrowd Evaluations API
 * API to create and evaluate custom challenges on AIcrowd!
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.aicrowd.evaluations.api

import java.text.SimpleDateFormat

import com.aicrowd.evaluations.models.Organisation
import com.aicrowd.evaluations.models.OrganisationQuota
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class OrganisationsApi(
  val defBasePath: String = "https://localhost/v1",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new OrganisationsApiAsyncHelper(client, config)

  /**
   * 
   * Create a new organisation
   *
   * @param payload  
   * @param xFields An optional fields mask (optional)
   * @return Organisation
   */
  def createOrganisation(payload: Organisation, xFields: Option[String] = None): Option[Organisation] = {
    val await = Try(Await.result(createOrganisationAsync(payload, xFields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * Create a new organisation
   *
   * @param payload  
   * @param xFields An optional fields mask (optional)
   * @return Future(Organisation)
   */
  def createOrganisationAsync(payload: Organisation, xFields: Option[String] = None): Future[Organisation] = {
      helper.createOrganisation(payload, xFields)
  }

  /**
   * 
   * Delete an Organisation
   *
   * @param organisationId  
   * @return void
   */
  def deleteOrganisation(organisationId: Integer) = {
    val await = Try(Await.result(deleteOrganisationAsync(organisationId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * Delete an Organisation
   *
   * @param organisationId  
   * @return Future(void)
   */
  def deleteOrganisationAsync(organisationId: Integer) = {
      helper.deleteOrganisation(organisationId)
  }

  /**
   * 
   * Get details of an organisation
   *
   * @param organisationId  
   * @param xFields An optional fields mask (optional)
   * @return Organisation
   */
  def getOrganisation(organisationId: Integer, xFields: Option[String] = None): Option[Organisation] = {
    val await = Try(Await.result(getOrganisationAsync(organisationId, xFields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * Get details of an organisation
   *
   * @param organisationId  
   * @param xFields An optional fields mask (optional)
   * @return Future(Organisation)
   */
  def getOrganisationAsync(organisationId: Integer, xFields: Option[String] = None): Future[Organisation] = {
      helper.getOrganisation(organisationId, xFields)
  }

  /**
   * 
   * List all organisations
   *
   * @param xFields An optional fields mask (optional)
   * @return List[Organisation]
   */
  def listOrganisations(xFields: Option[String] = None): Option[List[Organisation]] = {
    val await = Try(Await.result(listOrganisationsAsync(xFields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * List all organisations
   *
   * @param xFields An optional fields mask (optional)
   * @return Future(List[Organisation])
   */
  def listOrganisationsAsync(xFields: Option[String] = None): Future[List[Organisation]] = {
      helper.listOrganisations(xFields)
  }

  /**
   * 
   * Update an Organisation
   *
   * @param organisationId  
   * @param payload  
   * @param xFields An optional fields mask (optional)
   * @return Organisation
   */
  def updateOrganisation(organisationId: Integer, payload: Organisation, xFields: Option[String] = None): Option[Organisation] = {
    val await = Try(Await.result(updateOrganisationAsync(organisationId, payload, xFields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * Update an Organisation
   *
   * @param organisationId  
   * @param payload  
   * @param xFields An optional fields mask (optional)
   * @return Future(Organisation)
   */
  def updateOrganisationAsync(organisationId: Integer, payload: Organisation, xFields: Option[String] = None): Future[Organisation] = {
      helper.updateOrganisation(organisationId, payload, xFields)
  }

  /**
   * 
   * Add or subtract quota for an organisation
   *
   * @param organisationId  
   * @param payload  
   * @return void
   */
  def updateOrganisationQuota(organisationId: Integer, payload: OrganisationQuota) = {
    val await = Try(Await.result(updateOrganisationQuotaAsync(organisationId, payload), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * Add or subtract quota for an organisation
   *
   * @param organisationId  
   * @param payload  
   * @return Future(void)
   */
  def updateOrganisationQuotaAsync(organisationId: Integer, payload: OrganisationQuota) = {
      helper.updateOrganisationQuota(organisationId, payload)
  }

}

class OrganisationsApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def createOrganisation(payload: Organisation,
    xFields: Option[String] = None
    )(implicit reader: ClientResponseReader[Organisation], writer: RequestWriter[Organisation]): Future[Organisation] = {
    // create path and map variables
    val path = (addFmt("/organisations/"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (payload == null) throw new Exception("Missing required parameter 'payload' when calling OrganisationsApi->createOrganisation")
    xFields match {
      case Some(param) => headerParams += "X-Fields" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(payload))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteOrganisation(organisationId: Integer)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/organisations/{organisation_id}")
      replaceAll("\\{" + "organisation_id" + "\\}", organisationId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getOrganisation(organisationId: Integer,
    xFields: Option[String] = None
    )(implicit reader: ClientResponseReader[Organisation]): Future[Organisation] = {
    // create path and map variables
    val path = (addFmt("/organisations/{organisation_id}")
      replaceAll("\\{" + "organisation_id" + "\\}", organisationId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    xFields match {
      case Some(param) => headerParams += "X-Fields" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def listOrganisations(xFields: Option[String] = None
    )(implicit reader: ClientResponseReader[List[Organisation]]): Future[List[Organisation]] = {
    // create path and map variables
    val path = (addFmt("/organisations/"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    xFields match {
      case Some(param) => headerParams += "X-Fields" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateOrganisation(organisationId: Integer,
    payload: Organisation,
    xFields: Option[String] = None
    )(implicit reader: ClientResponseReader[Organisation], writer: RequestWriter[Organisation]): Future[Organisation] = {
    // create path and map variables
    val path = (addFmt("/organisations/{organisation_id}")
      replaceAll("\\{" + "organisation_id" + "\\}", organisationId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (payload == null) throw new Exception("Missing required parameter 'payload' when calling OrganisationsApi->updateOrganisation")
    xFields match {
      case Some(param) => headerParams += "X-Fields" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(payload))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateOrganisationQuota(organisationId: Integer,
    payload: OrganisationQuota)(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[OrganisationQuota]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/organisations/{organisation_id}/addquota")
      replaceAll("\\{" + "organisation_id" + "\\}", organisationId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (payload == null) throw new Exception("Missing required parameter 'payload' when calling OrganisationsApi->updateOrganisationQuota")

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(payload))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
