/**
 * AIcrowd Evaluations API
 * API to create and evaluate custom challenges on AIcrowd!
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.aicrowd.evaluations.api

import java.text.SimpleDateFormat

import com.aicrowd.evaluations.models.SubmissionLogs
import com.aicrowd.evaluations.models.SubmissionRetry
import com.aicrowd.evaluations.models.SubmissionRetryInput
import com.aicrowd.evaluations.models.Submissions
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class SubmissionsApi(
  val defBasePath: String = "https://localhost/v1",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new SubmissionsApiAsyncHelper(client, config)

  /**
   * 
   * Make a new submission
   *
   * @param payload  
   * @param xFields An optional fields mask (optional)
   * @return Submissions
   */
  def createSubmission(payload: Submissions, xFields: Option[String] = None): Option[Submissions] = {
    val await = Try(Await.result(createSubmissionAsync(payload, xFields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * Make a new submission
   *
   * @param payload  
   * @param xFields An optional fields mask (optional)
   * @return Future(Submissions)
   */
  def createSubmissionAsync(payload: Submissions, xFields: Option[String] = None): Future[Submissions] = {
      helper.createSubmission(payload, xFields)
  }

  /**
   * 
   * Stop evaluation of a submission and delete it
   *
   * @param submissionId  
   * @return void
   */
  def deleteSubmission(submissionId: Integer) = {
    val await = Try(Await.result(deleteSubmissionAsync(submissionId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * Stop evaluation of a submission and delete it
   *
   * @param submissionId  
   * @return Future(void)
   */
  def deleteSubmissionAsync(submissionId: Integer) = {
      helper.deleteSubmission(submissionId)
  }

  /**
   * 
   * Get the submission logs by submission ID
   *
   * @param submissionId  
   * @return void
   */
  def downloadSubmissionLogs(submissionId: Integer) = {
    val await = Try(Await.result(downloadSubmissionLogsAsync(submissionId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * Get the submission logs by submission ID
   *
   * @param submissionId  
   * @return Future(void)
   */
  def downloadSubmissionLogsAsync(submissionId: Integer) = {
      helper.downloadSubmissionLogs(submissionId)
  }

  /**
   * 
   * Get details of a submission by its ID
   *
   * @param submissionId  
   * @param xFields An optional fields mask (optional)
   * @return Submissions
   */
  def getSubmission(submissionId: Integer, xFields: Option[String] = None): Option[Submissions] = {
    val await = Try(Await.result(getSubmissionAsync(submissionId, xFields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * Get details of a submission by its ID
   *
   * @param submissionId  
   * @param xFields An optional fields mask (optional)
   * @return Future(Submissions)
   */
  def getSubmissionAsync(submissionId: Integer, xFields: Option[String] = None): Future[Submissions] = {
      helper.getSubmission(submissionId, xFields)
  }

  /**
   * 
   * Get the submission data by submission ID
   *
   * @param submissionId  
   * @return void
   */
  def getSubmissionData(submissionId: Integer) = {
    val await = Try(Await.result(getSubmissionDataAsync(submissionId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * Get the submission data by submission ID
   *
   * @param submissionId  
   * @return Future(void)
   */
  def getSubmissionDataAsync(submissionId: Integer) = {
      helper.getSubmissionData(submissionId)
  }

  /**
   * 
   * Get submission logs from loki
   *
   * @param submissionId  
   * @param step Granularity of logs (optional)
   * @param logLines Number of lines to fetch (optional)
   * @param xFields An optional fields mask (optional)
   * @return SubmissionLogs
   */
  def getSubmissionLogs(submissionId: Integer, step: Option[Integer] = None, logLines: Option[Integer] = None, xFields: Option[String] = None): Option[SubmissionLogs] = {
    val await = Try(Await.result(getSubmissionLogsAsync(submissionId, step, logLines, xFields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * Get submission logs from loki
   *
   * @param submissionId  
   * @param step Granularity of logs (optional)
   * @param logLines Number of lines to fetch (optional)
   * @param xFields An optional fields mask (optional)
   * @return Future(SubmissionLogs)
   */
  def getSubmissionLogsAsync(submissionId: Integer, step: Option[Integer] = None, logLines: Option[Integer] = None, xFields: Option[String] = None): Future[SubmissionLogs] = {
      helper.getSubmissionLogs(submissionId, step, logLines, xFields)
  }

  /**
   * 
   * List all submissions available
   *
   * @param perPage Results to display per page (optional)
   * @param page Page number (optional)
   * @param meta Fetch submissions containing this meta value (optional)
   * @param status Fetch submissions with this status (optional)
   * @param graderId Fetch submissions for a grader (optional)
   * @param userId Fetch submissions created by the user (optional)
   * @param xFields An optional fields mask (optional)
   * @return List[Submissions]
   */
  def listSubmissions(perPage: Option[String] = None, page: Option[String] = None, meta: Option[String] = None, status: Option[String] = None, graderId: Option[Integer] = None, userId: Option[Integer] = None, xFields: Option[String] = None): Option[List[Submissions]] = {
    val await = Try(Await.result(listSubmissionsAsync(perPage, page, meta, status, graderId, userId, xFields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * List all submissions available
   *
   * @param perPage Results to display per page (optional)
   * @param page Page number (optional)
   * @param meta Fetch submissions containing this meta value (optional)
   * @param status Fetch submissions with this status (optional)
   * @param graderId Fetch submissions for a grader (optional)
   * @param userId Fetch submissions created by the user (optional)
   * @param xFields An optional fields mask (optional)
   * @return Future(List[Submissions])
   */
  def listSubmissionsAsync(perPage: Option[String] = None, page: Option[String] = None, meta: Option[String] = None, status: Option[String] = None, graderId: Option[Integer] = None, userId: Option[Integer] = None, xFields: Option[String] = None): Future[List[Submissions]] = {
      helper.listSubmissions(perPage, page, meta, status, graderId, userId, xFields)
  }

  /**
   * 
   * Retry the submissions with given IDs
   *
   * @param payload  
   * @param xFields An optional fields mask (optional)
   * @return SubmissionRetry
   */
  def retrySubmissions(payload: SubmissionRetryInput, xFields: Option[String] = None): Option[SubmissionRetry] = {
    val await = Try(Await.result(retrySubmissionsAsync(payload, xFields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * Retry the submissions with given IDs
   *
   * @param payload  
   * @param xFields An optional fields mask (optional)
   * @return Future(SubmissionRetry)
   */
  def retrySubmissionsAsync(payload: SubmissionRetryInput, xFields: Option[String] = None): Future[SubmissionRetry] = {
      helper.retrySubmissions(payload, xFields)
  }

}

class SubmissionsApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def createSubmission(payload: Submissions,
    xFields: Option[String] = None
    )(implicit reader: ClientResponseReader[Submissions], writer: RequestWriter[Submissions]): Future[Submissions] = {
    // create path and map variables
    val path = (addFmt("/submissions/"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (payload == null) throw new Exception("Missing required parameter 'payload' when calling SubmissionsApi->createSubmission")
    xFields match {
      case Some(param) => headerParams += "X-Fields" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(payload))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteSubmission(submissionId: Integer)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/submissions/{submission_id}")
      replaceAll("\\{" + "submission_id" + "\\}", submissionId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def downloadSubmissionLogs(submissionId: Integer)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/submissions/{submission_id}/logs/download")
      replaceAll("\\{" + "submission_id" + "\\}", submissionId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getSubmission(submissionId: Integer,
    xFields: Option[String] = None
    )(implicit reader: ClientResponseReader[Submissions]): Future[Submissions] = {
    // create path and map variables
    val path = (addFmt("/submissions/{submission_id}")
      replaceAll("\\{" + "submission_id" + "\\}", submissionId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    xFields match {
      case Some(param) => headerParams += "X-Fields" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getSubmissionData(submissionId: Integer)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/submissions/{submission_id}/data")
      replaceAll("\\{" + "submission_id" + "\\}", submissionId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getSubmissionLogs(submissionId: Integer,
    step: Option[Integer] = None,
    logLines: Option[Integer] = None,
    xFields: Option[String] = None
    )(implicit reader: ClientResponseReader[SubmissionLogs]): Future[SubmissionLogs] = {
    // create path and map variables
    val path = (addFmt("/submissions/{submission_id}/logs")
      replaceAll("\\{" + "submission_id" + "\\}", submissionId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    step match {
      case Some(param) => queryParams += "step" -> param.toString
      case _ => queryParams
    }
    logLines match {
      case Some(param) => queryParams += "log_lines" -> param.toString
      case _ => queryParams
    }
    xFields match {
      case Some(param) => headerParams += "X-Fields" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def listSubmissions(perPage: Option[String] = None,
    page: Option[String] = None,
    meta: Option[String] = None,
    status: Option[String] = None,
    graderId: Option[Integer] = None,
    userId: Option[Integer] = None,
    xFields: Option[String] = None
    )(implicit reader: ClientResponseReader[List[Submissions]]): Future[List[Submissions]] = {
    // create path and map variables
    val path = (addFmt("/submissions/"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    perPage match {
      case Some(param) => queryParams += "per_page" -> param.toString
      case _ => queryParams
    }
    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }
    meta match {
      case Some(param) => queryParams += "meta" -> param.toString
      case _ => queryParams
    }
    status match {
      case Some(param) => queryParams += "status" -> param.toString
      case _ => queryParams
    }
    graderId match {
      case Some(param) => queryParams += "grader_id" -> param.toString
      case _ => queryParams
    }
    userId match {
      case Some(param) => queryParams += "user_id" -> param.toString
      case _ => queryParams
    }
    xFields match {
      case Some(param) => headerParams += "X-Fields" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def retrySubmissions(payload: SubmissionRetryInput,
    xFields: Option[String] = None
    )(implicit reader: ClientResponseReader[SubmissionRetry], writer: RequestWriter[SubmissionRetryInput]): Future[SubmissionRetry] = {
    // create path and map variables
    val path = (addFmt("/submissions/retry"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (payload == null) throw new Exception("Missing required parameter 'payload' when calling SubmissionsApi->retrySubmissions")
    xFields match {
      case Some(param) => headerParams += "X-Fields" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(payload))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
