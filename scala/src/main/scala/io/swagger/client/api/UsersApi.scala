/**
 * Evaluations API
 * API to create and evaluate custom challenges
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.User
import io.swagger.client.model.UserQuota
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class UsersApi(
  val defBasePath: String = "https://localhost/v1",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new UsersApiAsyncHelper(client, config)

  /**
   * 
   * Delete a user
   *
   * @param userId User identifier 
   * @return void
   */
  def deleteUserDao(userId: Integer) = {
    val await = Try(Await.result(deleteUserDaoAsync(userId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * Delete a user
   *
   * @param userId User identifier 
   * @return Future(void)
   */
  def deleteUserDaoAsync(userId: Integer) = {
      helper.deleteUserDao(userId)
  }

  /**
   * 
   * Get information of a user
   *
   * @param userId User identifier 
   * @param xFields An optional fields mask (optional)
   * @return User
   */
  def getUserDao(userId: Integer, xFields: Option[String] = None): Option[User] = {
    val await = Try(Await.result(getUserDaoAsync(userId, xFields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * Get information of a user
   *
   * @param userId User identifier 
   * @param xFields An optional fields mask (optional)
   * @return Future(User)
   */
  def getUserDaoAsync(userId: Integer, xFields: Option[String] = None): Future[User] = {
      helper.getUserDao(userId, xFields)
  }

  /**
   * 
   * Get all user
   *
   * @param xFields An optional fields mask (optional)
   * @return List[User]
   */
  def getUserListDao(xFields: Option[String] = None): Option[List[User]] = {
    val await = Try(Await.result(getUserListDaoAsync(xFields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * Get all user
   *
   * @param xFields An optional fields mask (optional)
   * @return Future(List[User])
   */
  def getUserListDaoAsync(xFields: Option[String] = None): Future[List[User]] = {
      helper.getUserListDao(xFields)
  }

  /**
   * 
   * Create a new user
   *
   * @param payload  
   * @param xFields An optional fields mask (optional)
   * @return User
   */
  def postUserListDao(payload: User, xFields: Option[String] = None): Option[User] = {
    val await = Try(Await.result(postUserListDaoAsync(payload, xFields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * Create a new user
   *
   * @param payload  
   * @param xFields An optional fields mask (optional)
   * @return Future(User)
   */
  def postUserListDaoAsync(payload: User, xFields: Option[String] = None): Future[User] = {
      helper.postUserListDao(payload, xFields)
  }

  /**
   * 
   * Add or subtract quota for a user
   *
   * @param userId User identifier 
   * @param payload  
   * @return void
   */
  def putQuotaDao(userId: Integer, payload: UserQuota) = {
    val await = Try(Await.result(putQuotaDaoAsync(userId, payload), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * Add or subtract quota for a user
   *
   * @param userId User identifier 
   * @param payload  
   * @return Future(void)
   */
  def putQuotaDaoAsync(userId: Integer, payload: UserQuota) = {
      helper.putQuotaDao(userId, payload)
  }

  /**
   * 
   * Update a user
   *
   * @param userId User identifier 
   * @param payload  
   * @param xFields An optional fields mask (optional)
   * @return User
   */
  def putUserDao(userId: Integer, payload: User, xFields: Option[String] = None): Option[User] = {
    val await = Try(Await.result(putUserDaoAsync(userId, payload, xFields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * Update a user
   *
   * @param userId User identifier 
   * @param payload  
   * @param xFields An optional fields mask (optional)
   * @return Future(User)
   */
  def putUserDaoAsync(userId: Integer, payload: User, xFields: Option[String] = None): Future[User] = {
      helper.putUserDao(userId, payload, xFields)
  }

}

class UsersApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def deleteUserDao(userId: Integer)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/users/{user_id}")
      replaceAll("\\{" + "user_id" + "\\}", userId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getUserDao(userId: Integer,
    xFields: Option[String] = None
    )(implicit reader: ClientResponseReader[User]): Future[User] = {
    // create path and map variables
    val path = (addFmt("/users/{user_id}")
      replaceAll("\\{" + "user_id" + "\\}", userId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    xFields match {
      case Some(param) => headerParams += "X-Fields" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getUserListDao(xFields: Option[String] = None
    )(implicit reader: ClientResponseReader[List[User]]): Future[List[User]] = {
    // create path and map variables
    val path = (addFmt("/users/"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    xFields match {
      case Some(param) => headerParams += "X-Fields" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def postUserListDao(payload: User,
    xFields: Option[String] = None
    )(implicit reader: ClientResponseReader[User], writer: RequestWriter[User]): Future[User] = {
    // create path and map variables
    val path = (addFmt("/users/"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (payload == null) throw new Exception("Missing required parameter 'payload' when calling UsersApi->postUserListDao")
    xFields match {
      case Some(param) => headerParams += "X-Fields" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(payload))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def putQuotaDao(userId: Integer,
    payload: UserQuota)(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[UserQuota]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/users/addquota/{user_id}")
      replaceAll("\\{" + "user_id" + "\\}", userId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (payload == null) throw new Exception("Missing required parameter 'payload' when calling UsersApi->putQuotaDao")

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(payload))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def putUserDao(userId: Integer,
    payload: User,
    xFields: Option[String] = None
    )(implicit reader: ClientResponseReader[User], writer: RequestWriter[User]): Future[User] = {
    // create path and map variables
    val path = (addFmt("/users/{user_id}")
      replaceAll("\\{" + "user_id" + "\\}", userId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (payload == null) throw new Exception("Missing required parameter 'payload' when calling UsersApi->putUserDao")
    xFields match {
      case Some(param) => headerParams += "X-Fields" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(payload))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
