/**
 * AIcrowd Evaluations API
 * API to create and evaluate custom challenges on AIcrowd!
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Grader } from '../model/grader';
import { GraderMeta } from '../model/graderMeta';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class GradersService {

    protected basePath = 'https://localhost/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Create a new grader
     * @param payload 
     * @param xFields An optional fields mask
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createGrader(payload: Grader, xFields?: string, observe?: 'body', reportProgress?: boolean): Observable<Grader>;
    public createGrader(payload: Grader, xFields?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Grader>>;
    public createGrader(payload: Grader, xFields?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Grader>>;
    public createGrader(payload: Grader, xFields?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling createGrader.');
        }


        let headers = this.defaultHeaders;
        if (xFields !== undefined && xFields !== null) {
            headers = headers.set('X-Fields', String(xFields));
        }

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["AUTHORIZATION"]) {
            headers = headers.set('AUTHORIZATION', this.configuration.apiKeys["AUTHORIZATION"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Grader>(`${this.basePath}/graders/`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Delete a grader by its ID
     * @param graderId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteGrader(graderId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteGrader(graderId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteGrader(graderId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteGrader(graderId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (graderId === null || graderId === undefined) {
            throw new Error('Required parameter graderId was null or undefined when calling deleteGrader.');
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["AUTHORIZATION"]) {
            headers = headers.set('AUTHORIZATION', this.configuration.apiKeys["AUTHORIZATION"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/graders/${encodeURIComponent(String(graderId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get details of a grader by its ID
     * @param graderId 
     * @param xFields An optional fields mask
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGrader(graderId: number, xFields?: string, observe?: 'body', reportProgress?: boolean): Observable<Grader>;
    public getGrader(graderId: number, xFields?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Grader>>;
    public getGrader(graderId: number, xFields?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Grader>>;
    public getGrader(graderId: number, xFields?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (graderId === null || graderId === undefined) {
            throw new Error('Required parameter graderId was null or undefined when calling getGrader.');
        }


        let headers = this.defaultHeaders;
        if (xFields !== undefined && xFields !== null) {
            headers = headers.set('X-Fields', String(xFields));
        }

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["AUTHORIZATION"]) {
            headers = headers.set('AUTHORIZATION', this.configuration.apiKeys["AUTHORIZATION"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Grader>(`${this.basePath}/graders/${encodeURIComponent(String(graderId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get the grader logs by submission ID
     * @param graderId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGraderLogs(graderId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getGraderLogs(graderId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getGraderLogs(graderId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getGraderLogs(graderId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (graderId === null || graderId === undefined) {
            throw new Error('Required parameter graderId was null or undefined when calling getGraderLogs.');
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["AUTHORIZATION"]) {
            headers = headers.set('AUTHORIZATION', this.configuration.apiKeys["AUTHORIZATION"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/graders/${encodeURIComponent(String(graderId))}/logs`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * List all graders available
     * @param perPage Results to display per page
     * @param page Page number
     * @param meta Fetch graders containing this meta value
     * @param name Fetch grader containing name
     * @param status Fetch graders with this status
     * @param userId Fetch graders created by the user
     * @param xFields An optional fields mask
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listGraders(perPage?: string, page?: string, meta?: string, name?: string, status?: string, userId?: number, xFields?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Grader>>;
    public listGraders(perPage?: string, page?: string, meta?: string, name?: string, status?: string, userId?: number, xFields?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Grader>>>;
    public listGraders(perPage?: string, page?: string, meta?: string, name?: string, status?: string, userId?: number, xFields?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Grader>>>;
    public listGraders(perPage?: string, page?: string, meta?: string, name?: string, status?: string, userId?: number, xFields?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {








        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (perPage !== undefined && perPage !== null) {
            queryParameters = queryParameters.set('per_page', <any>perPage);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (meta !== undefined && meta !== null) {
            queryParameters = queryParameters.set('meta', <any>meta);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('user_id', <any>userId);
        }

        let headers = this.defaultHeaders;
        if (xFields !== undefined && xFields !== null) {
            headers = headers.set('X-Fields', String(xFields));
        }

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["AUTHORIZATION"]) {
            headers = headers.set('AUTHORIZATION', this.configuration.apiKeys["AUTHORIZATION"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Grader>>(`${this.basePath}/graders/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Update meta details of a grader by its ID. Warning: There is no data validation.
     * @param graderId 
     * @param payload 
     * @param xFields An optional fields mask
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateGrader(graderId: number, payload: GraderMeta, xFields?: string, observe?: 'body', reportProgress?: boolean): Observable<Grader>;
    public updateGrader(graderId: number, payload: GraderMeta, xFields?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Grader>>;
    public updateGrader(graderId: number, payload: GraderMeta, xFields?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Grader>>;
    public updateGrader(graderId: number, payload: GraderMeta, xFields?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (graderId === null || graderId === undefined) {
            throw new Error('Required parameter graderId was null or undefined when calling updateGrader.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateGrader.');
        }


        let headers = this.defaultHeaders;
        if (xFields !== undefined && xFields !== null) {
            headers = headers.set('X-Fields', String(xFields));
        }

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["AUTHORIZATION"]) {
            headers = headers.set('AUTHORIZATION', this.configuration.apiKeys["AUTHORIZATION"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<Grader>(`${this.basePath}/graders/${encodeURIComponent(String(graderId))}`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
