/**
 * Evaluations API
 * API to create and evaluate custom challenges
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Organisation } from '../model/organisation';
import { OrganisationQuota } from '../model/organisationQuota';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class OrganisationsService {

    protected basePath = 'https://localhost/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Delete an Organisation
     * @param organisationId Organisation identifier
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteOrganisationDao(organisationId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteOrganisationDao(organisationId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteOrganisationDao(organisationId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteOrganisationDao(organisationId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (organisationId === null || organisationId === undefined) {
            throw new Error('Required parameter organisationId was null or undefined when calling deleteOrganisationDao.');
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys["AUTHORIZATION"]) {
            headers = headers.set('AUTHORIZATION', this.configuration.apiKeys["AUTHORIZATION"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/organisations/${encodeURIComponent(String(organisationId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get information of an organisation
     * @param organisationId Organisation identifier
     * @param xFields An optional fields mask
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOrganisationDao(organisationId: number, xFields?: string, observe?: 'body', reportProgress?: boolean): Observable<Organisation>;
    public getOrganisationDao(organisationId: number, xFields?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Organisation>>;
    public getOrganisationDao(organisationId: number, xFields?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Organisation>>;
    public getOrganisationDao(organisationId: number, xFields?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (organisationId === null || organisationId === undefined) {
            throw new Error('Required parameter organisationId was null or undefined when calling getOrganisationDao.');
        }


        let headers = this.defaultHeaders;
        if (xFields !== undefined && xFields !== null) {
            headers = headers.set('X-Fields', String(xFields));
        }

        // authentication (api_key) required
        if (this.configuration.apiKeys["AUTHORIZATION"]) {
            headers = headers.set('AUTHORIZATION', this.configuration.apiKeys["AUTHORIZATION"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Organisation>(`${this.basePath}/organisations/${encodeURIComponent(String(organisationId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get all organisations
     * @param xFields An optional fields mask
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOrganisationListDao(xFields?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Organisation>>;
    public getOrganisationListDao(xFields?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Organisation>>>;
    public getOrganisationListDao(xFields?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Organisation>>>;
    public getOrganisationListDao(xFields?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;
        if (xFields !== undefined && xFields !== null) {
            headers = headers.set('X-Fields', String(xFields));
        }

        // authentication (api_key) required
        if (this.configuration.apiKeys["AUTHORIZATION"]) {
            headers = headers.set('AUTHORIZATION', this.configuration.apiKeys["AUTHORIZATION"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Organisation>>(`${this.basePath}/organisations/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Create a new organisation
     * @param payload 
     * @param xFields An optional fields mask
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postOrganisationListDao(payload: Organisation, xFields?: string, observe?: 'body', reportProgress?: boolean): Observable<Organisation>;
    public postOrganisationListDao(payload: Organisation, xFields?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Organisation>>;
    public postOrganisationListDao(payload: Organisation, xFields?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Organisation>>;
    public postOrganisationListDao(payload: Organisation, xFields?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling postOrganisationListDao.');
        }


        let headers = this.defaultHeaders;
        if (xFields !== undefined && xFields !== null) {
            headers = headers.set('X-Fields', String(xFields));
        }

        // authentication (api_key) required
        if (this.configuration.apiKeys["AUTHORIZATION"]) {
            headers = headers.set('AUTHORIZATION', this.configuration.apiKeys["AUTHORIZATION"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Organisation>(`${this.basePath}/organisations/`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Update an Organisation
     * @param organisationId Organisation identifier
     * @param payload 
     * @param xFields An optional fields mask
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putOrganisationDao(organisationId: number, payload: Organisation, xFields?: string, observe?: 'body', reportProgress?: boolean): Observable<Organisation>;
    public putOrganisationDao(organisationId: number, payload: Organisation, xFields?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Organisation>>;
    public putOrganisationDao(organisationId: number, payload: Organisation, xFields?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Organisation>>;
    public putOrganisationDao(organisationId: number, payload: Organisation, xFields?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (organisationId === null || organisationId === undefined) {
            throw new Error('Required parameter organisationId was null or undefined when calling putOrganisationDao.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling putOrganisationDao.');
        }


        let headers = this.defaultHeaders;
        if (xFields !== undefined && xFields !== null) {
            headers = headers.set('X-Fields', String(xFields));
        }

        // authentication (api_key) required
        if (this.configuration.apiKeys["AUTHORIZATION"]) {
            headers = headers.set('AUTHORIZATION', this.configuration.apiKeys["AUTHORIZATION"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Organisation>(`${this.basePath}/organisations/${encodeURIComponent(String(organisationId))}`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Add or subtract quota for an organisation
     * @param organisationId Organisation identifier
     * @param payload 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putQuotaDao(organisationId: number, payload: OrganisationQuota, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public putQuotaDao(organisationId: number, payload: OrganisationQuota, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public putQuotaDao(organisationId: number, payload: OrganisationQuota, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public putQuotaDao(organisationId: number, payload: OrganisationQuota, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (organisationId === null || organisationId === undefined) {
            throw new Error('Required parameter organisationId was null or undefined when calling putQuotaDao.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling putQuotaDao.');
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys["AUTHORIZATION"]) {
            headers = headers.set('AUTHORIZATION', this.configuration.apiKeys["AUTHORIZATION"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/organisations/addquota/${encodeURIComponent(String(organisationId))}`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
