/**
 * Evaluations API
 * API to create and evaluate custom challenges
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class OrganisationsApi {
    protected basePath = 'https://localhost/v1';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * Delete an Organisation
     * @param organisationId Organisation identifier
     */
    public deleteOrganisationDao (organisationId: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/organisations/{organisation_id}'
            .replace('{' + 'organisation_id' + '}', encodeURIComponent(String(organisationId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'organisationId' is not null or undefined
        if (organisationId === null || organisationId === undefined) {
            throw new Error('Required parameter organisationId was null or undefined when calling deleteOrganisationDao.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Get information of an organisation
     * @param organisationId Organisation identifier
     * @param xFields An optional fields mask
     */
    public getOrganisationDao (organisationId: number, xFields?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Organisation> {
        const localVarPath = this.basePath + '/organisations/{organisation_id}'
            .replace('{' + 'organisation_id' + '}', encodeURIComponent(String(organisationId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'organisationId' is not null or undefined
        if (organisationId === null || organisationId === undefined) {
            throw new Error('Required parameter organisationId was null or undefined when calling getOrganisationDao.');
        }

        headerParams['X-Fields'] = xFields;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Get all organisations
     * @param xFields An optional fields mask
     */
    public getOrganisationListDao (xFields?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.Organisation>> {
        const localVarPath = this.basePath + '/organisations/';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        headerParams['X-Fields'] = xFields;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Create a new organisation
     * @param payload 
     * @param xFields An optional fields mask
     */
    public postOrganisationListDao (payload: models.Organisation, xFields?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Organisation> {
        const localVarPath = this.basePath + '/organisations/';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'payload' is not null or undefined
        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling postOrganisationListDao.');
        }

        headerParams['X-Fields'] = xFields;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: payload,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Update an Organisation
     * @param organisationId Organisation identifier
     * @param payload 
     * @param xFields An optional fields mask
     */
    public putOrganisationDao (organisationId: number, payload: models.Organisation, xFields?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Organisation> {
        const localVarPath = this.basePath + '/organisations/{organisation_id}'
            .replace('{' + 'organisation_id' + '}', encodeURIComponent(String(organisationId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'organisationId' is not null or undefined
        if (organisationId === null || organisationId === undefined) {
            throw new Error('Required parameter organisationId was null or undefined when calling putOrganisationDao.');
        }

        // verify required parameter 'payload' is not null or undefined
        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling putOrganisationDao.');
        }

        headerParams['X-Fields'] = xFields;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: payload,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Add or subtract quota for an organisation
     * @param organisationId Organisation identifier
     * @param payload 
     */
    public putQuotaDao (organisationId: number, payload: models.OrganisationQuota, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/organisations/addquota/{organisation_id}'
            .replace('{' + 'organisation_id' + '}', encodeURIComponent(String(organisationId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'organisationId' is not null or undefined
        if (organisationId === null || organisationId === undefined) {
            throw new Error('Required parameter organisationId was null or undefined when calling putQuotaDao.');
        }

        // verify required parameter 'payload' is not null or undefined
        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling putQuotaDao.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: payload,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
